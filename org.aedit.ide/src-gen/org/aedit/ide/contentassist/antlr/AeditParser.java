/*
 * generated by Xtext 2.12.0
 */
package org.aedit.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.aedit.ide.contentassist.antlr.internal.InternalAeditParser;
import org.aedit.services.AeditGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AeditParser extends AbstractContentAssistParser {

	@Inject
	private AeditGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAeditParser createParser() {
		InternalAeditParser result = new InternalAeditParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGenericRuleAccess().getAlternatives(), "rule__GenericRule__Alternatives");
					put(grammarAccess.getSchemaRuleAccess().getAlternatives(), "rule__SchemaRule__Alternatives");
					put(grammarAccess.getEnumRuleAccess().getAlternatives(), "rule__EnumRule__Alternatives");
					put(grammarAccess.getChangeSchemaAccess().getAlternatives_1(), "rule__ChangeSchema__Alternatives_1");
					put(grammarAccess.getAddAccess().getAlternatives(), "rule__Add__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getSCHEMA_TYPEAccess().getAlternatives(), "rule__SCHEMA_TYPE__Alternatives");
					put(grammarAccess.getVARIABLE_TYPEAccess().getAlternatives(), "rule__VARIABLE_TYPE__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup_2(), "rule__Feature__Group_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup(), "rule__FeatureMap__Group__0");
					put(grammarAccess.getRuleMapAccess().getGroup(), "rule__RuleMap__Group__0");
					put(grammarAccess.getRuleDeclarationAccess().getGroup(), "rule__RuleDeclaration__Group__0");
					put(grammarAccess.getChangeSchemaAccess().getGroup(), "rule__ChangeSchema__Group__0");
					put(grammarAccess.getChangeEnumAccess().getGroup(), "rule__ChangeEnum__Group__0");
					put(grammarAccess.getAddRecordAccess().getGroup(), "rule__AddRecord__Group__0");
					put(grammarAccess.getAddEnumerationAccess().getGroup(), "rule__AddEnumeration__Group__0");
					put(grammarAccess.getAddVariableAccess().getGroup(), "rule__AddVariable__Group__0");
					put(grammarAccess.getAddEnumAccess().getGroup(), "rule__AddEnum__Group__0");
					put(grammarAccess.getRemoveSchemaAccess().getGroup(), "rule__RemoveSchema__Group__0");
					put(grammarAccess.getRemoveVariableAccess().getGroup(), "rule__RemoveVariable__Group__0");
					put(grammarAccess.getRemoveEnumAccess().getGroup(), "rule__RemoveEnum__Group__0");
					put(grammarAccess.getRenameSchemaAccess().getGroup(), "rule__RenameSchema__Group__0");
					put(grammarAccess.getRenameVariableAccess().getGroup(), "rule__RenameVariable__Group__0");
					put(grammarAccess.getRenameEnumAccess().getGroup(), "rule__RenameEnum__Group__0");
					put(grammarAccess.getChangeDefValueAccess().getGroup(), "rule__ChangeDefValue__Group__0");
					put(grammarAccess.getChangeTypeAccess().getGroup(), "rule__ChangeType__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldAccess().getGroup_2(), "rule__Field__Group_2__0");
					put(grammarAccess.getRealAccess().getGroup(), "rule__Real__Group__0");
					put(grammarAccess.getQNAccess().getGroup(), "rule__QN__Group__0");
					put(grammarAccess.getQNAccess().getGroup_1(), "rule__QN__Group_1__0");
					put(grammarAccess.getModelAccess().getRuleDeclarationsAssignment_0(), "rule__Model__RuleDeclarationsAssignment_0");
					put(grammarAccess.getModelAccess().getRuleMapsAssignment_1(), "rule__Model__RuleMapsAssignment_1");
					put(grammarAccess.getModelAccess().getFeaturesAssignment_2(), "rule__Model__FeaturesAssignment_2");
					put(grammarAccess.getModelAccess().getFeatureMapsAssignment_3(), "rule__Model__FeatureMapsAssignment_3");
					put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
					put(grammarAccess.getFeatureAccess().getExtendAssignment_2_1(), "rule__Feature__ExtendAssignment_2_1");
					put(grammarAccess.getFeatureAccess().getRuleMapsAssignment_4(), "rule__Feature__RuleMapsAssignment_4");
					put(grammarAccess.getFeatureMapAccess().getNameAssignment_1(), "rule__FeatureMap__NameAssignment_1");
					put(grammarAccess.getRuleMapAccess().getNameAssignment_1(), "rule__RuleMap__NameAssignment_1");
					put(grammarAccess.getRuleMapAccess().getRulesAssignment_3(), "rule__RuleMap__RulesAssignment_3");
					put(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1(), "rule__RuleDeclaration__NameAssignment_1");
					put(grammarAccess.getRuleDeclarationAccess().getRulesAssignment_3(), "rule__RuleDeclaration__RulesAssignment_3");
					put(grammarAccess.getChangeSchemaAccess().getSchemaAssignment_2(), "rule__ChangeSchema__SchemaAssignment_2");
					put(grammarAccess.getChangeSchemaAccess().getRulesAssignment_4(), "rule__ChangeSchema__RulesAssignment_4");
					put(grammarAccess.getChangeEnumAccess().getSchemaAssignment_2(), "rule__ChangeEnum__SchemaAssignment_2");
					put(grammarAccess.getChangeEnumAccess().getRulesAssignment_4(), "rule__ChangeEnum__RulesAssignment_4");
					put(grammarAccess.getAddRecordAccess().getIndexAssignment_2(), "rule__AddRecord__IndexAssignment_2");
					put(grammarAccess.getAddRecordAccess().getNamespaceAssignment_5(), "rule__AddRecord__NamespaceAssignment_5");
					put(grammarAccess.getAddRecordAccess().getRecordNameAssignment_7(), "rule__AddRecord__RecordNameAssignment_7");
					put(grammarAccess.getAddRecordAccess().getFieldsAssignment_9(), "rule__AddRecord__FieldsAssignment_9");
					put(grammarAccess.getAddEnumerationAccess().getIndexAssignment_2(), "rule__AddEnumeration__IndexAssignment_2");
					put(grammarAccess.getAddEnumerationAccess().getNamespaceAssignment_5(), "rule__AddEnumeration__NamespaceAssignment_5");
					put(grammarAccess.getAddEnumerationAccess().getEnumNameAssignment_7(), "rule__AddEnumeration__EnumNameAssignment_7");
					put(grammarAccess.getAddEnumerationAccess().getSymbolsAssignment_9(), "rule__AddEnumeration__SymbolsAssignment_9");
					put(grammarAccess.getAddVariableAccess().getIndexAssignment_2(), "rule__AddVariable__IndexAssignment_2");
					put(grammarAccess.getAddVariableAccess().getNewVarAssignment_4(), "rule__AddVariable__NewVarAssignment_4");
					put(grammarAccess.getAddEnumAccess().getIndexAssignment_2(), "rule__AddEnum__IndexAssignment_2");
					put(grammarAccess.getAddEnumAccess().getVarNameAssignment_4(), "rule__AddEnum__VarNameAssignment_4");
					put(grammarAccess.getRemoveSchemaAccess().getSchemaTypeAssignment_1(), "rule__RemoveSchema__SchemaTypeAssignment_1");
					put(grammarAccess.getRemoveSchemaAccess().getSchemaAssignment_2(), "rule__RemoveSchema__SchemaAssignment_2");
					put(grammarAccess.getRemoveVariableAccess().getVariableAssignment_1(), "rule__RemoveVariable__VariableAssignment_1");
					put(grammarAccess.getRemoveEnumAccess().getVarNameAssignment_1(), "rule__RemoveEnum__VarNameAssignment_1");
					put(grammarAccess.getRenameSchemaAccess().getSchemaTypeAssignment_1(), "rule__RenameSchema__SchemaTypeAssignment_1");
					put(grammarAccess.getRenameSchemaAccess().getSchemaAssignment_2(), "rule__RenameSchema__SchemaAssignment_2");
					put(grammarAccess.getRenameSchemaAccess().getNewSchNameAssignment_4(), "rule__RenameSchema__NewSchNameAssignment_4");
					put(grammarAccess.getRenameVariableAccess().getVariableAssignment_1(), "rule__RenameVariable__VariableAssignment_1");
					put(grammarAccess.getRenameVariableAccess().getNewVarNameAssignment_3(), "rule__RenameVariable__NewVarNameAssignment_3");
					put(grammarAccess.getRenameEnumAccess().getOldNameAssignment_1(), "rule__RenameEnum__OldNameAssignment_1");
					put(grammarAccess.getRenameEnumAccess().getNewEnumNameAssignment_3(), "rule__RenameEnum__NewEnumNameAssignment_3");
					put(grammarAccess.getChangeDefValueAccess().getFieldAssignment_1(), "rule__ChangeDefValue__FieldAssignment_1");
					put(grammarAccess.getChangeDefValueAccess().getNewValAssignment_3(), "rule__ChangeDefValue__NewValAssignment_3");
					put(grammarAccess.getChangeTypeAccess().getFieldAssignment_1(), "rule__ChangeType__FieldAssignment_1");
					put(grammarAccess.getChangeTypeAccess().getNewTypeAssignment_3(), "rule__ChangeType__NewTypeAssignment_3");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getVarNameAssignment_1(), "rule__Field__VarNameAssignment_1");
					put(grammarAccess.getFieldAccess().getValueAssignment_2_1(), "rule__Field__ValueAssignment_2_1");
					put(grammarAccess.getFloatValueAccess().getValAssignment(), "rule__FloatValue__ValAssignment");
					put(grammarAccess.getStringValueAccess().getValAssignment(), "rule__StringValue__ValAssignment");
					put(grammarAccess.getIntValueAccess().getValAssignment(), "rule__IntValue__ValAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AeditGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AeditGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
