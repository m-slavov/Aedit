/*
 * generated by Xtext 2.21.0
 */
package org.aedit.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.aedit.ide.contentassist.antlr.internal.InternalAeditParser;
import org.aedit.services.AeditGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AeditParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AeditGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AeditGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGenericRuleAccess().getAlternatives(), "rule__GenericRule__Alternatives");
			builder.put(grammarAccess.getSchemaRuleAccess().getAlternatives(), "rule__SchemaRule__Alternatives");
			builder.put(grammarAccess.getEnumRuleAccess().getAlternatives(), "rule__EnumRule__Alternatives");
			builder.put(grammarAccess.getChangeSchemaAccess().getAlternatives_1(), "rule__ChangeSchema__Alternatives_1");
			builder.put(grammarAccess.getAddAccess().getAlternatives(), "rule__Add__Alternatives");
			builder.put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getSCHEMA_TYPEAccess().getAlternatives(), "rule__SCHEMA_TYPE__Alternatives");
			builder.put(grammarAccess.getVARIABLE_TYPEAccess().getAlternatives(), "rule__VARIABLE_TYPE__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup_2(), "rule__Feature__Group_2__0");
			builder.put(grammarAccess.getFeatureMapAccess().getGroup(), "rule__FeatureMap__Group__0");
			builder.put(grammarAccess.getRuleMapAccess().getGroup(), "rule__RuleMap__Group__0");
			builder.put(grammarAccess.getRuleDeclarationAccess().getGroup(), "rule__RuleDeclaration__Group__0");
			builder.put(grammarAccess.getChangeSchemaAccess().getGroup(), "rule__ChangeSchema__Group__0");
			builder.put(grammarAccess.getChangeEnumAccess().getGroup(), "rule__ChangeEnum__Group__0");
			builder.put(grammarAccess.getAddRecordAccess().getGroup(), "rule__AddRecord__Group__0");
			builder.put(grammarAccess.getAddEnumerationAccess().getGroup(), "rule__AddEnumeration__Group__0");
			builder.put(grammarAccess.getAddEnumerationAccess().getGroup_10(), "rule__AddEnumeration__Group_10__0");
			builder.put(grammarAccess.getAddVariableAccess().getGroup(), "rule__AddVariable__Group__0");
			builder.put(grammarAccess.getAddEnumAccess().getGroup(), "rule__AddEnum__Group__0");
			builder.put(grammarAccess.getRemoveSchemaAccess().getGroup(), "rule__RemoveSchema__Group__0");
			builder.put(grammarAccess.getRemoveVariableAccess().getGroup(), "rule__RemoveVariable__Group__0");
			builder.put(grammarAccess.getRemoveEnumAccess().getGroup(), "rule__RemoveEnum__Group__0");
			builder.put(grammarAccess.getRenameSchemaAccess().getGroup(), "rule__RenameSchema__Group__0");
			builder.put(grammarAccess.getRenameVariableAccess().getGroup(), "rule__RenameVariable__Group__0");
			builder.put(grammarAccess.getRenameEnumAccess().getGroup(), "rule__RenameEnum__Group__0");
			builder.put(grammarAccess.getChangeDefValueAccess().getGroup(), "rule__ChangeDefValue__Group__0");
			builder.put(grammarAccess.getChangeTypeAccess().getGroup(), "rule__ChangeType__Group__0");
			builder.put(grammarAccess.getCustomTypeFieldAccess().getGroup(), "rule__CustomTypeField__Group__0");
			builder.put(grammarAccess.getPrimitiveTypeFieldAccess().getGroup(), "rule__PrimitiveTypeField__Group__0");
			builder.put(grammarAccess.getPrimitiveTypeFieldAccess().getGroup_2(), "rule__PrimitiveTypeField__Group_2__0");
			builder.put(grammarAccess.getRealAccess().getGroup(), "rule__Real__Group__0");
			builder.put(grammarAccess.getQNAccess().getGroup(), "rule__QN__Group__0");
			builder.put(grammarAccess.getQNAccess().getGroup_1(), "rule__QN__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getRuleDeclarationsAssignment_0(), "rule__Model__RuleDeclarationsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRuleMapsAssignment_1(), "rule__Model__RuleMapsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getFeaturesAssignment_2(), "rule__Model__FeaturesAssignment_2");
			builder.put(grammarAccess.getModelAccess().getFeatureMapsAssignment_3(), "rule__Model__FeatureMapsAssignment_3");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
			builder.put(grammarAccess.getFeatureAccess().getExtendAssignment_2_1(), "rule__Feature__ExtendAssignment_2_1");
			builder.put(grammarAccess.getFeatureAccess().getRuleMapsAssignment_4(), "rule__Feature__RuleMapsAssignment_4");
			builder.put(grammarAccess.getFeatureMapAccess().getNameAssignment_1(), "rule__FeatureMap__NameAssignment_1");
			builder.put(grammarAccess.getRuleMapAccess().getNameAssignment_1(), "rule__RuleMap__NameAssignment_1");
			builder.put(grammarAccess.getRuleMapAccess().getRulesAssignment_3(), "rule__RuleMap__RulesAssignment_3");
			builder.put(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1(), "rule__RuleDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getRuleDeclarationAccess().getRulesAssignment_3(), "rule__RuleDeclaration__RulesAssignment_3");
			builder.put(grammarAccess.getChangeSchemaAccess().getSchemaAssignment_2(), "rule__ChangeSchema__SchemaAssignment_2");
			builder.put(grammarAccess.getChangeSchemaAccess().getRulesAssignment_4(), "rule__ChangeSchema__RulesAssignment_4");
			builder.put(grammarAccess.getChangeEnumAccess().getSchemaAssignment_2(), "rule__ChangeEnum__SchemaAssignment_2");
			builder.put(grammarAccess.getChangeEnumAccess().getRulesAssignment_4(), "rule__ChangeEnum__RulesAssignment_4");
			builder.put(grammarAccess.getAddRecordAccess().getIndexAssignment_2(), "rule__AddRecord__IndexAssignment_2");
			builder.put(grammarAccess.getAddRecordAccess().getNamespaceAssignment_5(), "rule__AddRecord__NamespaceAssignment_5");
			builder.put(grammarAccess.getAddRecordAccess().getRecordNameAssignment_7(), "rule__AddRecord__RecordNameAssignment_7");
			builder.put(grammarAccess.getAddRecordAccess().getFieldsAssignment_9(), "rule__AddRecord__FieldsAssignment_9");
			builder.put(grammarAccess.getAddEnumerationAccess().getIndexAssignment_2(), "rule__AddEnumeration__IndexAssignment_2");
			builder.put(grammarAccess.getAddEnumerationAccess().getNamespaceAssignment_5(), "rule__AddEnumeration__NamespaceAssignment_5");
			builder.put(grammarAccess.getAddEnumerationAccess().getEnumNameAssignment_7(), "rule__AddEnumeration__EnumNameAssignment_7");
			builder.put(grammarAccess.getAddEnumerationAccess().getSymbolsAssignment_9(), "rule__AddEnumeration__SymbolsAssignment_9");
			builder.put(grammarAccess.getAddEnumerationAccess().getSymbolsAssignment_10_1(), "rule__AddEnumeration__SymbolsAssignment_10_1");
			builder.put(grammarAccess.getAddVariableAccess().getIndexAssignment_2(), "rule__AddVariable__IndexAssignment_2");
			builder.put(grammarAccess.getAddVariableAccess().getNewVarAssignment_4(), "rule__AddVariable__NewVarAssignment_4");
			builder.put(grammarAccess.getAddEnumAccess().getIndexAssignment_2(), "rule__AddEnum__IndexAssignment_2");
			builder.put(grammarAccess.getAddEnumAccess().getVarNameAssignment_4(), "rule__AddEnum__VarNameAssignment_4");
			builder.put(grammarAccess.getRemoveSchemaAccess().getSchemaTypeAssignment_1(), "rule__RemoveSchema__SchemaTypeAssignment_1");
			builder.put(grammarAccess.getRemoveSchemaAccess().getSchemaAssignment_2(), "rule__RemoveSchema__SchemaAssignment_2");
			builder.put(grammarAccess.getRemoveVariableAccess().getVariableAssignment_1(), "rule__RemoveVariable__VariableAssignment_1");
			builder.put(grammarAccess.getRemoveEnumAccess().getVarNameAssignment_1(), "rule__RemoveEnum__VarNameAssignment_1");
			builder.put(grammarAccess.getRenameSchemaAccess().getSchemaTypeAssignment_1(), "rule__RenameSchema__SchemaTypeAssignment_1");
			builder.put(grammarAccess.getRenameSchemaAccess().getSchemaAssignment_2(), "rule__RenameSchema__SchemaAssignment_2");
			builder.put(grammarAccess.getRenameSchemaAccess().getNewSchNameAssignment_4(), "rule__RenameSchema__NewSchNameAssignment_4");
			builder.put(grammarAccess.getRenameVariableAccess().getVariableAssignment_1(), "rule__RenameVariable__VariableAssignment_1");
			builder.put(grammarAccess.getRenameVariableAccess().getNewVarNameAssignment_3(), "rule__RenameVariable__NewVarNameAssignment_3");
			builder.put(grammarAccess.getRenameEnumAccess().getOldNameAssignment_1(), "rule__RenameEnum__OldNameAssignment_1");
			builder.put(grammarAccess.getRenameEnumAccess().getNewEnumNameAssignment_3(), "rule__RenameEnum__NewEnumNameAssignment_3");
			builder.put(grammarAccess.getChangeDefValueAccess().getFieldAssignment_1(), "rule__ChangeDefValue__FieldAssignment_1");
			builder.put(grammarAccess.getChangeDefValueAccess().getNewValAssignment_3(), "rule__ChangeDefValue__NewValAssignment_3");
			builder.put(grammarAccess.getChangeTypeAccess().getFieldAssignment_1(), "rule__ChangeType__FieldAssignment_1");
			builder.put(grammarAccess.getChangeTypeAccess().getNewTypeAssignment_3(), "rule__ChangeType__NewTypeAssignment_3");
			builder.put(grammarAccess.getCustomTypeFieldAccess().getTypeAssignment_0(), "rule__CustomTypeField__TypeAssignment_0");
			builder.put(grammarAccess.getCustomTypeFieldAccess().getVarNameAssignment_1(), "rule__CustomTypeField__VarNameAssignment_1");
			builder.put(grammarAccess.getPrimitiveTypeFieldAccess().getTypeAssignment_0(), "rule__PrimitiveTypeField__TypeAssignment_0");
			builder.put(grammarAccess.getPrimitiveTypeFieldAccess().getVarNameAssignment_1(), "rule__PrimitiveTypeField__VarNameAssignment_1");
			builder.put(grammarAccess.getPrimitiveTypeFieldAccess().getValueAssignment_2_1(), "rule__PrimitiveTypeField__ValueAssignment_2_1");
			builder.put(grammarAccess.getFloatValueAccess().getValAssignment(), "rule__FloatValue__ValAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValAssignment(), "rule__StringValue__ValAssignment");
			builder.put(grammarAccess.getIntValueAccess().getValAssignment(), "rule__IntValue__ValAssignment");
			builder.put(grammarAccess.getNullAccess().getValAssignment(), "rule__Null__ValAssignment");
			builder.put(grammarAccess.getBooleanValueAccess().getValAssignment(), "rule__BooleanValue__ValAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AeditGrammarAccess grammarAccess;

	@Override
	protected InternalAeditParser createParser() {
		InternalAeditParser result = new InternalAeditParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AeditGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AeditGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
