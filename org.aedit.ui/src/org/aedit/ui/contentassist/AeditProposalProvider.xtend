/*
 * generated by Xtext 2.12.0
 */
package org.aedit.ui.contentassist

import avroclipse.avroIDL.AvroIDLFile
import avroclipse.avroIDL.TypeDef
import org.aedit.aedit.ChangeEnum
import org.aedit.validation.SensorFeatures
import org.aedit.aedit.ChangeSchema
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class AeditProposalProvider extends AbstractAeditProposalProvider {
	
	override completeRuleMap_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		for (feature : SensorFeatures.Features.values){
			acceptor.accept(createCompletionProposal(feature.toString, context))
		}
	}
	
	override completeChangeDefValue_Field(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}

	override completeChangeType_Field(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}

	override completeRemoveVariable_Variable(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}

	override completeRenameVariable_Variable(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeAddAnnotationToField_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeAddNameAnnotationToField_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeRemoveAnnotationFromField_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeRemoveNameAnnotationFromField_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeRemoveArrayValue_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeRemoveArrayValueAtIndex_Array(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}
	
	override completeAddValueToArray_Array(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.terminal as CrossReference,
			context,
			acceptor
		) [ entry |
			isInScope(entry, model)
		]
	}

	override completeRemoveEnum_VarName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		var ChangeEnum parentContainer

		if (model instanceof ChangeEnum) {
			parentContainer = model
		} else {
			parentContainer = model.eContainer as ChangeEnum
		}
		// Get list of enums
		val enumList = parentContainer.schema.literals
		for (enum : enumList) {
			acceptor.accept(createCompletionProposal(enum, context))
		}
	}

	override completeRenameEnum_OldName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		var ChangeEnum parentContainer

		if (model instanceof ChangeEnum) {
			parentContainer = model
		} else {
			parentContainer = model.eContainer as ChangeEnum
		}
		// Get list of enums
		val enumList = parentContainer.schema.literals
		for (enum : enumList) {
			acceptor.accept(createCompletionProposal(enum, context))
		}
	}

	def isInScope(IEObjectDescription entry, EObject model) {
		if (entry.qualifiedName.segments.length > 2) {
			val fieldSchemaName = entry.qualifiedName.segments.get(1)
			val fieldNamespace = entry.qualifiedName.segments.get(0)

			val parentContainer = model.eContainer as ChangeSchema
			// Get name of the schema
			val parentSchemaName = parentContainer.schema.name
			// Get name of the protocol 
			var parentNamespaceContainer = parentContainer.schema.eContainer as TypeDef
			val parentNamespace = (parentNamespaceContainer.eContainer as AvroIDLFile).name

			if (fieldSchemaName.equals(parentSchemaName) && fieldNamespace.equals(parentNamespace)) {
				return true;
			}
		}
		return false
	}

}
