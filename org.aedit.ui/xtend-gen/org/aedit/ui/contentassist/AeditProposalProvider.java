/**
 * generated by Xtext 2.12.0
 */
package org.aedit.ui.contentassist;

import com.google.common.base.Predicate;
import org.aedit.ui.contentassist.AbstractAeditProposalProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class AeditProposalProvider extends AbstractAeditProposalProvider {
  @Override
  public void completeChangeDefValue_Field(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    AbstractElement _terminal = assignment.getTerminal();
    final Predicate<IEObjectDescription> _function = (IEObjectDescription entry) -> {
      return this.isInScope(entry, model);
    };
    this.lookupCrossReference(
      ((CrossReference) _terminal), context, acceptor, _function);
  }
  
  @Override
  public void completeChangeType_Field(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    AbstractElement _terminal = assignment.getTerminal();
    final Predicate<IEObjectDescription> _function = (IEObjectDescription entry) -> {
      return this.isInScope(entry, model);
    };
    this.lookupCrossReference(
      ((CrossReference) _terminal), context, acceptor, _function);
  }
  
  @Override
  public void completeRemoveVariable_Variable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    AbstractElement _terminal = assignment.getTerminal();
    final Predicate<IEObjectDescription> _function = (IEObjectDescription entry) -> {
      return this.isInScope(entry, model);
    };
    this.lookupCrossReference(
      ((CrossReference) _terminal), context, acceptor, _function);
  }
  
  @Override
  public void completeRenameVariable_Variable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    AbstractElement _terminal = assignment.getTerminal();
    final Predicate<IEObjectDescription> _function = (IEObjectDescription entry) -> {
      return this.isInScope(entry, model);
    };
    this.lookupCrossReference(
      ((CrossReference) _terminal), context, acceptor, _function);
  }
  
  @Override
  public void completeRemoveEnum_VarName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field schema is undefined for the type ChangeEnum"
      + "\nliterals cannot be resolved");
  }
  
  @Override
  public void completeRenameEnum_OldName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field schema is undefined for the type ChangeEnum"
      + "\nliterals cannot be resolved");
  }
  
  public boolean isInScope(final IEObjectDescription entry, final EObject model) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field schema is undefined for the type ChangeSchema"
      + "\nThe method or field schema is undefined for the type ChangeSchema"
      + "\nname cannot be resolved"
      + "\neContainer cannot be resolved");
  }
}
