/**
 * generated by Xtext 2.12.0
 */
package org.aedit.scoping;

import com.google.common.base.Objects;
import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.ChangeEnum;
import org.aedit.aedit.ChangeSchema;
import org.aedit.scoping.AbstractAeditScopeProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.impl.AliasedEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class AeditScopeProvider extends AbstractAeditScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      if (((context.eContainer() instanceof ChangeSchema) || (context.eContainer() instanceof ChangeEnum))) {
        if ((((Objects.equal(reference, AeditPackage.Literals.RENAME_VARIABLE__VARIABLE) || Objects.equal(reference, AeditPackage.Literals.REMOVE_VARIABLE__VARIABLE)) || Objects.equal(reference, AeditPackage.Literals.CHANGE_DEF_VALUE__FIELD)) || Objects.equal(reference, AeditPackage.Literals.CHANGE_TYPE__FIELD))) {
          final IScope scope = super.getScope(context, reference);
          final Function1<IEObjectDescription, AliasedEObjectDescription> _function = (IEObjectDescription d) -> {
            AliasedEObjectDescription _xifexpression = null;
            int _segmentCount = d.getName().getSegmentCount();
            boolean _greaterThan = (_segmentCount > 2);
            if (_greaterThan) {
              QualifiedName _create = QualifiedName.create(d.getName().getSegments().get(2));
              _xifexpression = new AliasedEObjectDescription(_create, d);
            } else {
              AliasedEObjectDescription _xifexpression_1 = null;
              int _segmentCount_1 = d.getName().getSegmentCount();
              boolean _greaterThan_1 = (_segmentCount_1 > 1);
              if (_greaterThan_1) {
                QualifiedName _create_1 = QualifiedName.create(d.getName().getSegments().get(1));
                _xifexpression_1 = new AliasedEObjectDescription(_create_1, d);
              } else {
                QualifiedName _create_2 = QualifiedName.create(d.getName().toString());
                _xifexpression_1 = new AliasedEObjectDescription(_create_2, d);
              }
              _xifexpression = _xifexpression_1;
            }
            return _xifexpression;
          };
          final Function1<AliasedEObjectDescription, IEObjectDescription> _function_1 = (AliasedEObjectDescription d) -> {
            return ((IEObjectDescription) d);
          };
          final Iterable<IEObjectDescription> defs = IterableExtensions.<AliasedEObjectDescription, IEObjectDescription>map(IterableExtensions.<IEObjectDescription, AliasedEObjectDescription>map(scope.getAllElements(), _function), _function_1);
          return new SimpleScope(defs);
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
}
