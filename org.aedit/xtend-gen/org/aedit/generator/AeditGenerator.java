/**
 * generated by Xtext 2.12.0
 */
package org.aedit.generator;

import HelperClass.HelperClass;
import avroclipse.avroIDL.AnnotatedTypeLink;
import avroclipse.avroIDL.ArrayFieldType;
import avroclipse.avroIDL.AvroIDLFactory;
import avroclipse.avroIDL.AvroIDLFile;
import avroclipse.avroIDL.CustomTypeLink;
import avroclipse.avroIDL.EnumType;
import avroclipse.avroIDL.ErrorType;
import avroclipse.avroIDL.PrimativeTypeLink;
import avroclipse.avroIDL.ProtocolElement;
import avroclipse.avroIDL.RecordType;
import avroclipse.avroIDL.Type;
import avroclipse.avroIDL.TypeDef;
import avroclipse.avroIDL.TypeLink;
import avroclipse.avroIDL.Values;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.aedit.aedit.Add;
import org.aedit.aedit.AddAnnotationToField;
import org.aedit.aedit.AddAnnotationToSchema;
import org.aedit.aedit.AddEnum;
import org.aedit.aedit.AddEnumeration;
import org.aedit.aedit.AddError;
import org.aedit.aedit.AddNameAnnotationToField;
import org.aedit.aedit.AddRecord;
import org.aedit.aedit.AddValueToArray;
import org.aedit.aedit.AddVariable;
import org.aedit.aedit.AnnotatedTypes;
import org.aedit.aedit.Annotation;
import org.aedit.aedit.Array;
import org.aedit.aedit.ArrayEditRules;
import org.aedit.aedit.ArrayTypeField;
import org.aedit.aedit.BooleanValue;
import org.aedit.aedit.ChangeDefValue;
import org.aedit.aedit.ChangeEnum;
import org.aedit.aedit.ChangeSchema;
import org.aedit.aedit.ChangeType;
import org.aedit.aedit.ComplexTypeField;
import org.aedit.aedit.CustomType;
import org.aedit.aedit.CustomTypeField;
import org.aedit.aedit.EnumRule;
import org.aedit.aedit.Feature;
import org.aedit.aedit.FeatureMap;
import org.aedit.aedit.Field;
import org.aedit.aedit.FloatValue;
import org.aedit.aedit.GenericRule;
import org.aedit.aedit.IntValue;
import org.aedit.aedit.Null;
import org.aedit.aedit.PrimitiveType;
import org.aedit.aedit.PrimitiveTypeField;
import org.aedit.aedit.RemoveAnnotationFromField;
import org.aedit.aedit.RemoveAnnotationFromSchema;
import org.aedit.aedit.RemoveArrayValue;
import org.aedit.aedit.RemoveArrayValueAtIndex;
import org.aedit.aedit.RemoveEnum;
import org.aedit.aedit.RemoveNameAnnotationFromField;
import org.aedit.aedit.RemoveSchema;
import org.aedit.aedit.RemoveVariable;
import org.aedit.aedit.RenameEnum;
import org.aedit.aedit.RenameSchema;
import org.aedit.aedit.RenameVariable;
import org.aedit.aedit.RuleDeclaration;
import org.aedit.aedit.RuleMap;
import org.aedit.aedit.SchemaRule;
import org.aedit.aedit.StringValue;
import org.aedit.aedit.Types;
import org.aedit.aedit.Value;
import org.aedit.generator.Singleton;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AeditGenerator extends AbstractGenerator {
  public Map<String, AvroIDLFile> protocols = new HashMap<String, AvroIDLFile>();
  
  private String currentProtocol;
  
  private String currentSchema;
  
  private int index;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String workSpaceDir = Singleton.getInstance().workspaceDir;
    this.protocols = HelperClass.getAvroFiles(resource);
    boolean _isEmpty = IterableExtensions.isEmpty(Iterables.<FeatureMap>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FeatureMap.class));
    boolean _not = (!_isEmpty);
    if (_not) {
      Iterable<FeatureMap> _filter = Iterables.<FeatureMap>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FeatureMap.class);
      for (final FeatureMap e : _filter) {
        this.compile(e);
      }
      final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
        boolean _equals = workSpaceDir.equals("undefined");
        boolean _not_1 = (!_equals);
        if (_not_1) {
          this.saveAvroIDLFile(
            URI.createFileURI((((workSpaceDir + "\\aedit-gen\\NEW") + p1) + ".avdl")), p2);
        }
      };
      this.protocols.forEach(_function);
    }
  }
  
  public AvroIDLFile loadAvroIDLFile(final URI uri, final Resource resource) {
    final Resource res = resource.getResourceSet().getResource(uri, true);
    EObject _get = res.getContents().get(0);
    final AvroIDLFile originalAvroFile = ((AvroIDLFile) _get);
    final AvroIDLFile copyAvroFile = EcoreUtil2.<AvroIDLFile>copy(originalAvroFile);
    return copyAvroFile;
  }
  
  public void saveAvroIDLFile(final URI uri, final AvroIDLFile newModel) {
    try {
      Resource rs = new ResourceSetImpl().createResource(uri);
      rs.getContents().add(newModel);
      rs.save(null);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void compile(final FeatureMap featureMap) {
    this.compile(featureMap.getName());
  }
  
  public void compile(final Feature feature) {
    Feature _extend = feature.getExtend();
    boolean _tripleNotEquals = (_extend != null);
    if (_tripleNotEquals) {
      this.compile(feature.getExtend());
    }
    EList<RuleMap> _ruleMaps = feature.getRuleMaps();
    for (final RuleMap ruleMap : _ruleMaps) {
      this.compile(ruleMap);
    }
  }
  
  public void compile(final RuleMap ruleMap) {
    EList<RuleDeclaration> _rules = ruleMap.getRules();
    for (final RuleDeclaration ruleDeclaration : _rules) {
      this.compile(ruleDeclaration);
    }
  }
  
  public void compile(final RuleDeclaration ruleDeclaration) {
    EList<GenericRule> _rules = ruleDeclaration.getRules();
    for (final GenericRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public ProtocolElement compile(final GenericRule genRule) {
    ProtocolElement _switchResult = null;
    boolean _matched = false;
    if (genRule instanceof RenameSchema) {
      _matched=true;
      this.compile(((RenameSchema)genRule));
    }
    if (!_matched) {
      if (genRule instanceof RemoveSchema) {
        _matched=true;
        _switchResult = this.compile(((RemoveSchema)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof Add) {
        _matched=true;
        this.compile(((Add)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof ChangeSchema) {
        _matched=true;
        this.compile(((ChangeSchema)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof ChangeEnum) {
        _matched=true;
        this.compile(((ChangeEnum)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof AddAnnotationToSchema) {
        _matched=true;
        this.compile(((AddAnnotationToSchema)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof RemoveAnnotationFromSchema) {
        _matched=true;
        this.compile(((RemoveAnnotationFromSchema)genRule));
      }
    }
    return _switchResult;
  }
  
  public void compile(final RenameSchema renameSchema) {
    final String schemaName = renameSchema.getSchema().getName();
    EObject _eContainer = renameSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          ((RecordType) _type_2).setName(renameSchema.getNewSchName());
        }
      } else {
        Type _type_3 = typeDef.getType();
        if ((_type_3 instanceof EnumType)) {
          Type _type_4 = typeDef.getType();
          boolean _equals_1 = ((EnumType) _type_4).getName().equals(schemaName);
          if (_equals_1) {
            Type _type_5 = typeDef.getType();
            ((EnumType) _type_5).setName(renameSchema.getNewSchName());
          }
        } else {
          Type _type_6 = typeDef.getType();
          if ((_type_6 instanceof ErrorType)) {
            Type _type_7 = typeDef.getType();
            boolean _equals_2 = ((ErrorType) _type_7).getName().equals(schemaName);
            if (_equals_2) {
              Type _type_8 = typeDef.getType();
              ((ErrorType) _type_8).setName(renameSchema.getNewSchName());
            }
          }
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
  }
  
  public ProtocolElement compile(final RemoveSchema removeSchema) {
    ProtocolElement _xblockexpression = null;
    {
      final String schemaName = removeSchema.getSchema().getName();
      EObject _eContainer = removeSchema.getSchema().eContainer();
      TypeDef schemaContainer = ((TypeDef) _eContainer);
      EObject _eContainer_1 = schemaContainer.eContainer();
      final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
      final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
        Type _type = typeDef.getType();
        if ((_type instanceof RecordType)) {
          Type _type_1 = typeDef.getType();
          boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
          if (_equals) {
            this.index = this.protocols.get(protocolName).getElements().indexOf(typeDef);
          }
        } else {
          Type _type_2 = typeDef.getType();
          if ((_type_2 instanceof EnumType)) {
            Type _type_3 = typeDef.getType();
            boolean _equals_1 = ((EnumType) _type_3).getName().equals(schemaName);
            if (_equals_1) {
              this.index = this.protocols.get(protocolName).getElements().indexOf(typeDef);
            }
          } else {
            Type _type_4 = typeDef.getType();
            if ((_type_4 instanceof ErrorType)) {
              Type _type_5 = typeDef.getType();
              boolean _equals_2 = ((ErrorType) _type_5).getName().equals(schemaName);
              if (_equals_2) {
                this.index = this.protocols.get(protocolName).getElements().indexOf(typeDef);
              }
            }
          }
        }
      };
      Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
      _xblockexpression = this.protocols.get(protocolName).getElements().remove(this.index);
    }
    return _xblockexpression;
  }
  
  public void compile(final Add add) {
    boolean _matched = false;
    if (add instanceof AddRecord) {
      _matched=true;
      this.compile(((AddRecord)add));
    }
    if (!_matched) {
      if (add instanceof AddEnumeration) {
        _matched=true;
        this.compile(((AddEnumeration)add));
      }
    }
    if (!_matched) {
      if (add instanceof AddError) {
        _matched=true;
        this.compile(((AddError)add));
      }
    }
  }
  
  public void compile(final AddRecord addRecord) {
    final String schemaName = addRecord.getRecordName();
    final String protocolName = addRecord.getNamespace().getName();
    final TypeDef newTypeDef = AvroIDLFactory.eINSTANCE.createTypeDef();
    RecordType _createRecordType = AvroIDLFactory.eINSTANCE.createRecordType();
    final Procedure1<RecordType> _function = (RecordType it) -> {
      it.setName(schemaName);
      final Consumer<Field> _function_1 = (Field field) -> {
        it.getFields().add(this.createField(field));
      };
      addRecord.getFields().forEach(_function_1);
    };
    RecordType _doubleArrow = ObjectExtensions.<RecordType>operator_doubleArrow(_createRecordType, _function);
    newTypeDef.setType(_doubleArrow);
    this.protocols.get(protocolName).getElements().add(addRecord.getIndex(), newTypeDef);
  }
  
  public void compile(final AddError addError) {
    final String schemaName = addError.getErrorName();
    final String protocolName = addError.getNamespace().getName();
    final TypeDef newTypeDef = AvroIDLFactory.eINSTANCE.createTypeDef();
    ErrorType _createErrorType = AvroIDLFactory.eINSTANCE.createErrorType();
    final Procedure1<ErrorType> _function = (ErrorType it) -> {
      it.setName(schemaName);
      final Consumer<Field> _function_1 = (Field field) -> {
        it.getFields().add(this.createField(field));
      };
      addError.getFields().forEach(_function_1);
    };
    ErrorType _doubleArrow = ObjectExtensions.<ErrorType>operator_doubleArrow(_createErrorType, _function);
    newTypeDef.setType(_doubleArrow);
    this.protocols.get(protocolName).getElements().add(addError.getIndex(), newTypeDef);
  }
  
  public void compile(final AddEnumeration addEnumeration) {
    final String schemaName = addEnumeration.getEnumName();
    final String protocolName = addEnumeration.getNamespace().getName();
    final TypeDef newTypeDef = AvroIDLFactory.eINSTANCE.createTypeDef();
    EnumType _createEnumType = AvroIDLFactory.eINSTANCE.createEnumType();
    final Procedure1<EnumType> _function = (EnumType it) -> {
      it.setName(schemaName);
      final Consumer<String> _function_1 = (String symbol) -> {
        it.getLiterals().add(symbol);
      };
      addEnumeration.getSymbols().forEach(_function_1);
    };
    EnumType _doubleArrow = ObjectExtensions.<EnumType>operator_doubleArrow(_createEnumType, _function);
    newTypeDef.setType(_doubleArrow);
    this.protocols.get(protocolName).getElements().add(addEnumeration.getIndex(), newTypeDef);
  }
  
  public void compile(final ChangeSchema changeSchema) {
    this.currentSchema = changeSchema.getSchema().getName();
    EObject _eContainer = changeSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    this.currentProtocol = ((AvroIDLFile) _eContainer_1).getName();
    EList<SchemaRule> _rules = changeSchema.getRules();
    for (final SchemaRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public Object compile(final SchemaRule schemaRule) {
    Object _switchResult = null;
    boolean _matched = false;
    if (schemaRule instanceof RemoveVariable) {
      _matched=true;
      _switchResult = Boolean.valueOf(this.compile(((RemoveVariable)schemaRule)));
    }
    if (!_matched) {
      if (schemaRule instanceof RenameVariable) {
        _matched=true;
        this.compile(((RenameVariable)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof AddVariable) {
        _matched=true;
        this.compile(((AddVariable)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof ChangeDefValue) {
        _matched=true;
        this.compile(((ChangeDefValue)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof ChangeType) {
        _matched=true;
        this.compile(((ChangeType)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof AddAnnotationToField) {
        _matched=true;
        _switchResult = Boolean.valueOf(this.execute(((AddAnnotationToField)schemaRule)));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof AddNameAnnotationToField) {
        _matched=true;
        _switchResult = Boolean.valueOf(this.compile(((AddNameAnnotationToField)schemaRule)));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof RemoveAnnotationFromField) {
        _matched=true;
        _switchResult = Boolean.valueOf(this.execute(((RemoveAnnotationFromField)schemaRule)));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof RemoveNameAnnotationFromField) {
        _matched=true;
        _switchResult = Boolean.valueOf(this.compile(((RemoveNameAnnotationFromField)schemaRule)));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof ArrayEditRules) {
        _matched=true;
        _switchResult = this.compile(((ArrayEditRules)schemaRule));
      }
    }
    return _switchResult;
  }
  
  public boolean compile(final RemoveVariable removeVariable) {
    boolean _xblockexpression = false;
    {
      final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
      final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, removeVariable.getVariable().getName());
      boolean _switchResult = false;
      boolean _matched = false;
      if (schema instanceof RecordType) {
        _matched=true;
        _switchResult = ((RecordType)schema).getFields().remove(field);
      }
      if (!_matched) {
        if (schema instanceof ErrorType) {
          _matched=true;
          _switchResult = ((ErrorType)schema).getFields().remove(field);
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public void compile(final RenameVariable renameVariable) {
    final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
    final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, renameVariable.getVariable().getName());
    field.setName(renameVariable.getNewVarName());
  }
  
  public void compile(final AddVariable addVariable) {
    final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
    boolean _matched = false;
    if (schema instanceof RecordType) {
      _matched=true;
      ((RecordType)schema).getFields().add(addVariable.getIndex(), this.createField(addVariable.getNewVar()));
    }
    if (!_matched) {
      if (schema instanceof ErrorType) {
        _matched=true;
        ((ErrorType)schema).getFields().add(addVariable.getIndex(), this.createField(addVariable.getNewVar()));
      }
    }
  }
  
  public avroclipse.avroIDL.Field createField(final Field field) {
    final EObject fieldType = field.getFieldType();
    avroclipse.avroIDL.Field newField = null;
    if ((fieldType instanceof PrimitiveTypeField)) {
      newField = this.compile(((PrimitiveTypeField)fieldType));
    } else {
      if ((fieldType instanceof CustomTypeField)) {
        newField = this.compile(((CustomTypeField)fieldType));
      } else {
        if ((fieldType instanceof ComplexTypeField)) {
          newField = this.compile(((ComplexTypeField)fieldType));
        }
      }
    }
    EList<Annotation> _annotations = field.getAnnotations();
    for (final Annotation annotation : _annotations) {
      newField.getAnnotations().add(this.createAnnotation(annotation));
    }
    return newField;
  }
  
  public avroclipse.avroIDL.Field compile(final PrimitiveTypeField primitiveTypeField) {
    avroclipse.avroIDL.Field _createField = AvroIDLFactory.eINSTANCE.createField();
    final Procedure1<avroclipse.avroIDL.Field> _function = (avroclipse.avroIDL.Field it) -> {
      it.setName(primitiveTypeField.getVarName());
      it.setType(this.compile(primitiveTypeField.getType()));
      Value _value = primitiveTypeField.getValue();
      boolean _tripleNotEquals = (_value != null);
      if (_tripleNotEquals) {
        it.setDefault(this.compile(primitiveTypeField.getValue()));
      }
    };
    avroclipse.avroIDL.Field newField = ObjectExtensions.<avroclipse.avroIDL.Field>operator_doubleArrow(_createField, _function);
    EList<Annotation> _nameAnnotations = primitiveTypeField.getNameAnnotations();
    for (final Annotation nameAnnotation : _nameAnnotations) {
      newField.getNameAnnotations().add(this.createAnnotation(nameAnnotation));
    }
    return newField;
  }
  
  public avroclipse.avroIDL.Field compile(final CustomTypeField customTypeField) {
    avroclipse.avroIDL.Field _createField = AvroIDLFactory.eINSTANCE.createField();
    final Procedure1<avroclipse.avroIDL.Field> _function = (avroclipse.avroIDL.Field it) -> {
      it.setName(customTypeField.getVarName());
      it.setType(this.compile(customTypeField.getType()));
    };
    avroclipse.avroIDL.Field newField = ObjectExtensions.<avroclipse.avroIDL.Field>operator_doubleArrow(_createField, _function);
    EList<Annotation> _nameAnnotations = customTypeField.getNameAnnotations();
    for (final Annotation nameAnnotation : _nameAnnotations) {
      newField.getNameAnnotations().add(this.createAnnotation(nameAnnotation));
    }
    return newField;
  }
  
  public avroclipse.avroIDL.Field compile(final ComplexTypeField complexTypeField) {
    avroclipse.avroIDL.Field newField = AvroIDLFactory.eINSTANCE.createField();
    ArrayTypeField fieldType = complexTypeField.getType();
    newField.setName(complexTypeField.getVarName());
    if ((fieldType instanceof ArrayTypeField)) {
      newField.setType(this.compile(fieldType));
    }
    Array _value = complexTypeField.getValue();
    boolean _tripleNotEquals = (_value != null);
    if (_tripleNotEquals) {
      newField.setDefault(this.compile(complexTypeField.getValue()));
    }
    return newField;
  }
  
  public ArrayFieldType compile(final ArrayTypeField arrayTypeField) {
    ArrayFieldType _createArrayFieldType = AvroIDLFactory.eINSTANCE.createArrayFieldType();
    final Procedure1<ArrayFieldType> _function = (ArrayFieldType it) -> {
      it.setType(this.compile(arrayTypeField.getType()));
    };
    ArrayFieldType type = ObjectExtensions.<ArrayFieldType>operator_doubleArrow(_createArrayFieldType, _function);
    return type;
  }
  
  public AnnotatedTypeLink compile(final AnnotatedTypes annotatedTypes) {
    AnnotatedTypeLink _createAnnotatedTypeLink = AvroIDLFactory.eINSTANCE.createAnnotatedTypeLink();
    final Procedure1<AnnotatedTypeLink> _function = (AnnotatedTypeLink it) -> {
      it.setType(this.compile(annotatedTypes.getType()));
    };
    AnnotatedTypeLink newAnnotatedTypeLink = ObjectExtensions.<AnnotatedTypeLink>operator_doubleArrow(_createAnnotatedTypeLink, _function);
    EList<Annotation> _annotataions = annotatedTypes.getAnnotataions();
    for (final Annotation annotation : _annotataions) {
      newAnnotatedTypeLink.getAnnotations().add(this.createAnnotation(annotation));
    }
    return newAnnotatedTypeLink;
  }
  
  public TypeLink compile(final Types types) {
    boolean _matched = false;
    if (types instanceof CustomType) {
      _matched=true;
      return this.compile(((CustomType)types));
    }
    if (!_matched) {
      if (types instanceof PrimitiveType) {
        _matched=true;
        return this.compile(((PrimitiveType)types));
      }
    }
    if (!_matched) {
      if (types instanceof ArrayTypeField) {
        _matched=true;
        Object _compile = this.compile(((ArrayTypeField)types));
        return ((ArrayFieldType) _compile);
      }
    }
    return null;
  }
  
  public CustomTypeLink compile(final CustomType customType) {
    CustomTypeLink _createCustomTypeLink = AvroIDLFactory.eINSTANCE.createCustomTypeLink();
    final Procedure1<CustomTypeLink> _function = (CustomTypeLink it) -> {
      it.setTarget(customType.getTarget());
    };
    CustomTypeLink type = ObjectExtensions.<CustomTypeLink>operator_doubleArrow(_createCustomTypeLink, _function);
    return type;
  }
  
  public PrimativeTypeLink compile(final PrimitiveType primitiveType) {
    PrimativeTypeLink _createPrimativeTypeLink = AvroIDLFactory.eINSTANCE.createPrimativeTypeLink();
    final Procedure1<PrimativeTypeLink> _function = (PrimativeTypeLink it) -> {
      it.setTarget(primitiveType.getTarget());
    };
    PrimativeTypeLink type = ObjectExtensions.<PrimativeTypeLink>operator_doubleArrow(_createPrimativeTypeLink, _function);
    return type;
  }
  
  public void compile(final ChangeDefValue changeDefValue) {
    final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
    final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, changeDefValue.getField().getName());
    field.setDefault(this.compile(changeDefValue.getNewVal()));
  }
  
  public void compile(final ChangeType changeType) {
    final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
    final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, changeType.getField().getName());
    PrimativeTypeLink _createPrimativeTypeLink = AvroIDLFactory.eINSTANCE.createPrimativeTypeLink();
    final Procedure1<PrimativeTypeLink> _function = (PrimativeTypeLink it) -> {
      it.setTarget(changeType.getNewType());
    };
    PrimativeTypeLink _doubleArrow = ObjectExtensions.<PrimativeTypeLink>operator_doubleArrow(_createPrimativeTypeLink, _function);
    field.setType(_doubleArrow);
  }
  
  public void compile(final ChangeEnum changeEnum) {
    this.currentSchema = changeEnum.getSchema().getName();
    EObject _eContainer = changeEnum.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    this.currentProtocol = ((AvroIDLFile) _eContainer_1).getName();
    EList<EnumRule> _rules = changeEnum.getRules();
    for (final EnumRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public void compile(final EnumRule enumRule) {
    boolean _matched = false;
    if (enumRule instanceof RemoveEnum) {
      _matched=true;
      this.compile(((RemoveEnum)enumRule));
    }
    if (!_matched) {
      if (enumRule instanceof RenameEnum) {
        _matched=true;
        this.compile(((RenameEnum)enumRule));
      }
    }
    if (!_matched) {
      if (enumRule instanceof AddEnum) {
        _matched=true;
        this.compile(((AddEnum)enumRule));
      }
    }
  }
  
  public void compile(final RemoveEnum removeEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((EnumType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          final Predicate<String> _function_1 = (String it) -> {
            return it.equals(removeEnum.getVarName());
          };
          ((EnumType) _type_2).getLiterals().removeIf(_function_1);
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final RenameEnum renameEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((EnumType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          Type _type_3 = typeDef.getType();
          ((EnumType) _type_2).getLiterals().set(
            ((EnumType) _type_3).getLiterals().indexOf(renameEnum.getOldName()), renameEnum.getNewEnumName());
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final AddEnum addEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        boolean _equals = typeDef.getType().getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_1 = typeDef.getType();
          ((EnumType) _type_1).getLiterals().add(addEnum.getIndex(), addEnum.getVarName());
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final AddAnnotationToSchema annotationToSchema) {
    final String schemaName = annotationToSchema.getSchema().getName();
    EObject _eContainer = annotationToSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
        if (_equals) {
          typeDef.getAnnotations().add(this.createAnnotation(annotationToSchema.getAnnotation()));
        }
      } else {
        Type _type_2 = typeDef.getType();
        if ((_type_2 instanceof EnumType)) {
          Type _type_3 = typeDef.getType();
          boolean _equals_1 = ((EnumType) _type_3).getName().equals(schemaName);
          if (_equals_1) {
            typeDef.getAnnotations().add(this.createAnnotation(annotationToSchema.getAnnotation()));
          }
        } else {
          Type _type_4 = typeDef.getType();
          if ((_type_4 instanceof ErrorType)) {
            Type _type_5 = typeDef.getType();
            boolean _equals_2 = ((ErrorType) _type_5).getName().equals(schemaName);
            if (_equals_2) {
              typeDef.getAnnotations().add(this.createAnnotation(annotationToSchema.getAnnotation()));
            }
          }
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final RemoveAnnotationFromSchema removeAnnotationFromSchema) {
    final String schemaName = removeAnnotationFromSchema.getSchema().getName();
    EObject _eContainer = removeAnnotationFromSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
        if (_equals) {
          HelperClass.removeAnnotationFromSchema(typeDef, removeAnnotationFromSchema.getAnnotationToRemove());
        }
      } else {
        Type _type_2 = typeDef.getType();
        if ((_type_2 instanceof EnumType)) {
          Type _type_3 = typeDef.getType();
          boolean _equals_1 = ((EnumType) _type_3).getName().equals(schemaName);
          if (_equals_1) {
            HelperClass.removeAnnotationFromSchema(typeDef, removeAnnotationFromSchema.getAnnotationToRemove());
          }
        } else {
          Type _type_4 = typeDef.getType();
          if ((_type_4 instanceof ErrorType)) {
            Type _type_5 = typeDef.getType();
            boolean _equals_2 = ((ErrorType) _type_5).getName().equals(schemaName);
            if (_equals_2) {
              HelperClass.removeAnnotationFromSchema(typeDef, removeAnnotationFromSchema.getAnnotationToRemove());
            }
          }
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
  }
  
  public boolean execute(final AddAnnotationToField addAnnotationToField) {
    boolean _xblockexpression = false;
    {
      final avroclipse.avroIDL.Field field = HelperClass.getField(this.currentProtocol, this.currentSchema, addAnnotationToField.getVariable().getName(), this.protocols);
      _xblockexpression = field.getAnnotations().add(this.createAnnotation(addAnnotationToField.getAnnotation()));
    }
    return _xblockexpression;
  }
  
  public boolean compile(final AddNameAnnotationToField addNameAnnotationToField) {
    boolean _xblockexpression = false;
    {
      final avroclipse.avroIDL.Field field = HelperClass.getField(this.currentProtocol, this.currentSchema, addNameAnnotationToField.getVariable().getName(), 
        this.protocols);
      _xblockexpression = field.getNameAnnotations().add(this.createAnnotation(addNameAnnotationToField.getAnnotation()));
    }
    return _xblockexpression;
  }
  
  public boolean execute(final RemoveAnnotationFromField removeAnnotationFromField) {
    boolean _xblockexpression = false;
    {
      final avroclipse.avroIDL.Field field = HelperClass.getField(this.currentProtocol, this.currentSchema, removeAnnotationFromField.getVariable().getName(), 
        this.protocols);
      _xblockexpression = HelperClass.removeAnnotationFromField(field, removeAnnotationFromField.getAnnotationToRemove());
    }
    return _xblockexpression;
  }
  
  public boolean compile(final RemoveNameAnnotationFromField removeNameAnnotationFromField) {
    boolean _xblockexpression = false;
    {
      final avroclipse.avroIDL.Field field = HelperClass.getField(this.currentProtocol, this.currentSchema, removeNameAnnotationFromField.getVariable().getName(), 
        this.protocols);
      _xblockexpression = HelperClass.removeNameAnnotationFromField(field, removeNameAnnotationFromField.getAnnotationToRemove());
    }
    return _xblockexpression;
  }
  
  public Values compile(final org.aedit.aedit.Values values) {
    final Values newAvroclipseValues = AvroIDLFactory.eINSTANCE.createValues();
    EList<EObject> _value = values.getValue();
    for (final EObject value : _value) {
      if ((value instanceof Array)) {
        Object _compile = this.compile(((Array)value));
        newAvroclipseValues.getValue().add(((avroclipse.avroIDL.Value) _compile));
      } else {
        if ((value instanceof Value)) {
          avroclipse.avroIDL.Value _compile_1 = this.compile(((Value)value));
          newAvroclipseValues.getValue().add(((avroclipse.avroIDL.Value) _compile_1));
        }
      }
    }
    return newAvroclipseValues;
  }
  
  public avroclipse.avroIDL.Array compile(final Array array) {
    avroclipse.avroIDL.Array newArray = AvroIDLFactory.eINSTANCE.createArray();
    Values _compile = this.compile(array.getValues());
    newArray.setValues(((Values) _compile));
    return newArray;
  }
  
  public avroclipse.avroIDL.Value compile(final Value value) {
    boolean _matched = false;
    if (value instanceof FloatValue) {
      _matched=true;
      return this.compile(((FloatValue)value));
    }
    if (!_matched) {
      if (value instanceof IntValue) {
        _matched=true;
        return this.compile(((IntValue)value));
      }
    }
    if (!_matched) {
      if (value instanceof StringValue) {
        _matched=true;
        return this.compile(((StringValue)value));
      }
    }
    if (!_matched) {
      if (value instanceof BooleanValue) {
        _matched=true;
        return this.compile(((BooleanValue)value));
      }
    }
    if (!_matched) {
      if (value instanceof Null) {
        _matched=true;
        return this.compile(((Null)value));
      }
    }
    return null;
  }
  
  public avroclipse.avroIDL.FloatValue compile(final FloatValue floatValue) {
    avroclipse.avroIDL.FloatValue _createFloatValue = AvroIDLFactory.eINSTANCE.createFloatValue();
    final Procedure1<avroclipse.avroIDL.FloatValue> _function = (avroclipse.avroIDL.FloatValue it) -> {
      it.setVal(floatValue.getVal());
    };
    final avroclipse.avroIDL.FloatValue newAvroclipseFloatVal = ObjectExtensions.<avroclipse.avroIDL.FloatValue>operator_doubleArrow(_createFloatValue, _function);
    return newAvroclipseFloatVal;
  }
  
  public avroclipse.avroIDL.IntValue compile(final IntValue intValue) {
    avroclipse.avroIDL.IntValue _createIntValue = AvroIDLFactory.eINSTANCE.createIntValue();
    final Procedure1<avroclipse.avroIDL.IntValue> _function = (avroclipse.avroIDL.IntValue it) -> {
      it.setVal(intValue.getVal());
    };
    final avroclipse.avroIDL.IntValue newAvroclipseIntVal = ObjectExtensions.<avroclipse.avroIDL.IntValue>operator_doubleArrow(_createIntValue, _function);
    return newAvroclipseIntVal;
  }
  
  public avroclipse.avroIDL.StringValue compile(final StringValue stringValue) {
    avroclipse.avroIDL.StringValue _createStringValue = AvroIDLFactory.eINSTANCE.createStringValue();
    final Procedure1<avroclipse.avroIDL.StringValue> _function = (avroclipse.avroIDL.StringValue it) -> {
      it.setVal(stringValue.getVal());
    };
    final avroclipse.avroIDL.StringValue newAvroclipseStringVal = ObjectExtensions.<avroclipse.avroIDL.StringValue>operator_doubleArrow(_createStringValue, _function);
    return newAvroclipseStringVal;
  }
  
  public avroclipse.avroIDL.BooleanValue compile(final BooleanValue booleanValue) {
    avroclipse.avroIDL.BooleanValue _createBooleanValue = AvroIDLFactory.eINSTANCE.createBooleanValue();
    final Procedure1<avroclipse.avroIDL.BooleanValue> _function = (avroclipse.avroIDL.BooleanValue it) -> {
      it.setVal(booleanValue.isVal());
    };
    final avroclipse.avroIDL.BooleanValue newAvroclipseBoolVal = ObjectExtensions.<avroclipse.avroIDL.BooleanValue>operator_doubleArrow(_createBooleanValue, _function);
    return newAvroclipseBoolVal;
  }
  
  public avroclipse.avroIDL.Null compile(final Null nullValue) {
    final avroclipse.avroIDL.Null newAvroclipseNullVal = AvroIDLFactory.eINSTANCE.createNull();
    return newAvroclipseNullVal;
  }
  
  public avroclipse.avroIDL.Annotation createAnnotation(final Annotation annotation) {
    avroclipse.avroIDL.Annotation _createAnnotation = AvroIDLFactory.eINSTANCE.createAnnotation();
    final Procedure1<avroclipse.avroIDL.Annotation> _function = (avroclipse.avroIDL.Annotation it) -> {
      it.setName(annotation.getName());
      Values _compile = this.compile(annotation.getValues());
      it.setValues(((Values) _compile));
    };
    final avroclipse.avroIDL.Annotation newAvroclipseAnnotation = ObjectExtensions.<avroclipse.avroIDL.Annotation>operator_doubleArrow(_createAnnotation, _function);
    return newAvroclipseAnnotation;
  }
  
  public Object compile(final ArrayEditRules arrayEditRules) {
    Object _switchResult = null;
    boolean _matched = false;
    if (arrayEditRules instanceof RemoveArrayValue) {
      _matched=true;
      _switchResult = Boolean.valueOf(this.compile(((RemoveArrayValue)arrayEditRules)));
    }
    if (!_matched) {
      if (arrayEditRules instanceof RemoveArrayValueAtIndex) {
        _matched=true;
        _switchResult = this.compile(((RemoveArrayValueAtIndex)arrayEditRules));
      }
    }
    if (!_matched) {
      if (arrayEditRules instanceof AddValueToArray) {
        _matched=true;
        _switchResult = Boolean.valueOf(this.compile(((AddValueToArray)arrayEditRules)));
      }
    }
    return _switchResult;
  }
  
  public boolean compile(final RemoveArrayValue removeArrayValue) {
    boolean _xblockexpression = false;
    {
      final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
      final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, removeArrayValue.getVariable().getName());
      avroclipse.avroIDL.Value _default = field.getDefault();
      final avroclipse.avroIDL.Array array = ((avroclipse.avroIDL.Array) _default);
      final ArrayList<avroclipse.avroIDL.Value> found = new ArrayList<avroclipse.avroIDL.Value>();
      EList<avroclipse.avroIDL.Value> _value = array.getValues().getValue();
      for (final avroclipse.avroIDL.Value value : _value) {
        {
          final Object arrayValue = HelperClass.getValue(value);
          final Object valueToRemove = HelperClass.getValue(this.compile(removeArrayValue.getValueToRemove()));
          boolean _equals = arrayValue.equals(valueToRemove);
          if (_equals) {
            found.add(value);
          }
        }
      }
      _xblockexpression = array.getValues().getValue().removeAll(found);
    }
    return _xblockexpression;
  }
  
  public avroclipse.avroIDL.Value compile(final RemoveArrayValueAtIndex removeArrayValueAtIndex) {
    avroclipse.avroIDL.Value _xblockexpression = null;
    {
      final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
      final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, removeArrayValueAtIndex.getArray().getName());
      avroclipse.avroIDL.Value _default = field.getDefault();
      final avroclipse.avroIDL.Array array = ((avroclipse.avroIDL.Array) _default);
      _xblockexpression = array.getValues().getValue().remove(removeArrayValueAtIndex.getIndex());
    }
    return _xblockexpression;
  }
  
  public boolean compile(final AddValueToArray addValueToArray) {
    boolean _xblockexpression = false;
    {
      final Type schema = HelperClass.getSchema(this.currentProtocol, this.currentSchema, this.protocols);
      final avroclipse.avroIDL.Field field = HelperClass.getFieldFromSchema(schema, addValueToArray.getArray().getName());
      avroclipse.avroIDL.Value _default = field.getDefault();
      final avroclipse.avroIDL.Array array = ((avroclipse.avroIDL.Array) _default);
      boolean _xifexpression = false;
      EObject _valueToAdd = addValueToArray.getValueToAdd();
      if ((_valueToAdd instanceof Array)) {
        boolean _xblockexpression_1 = false;
        {
          EObject _valueToAdd_1 = addValueToArray.getValueToAdd();
          final avroclipse.avroIDL.Array newArray = this.compile(((Array) _valueToAdd_1));
          _xblockexpression_1 = array.getValues().getValue().add(newArray);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        boolean _xifexpression_1 = false;
        EObject _valueToAdd_1 = addValueToArray.getValueToAdd();
        if ((_valueToAdd_1 instanceof Value)) {
          boolean _xblockexpression_2 = false;
          {
            EObject _valueToAdd_2 = addValueToArray.getValueToAdd();
            final avroclipse.avroIDL.Value newValue = this.compile(((Value) _valueToAdd_2));
            _xblockexpression_2 = array.getValues().getValue().add(newValue);
          }
          _xifexpression_1 = _xblockexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
