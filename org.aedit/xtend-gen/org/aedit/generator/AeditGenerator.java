/**
 * generated by Xtext 2.12.0
 */
package org.aedit.generator;

import HelperClass.HelperClass;
import com.google.common.collect.Iterables;
import java.io.File;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.aedit.aedit.Add;
import org.aedit.aedit.AddEnum;
import org.aedit.aedit.AddEnumeration;
import org.aedit.aedit.AddRecord;
import org.aedit.aedit.AddVariable;
import org.aedit.aedit.ChangeDefValue;
import org.aedit.aedit.ChangeEnum;
import org.aedit.aedit.ChangeSchema;
import org.aedit.aedit.ChangeType;
import org.aedit.aedit.EnumRule;
import org.aedit.aedit.Feature;
import org.aedit.aedit.FeatureMap;
import org.aedit.aedit.Field;
import org.aedit.aedit.FloatValue;
import org.aedit.aedit.GenericRule;
import org.aedit.aedit.IntValue;
import org.aedit.aedit.RemoveEnum;
import org.aedit.aedit.RemoveSchema;
import org.aedit.aedit.RemoveVariable;
import org.aedit.aedit.RenameEnum;
import org.aedit.aedit.RenameSchema;
import org.aedit.aedit.RenameVariable;
import org.aedit.aedit.RuleDeclaration;
import org.aedit.aedit.RuleMap;
import org.aedit.aedit.SchemaRule;
import org.aedit.aedit.Value;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.example.mydsl.myAvdl.AvroIDLFile;
import org.xtext.example.mydsl.myAvdl.EnumType;
import org.xtext.example.mydsl.myAvdl.MyAvdlFactory;
import org.xtext.example.mydsl.myAvdl.PrimativeTypeLink;
import org.xtext.example.mydsl.myAvdl.ProtocolElement;
import org.xtext.example.mydsl.myAvdl.RecordType;
import org.xtext.example.mydsl.myAvdl.StringValue;
import org.xtext.example.mydsl.myAvdl.Type;
import org.xtext.example.mydsl.myAvdl.TypeDef;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AeditGenerator extends AbstractGenerator {
  private Map<String, AvroIDLFile> protocols = new HashMap<String, AvroIDLFile>();
  
  private String filePath = "D:\\School\\runtime-EclipseXtext\\Testbench\\src\\avdl";
  
  private String currentProtocol;
  
  private String currentSchema;
  
  private int index;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.protocols = HelperClass.getAvroFiles(resource);
    boolean _isEmpty = IterableExtensions.isEmpty(Iterables.<FeatureMap>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FeatureMap.class));
    boolean _not = (!_isEmpty);
    if (_not) {
      Iterable<FeatureMap> _filter = Iterables.<FeatureMap>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FeatureMap.class);
      for (final FeatureMap e : _filter) {
        this.compile(e);
      }
      final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
        this.saveAvroIDLFile(
          URI.createURI((("platform:/resource/Testbench/src-gen/m2m-gen/GEN" + p1) + ".myavdl")), p2);
      };
      this.protocols.forEach(_function);
    }
  }
  
  public AvroIDLFile loadAvroIDLFile(final URI uri, final Resource resource) {
    final Resource res = resource.getResourceSet().getResource(uri, true);
    EObject _get = res.getContents().get(0);
    final AvroIDLFile originalAvroFile = ((AvroIDLFile) _get);
    final AvroIDLFile copyAvroFile = EcoreUtil2.<AvroIDLFile>copy(originalAvroFile);
    return copyAvroFile;
  }
  
  public void saveAvroIDLFile(final URI uri, final AvroIDLFile newModel) {
    try {
      Resource rs = new ResourceSetImpl().createResource(uri);
      rs.getContents().add(newModel);
      rs.save(null);
      this.myavdl2avdl();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void myavdl2avdl() {
    try {
      final String path = "D:\\School\\runtime-EclipseXtext\\Testbench\\src-gen\\m2m-gen\\";
      final File dir = new File(path);
      final File[] directoryListing = dir.listFiles();
      for (final File file : directoryListing) {
        {
          final String newFileName = file.getName().replace("myavdl", "avdl");
          final File newFile = new File(("D:\\School\\runtime-EclipseXtext\\Testbench\\src-gen\\avdl-gen\\" + newFileName));
          newFile.createNewFile();
          String _absolutePath = newFile.getAbsolutePath();
          final PrintWriter prw = new PrintWriter(_absolutePath);
          byte[] _readAllBytes = Files.readAllBytes(Paths.get(file.getPath()));
          String _string = new String(_readAllBytes);
          prw.println(_string);
          prw.close();
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void deleteDir(final File dir) {
    File[] _listFiles = dir.listFiles();
    for (final File file : _listFiles) {
      boolean _isDirectory = file.isDirectory();
      boolean _not = (!_isDirectory);
      if (_not) {
        file.delete();
      }
    }
  }
  
  public void compile(final FeatureMap featureMap) {
    this.compile(featureMap.getName());
  }
  
  public void compile(final Feature feature) {
    Feature _extend = feature.getExtend();
    boolean _tripleNotEquals = (_extend != null);
    if (_tripleNotEquals) {
      this.compile(feature.getExtend());
    }
    EList<RuleMap> _ruleMaps = feature.getRuleMaps();
    for (final RuleMap ruleMap : _ruleMaps) {
      this.compile(ruleMap);
    }
  }
  
  public void compile(final RuleMap ruleMap) {
    EList<RuleDeclaration> _rules = ruleMap.getRules();
    for (final RuleDeclaration ruleDeclaration : _rules) {
      this.compile(ruleDeclaration);
    }
  }
  
  public void compile(final RuleDeclaration ruleDeclaration) {
    EList<GenericRule> _rules = ruleDeclaration.getRules();
    for (final GenericRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public ProtocolElement compile(final GenericRule genRule) {
    ProtocolElement _switchResult = null;
    boolean _matched = false;
    if (genRule instanceof RenameSchema) {
      _matched=true;
      this.compile(((RenameSchema)genRule));
    }
    if (!_matched) {
      if (genRule instanceof RemoveSchema) {
        _matched=true;
        _switchResult = this.compile(((RemoveSchema)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof Add) {
        _matched=true;
        this.compile(((Add)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof ChangeSchema) {
        _matched=true;
        this.compile(((ChangeSchema)genRule));
      }
    }
    if (!_matched) {
      if (genRule instanceof ChangeEnum) {
        _matched=true;
        this.compile(((ChangeEnum)genRule));
      }
    }
    return _switchResult;
  }
  
  public void compile(final RenameSchema renameSchema) {
    final String schemaName = renameSchema.getSchema().getName();
    EObject _eContainer = renameSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          ((RecordType) _type_2).setName(renameSchema.getNewSchName());
        }
      } else {
        Type _type_3 = typeDef.getType();
        if ((_type_3 instanceof EnumType)) {
          Type _type_4 = typeDef.getType();
          boolean _equals_1 = ((EnumType) _type_4).getName().equals(schemaName);
          if (_equals_1) {
            Type _type_5 = typeDef.getType();
            ((EnumType) _type_5).setName(renameSchema.getNewSchName());
          }
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
  }
  
  public ProtocolElement compile(final RemoveSchema removeSchema) {
    ProtocolElement _xblockexpression = null;
    {
      final String schemaName = removeSchema.getSchema().getName();
      EObject _eContainer = removeSchema.getSchema().eContainer();
      TypeDef schemaContainer = ((TypeDef) _eContainer);
      EObject _eContainer_1 = schemaContainer.eContainer();
      final String protocolName = ((AvroIDLFile) _eContainer_1).getName();
      final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
        Type _type = typeDef.getType();
        if ((_type instanceof RecordType)) {
          Type _type_1 = typeDef.getType();
          boolean _equals = ((RecordType) _type_1).getName().equals(schemaName);
          if (_equals) {
            this.index = this.protocols.get(protocolName).getElements().indexOf(typeDef);
          }
        } else {
          Type _type_2 = typeDef.getType();
          if ((_type_2 instanceof EnumType)) {
            Type _type_3 = typeDef.getType();
            boolean _equals_1 = ((EnumType) _type_3).getName().equals(schemaName);
            if (_equals_1) {
              this.index = this.protocols.get(protocolName).getElements().indexOf(typeDef);
            }
          }
        }
      };
      Iterables.<TypeDef>filter(this.protocols.get(protocolName).getElements(), TypeDef.class).forEach(_function);
      _xblockexpression = this.protocols.get(protocolName).getElements().remove(this.index);
    }
    return _xblockexpression;
  }
  
  public void compile(final Add add) {
    boolean _matched = false;
    if (add instanceof AddRecord) {
      _matched=true;
      this.compile(((AddRecord)add));
    }
    if (!_matched) {
      if (add instanceof AddEnumeration) {
        _matched=true;
        this.compile(((AddEnumeration)add));
      }
    }
  }
  
  public void compile(final AddRecord addRecord) {
    final String schemaName = addRecord.getRecordName();
    final String protocolName = addRecord.getNamespace().getName();
    final TypeDef newTypeDef = MyAvdlFactory.eINSTANCE.createTypeDef();
    RecordType _createRecordType = MyAvdlFactory.eINSTANCE.createRecordType();
    final Procedure1<RecordType> _function = (RecordType it) -> {
      it.setName(schemaName);
      final Consumer<Field> _function_1 = (Field field) -> {
        it.getFields().add(HelperClass.createField(field));
      };
      addRecord.getFields().forEach(_function_1);
    };
    RecordType _doubleArrow = ObjectExtensions.<RecordType>operator_doubleArrow(_createRecordType, _function);
    newTypeDef.setType(_doubleArrow);
    this.protocols.get(protocolName).getElements().add(addRecord.getIndex(), newTypeDef);
  }
  
  public void compile(final AddEnumeration addEnumeration) {
    final String schemaName = addEnumeration.getEnumName();
    final String protocolName = addEnumeration.getNamespace().getName();
    final TypeDef newTypeDef = MyAvdlFactory.eINSTANCE.createTypeDef();
    EnumType _createEnumType = MyAvdlFactory.eINSTANCE.createEnumType();
    final Procedure1<EnumType> _function = (EnumType it) -> {
      it.setName(schemaName);
      final Consumer<String> _function_1 = (String symbol) -> {
        it.getLiterals().add(symbol);
      };
      addEnumeration.getSymbols().forEach(_function_1);
    };
    EnumType _doubleArrow = ObjectExtensions.<EnumType>operator_doubleArrow(_createEnumType, _function);
    newTypeDef.setType(_doubleArrow);
    this.protocols.get(protocolName).getElements().add(addEnumeration.getIndex(), newTypeDef);
  }
  
  public void compile(final ChangeSchema changeSchema) {
    this.currentSchema = changeSchema.getSchema().getName();
    EObject _eContainer = changeSchema.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    this.currentProtocol = ((AvroIDLFile) _eContainer_1).getName();
    EList<SchemaRule> _rules = changeSchema.getRules();
    for (final SchemaRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public void compile(final SchemaRule schemaRule) {
    boolean _matched = false;
    if (schemaRule instanceof RemoveVariable) {
      _matched=true;
      this.compile(((RemoveVariable)schemaRule));
    }
    if (!_matched) {
      if (schemaRule instanceof RenameVariable) {
        _matched=true;
        this.compile(((RenameVariable)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof AddVariable) {
        _matched=true;
        this.compile(((AddVariable)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof ChangeDefValue) {
        _matched=true;
        this.compile(((ChangeDefValue)schemaRule));
      }
    }
    if (!_matched) {
      if (schemaRule instanceof ChangeType) {
        _matched=true;
        this.compile(((ChangeType)schemaRule));
      }
    }
  }
  
  public void compile(final RemoveVariable removeVariable) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          final Predicate<org.xtext.example.mydsl.myAvdl.Field> _function_1 = (org.xtext.example.mydsl.myAvdl.Field it) -> {
            return it.getName().equals(removeVariable.getVariable().getName());
          };
          ((RecordType) _type_2).getFields().removeIf(_function_1);
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final RenameVariable renameVariable) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((RecordType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          final Function1<org.xtext.example.mydsl.myAvdl.Field, Boolean> _function_1 = (org.xtext.example.mydsl.myAvdl.Field it) -> {
            return Boolean.valueOf(it.getName().equals(renameVariable.getVariable().getName()));
          };
          final Consumer<org.xtext.example.mydsl.myAvdl.Field> _function_2 = (org.xtext.example.mydsl.myAvdl.Field field) -> {
            field.setName(renameVariable.getNewVarName());
          };
          IterableExtensions.<org.xtext.example.mydsl.myAvdl.Field>filter(((RecordType) _type_2).getFields(), _function_1).forEach(_function_2);
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final AddVariable addVariable) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof RecordType)) {
        boolean _equals = typeDef.getType().getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_1 = typeDef.getType();
          ((RecordType) _type_1).getFields().add(addVariable.getIndex(), HelperClass.createField(addVariable.getNewVar()));
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final ChangeDefValue changeDefValue) {
    final Function1<TypeDef, Boolean> _function = (TypeDef it) -> {
      Type _type = it.getType();
      return Boolean.valueOf((_type instanceof RecordType));
    };
    final Consumer<TypeDef> _function_1 = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      boolean _equals = ((RecordType) _type).getName().equals(this.currentSchema);
      if (_equals) {
        Type _type_1 = typeDef.getType();
        final Function1<org.xtext.example.mydsl.myAvdl.Field, Boolean> _function_2 = (org.xtext.example.mydsl.myAvdl.Field it) -> {
          return Boolean.valueOf(it.getName().equals(changeDefValue.getField().getName()));
        };
        final Consumer<org.xtext.example.mydsl.myAvdl.Field> _function_3 = (org.xtext.example.mydsl.myAvdl.Field field) -> {
          final Value newVal = changeDefValue.getNewVal();
          org.xtext.example.mydsl.myAvdl.Value newDefValue = null;
          boolean _matched = false;
          if ((newVal instanceof IntValue)) {
            _matched=true;
            org.xtext.example.mydsl.myAvdl.IntValue _createIntValue = MyAvdlFactory.eINSTANCE.createIntValue();
            final Procedure1<org.xtext.example.mydsl.myAvdl.IntValue> _function_4 = (org.xtext.example.mydsl.myAvdl.IntValue it) -> {
              it.setVal(((IntValue) newVal).getVal());
            };
            org.xtext.example.mydsl.myAvdl.IntValue _doubleArrow = ObjectExtensions.<org.xtext.example.mydsl.myAvdl.IntValue>operator_doubleArrow(_createIntValue, _function_4);
            newDefValue = _doubleArrow;
          }
          if (!_matched) {
            if ((newVal instanceof FloatValue)) {
              _matched=true;
              org.xtext.example.mydsl.myAvdl.FloatValue _createFloatValue = MyAvdlFactory.eINSTANCE.createFloatValue();
              final Procedure1<org.xtext.example.mydsl.myAvdl.FloatValue> _function_5 = (org.xtext.example.mydsl.myAvdl.FloatValue it) -> {
                it.setVal(((FloatValue) newVal).getVal());
              };
              org.xtext.example.mydsl.myAvdl.FloatValue _doubleArrow_1 = ObjectExtensions.<org.xtext.example.mydsl.myAvdl.FloatValue>operator_doubleArrow(_createFloatValue, _function_5);
              newDefValue = _doubleArrow_1;
            }
          }
          if (!_matched) {
            if ((newVal instanceof IntValue)) {
              _matched=true;
              org.xtext.example.mydsl.myAvdl.IntValue _createIntValue_1 = MyAvdlFactory.eINSTANCE.createIntValue();
              final Procedure1<org.xtext.example.mydsl.myAvdl.IntValue> _function_6 = (org.xtext.example.mydsl.myAvdl.IntValue it) -> {
                it.setVal(((IntValue) newVal).getVal());
              };
              org.xtext.example.mydsl.myAvdl.IntValue _doubleArrow_2 = ObjectExtensions.<org.xtext.example.mydsl.myAvdl.IntValue>operator_doubleArrow(_createIntValue_1, _function_6);
              newDefValue = _doubleArrow_2;
            }
          }
          if (!_matched) {
            StringValue _createStringValue = MyAvdlFactory.eINSTANCE.createStringValue();
            final Procedure1<StringValue> _function_7 = (StringValue it) -> {
              it.setVal(((org.aedit.aedit.StringValue) newVal).getVal());
            };
            StringValue _doubleArrow_3 = ObjectExtensions.<StringValue>operator_doubleArrow(_createStringValue, _function_7);
            newDefValue = _doubleArrow_3;
          }
          field.setDefault(newDefValue);
        };
        IterableExtensions.<org.xtext.example.mydsl.myAvdl.Field>filter(((RecordType) _type_1).getFields(), _function_2).forEach(_function_3);
      }
    };
    IterableExtensions.<TypeDef>filter(Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class), _function).forEach(_function_1);
  }
  
  public void compile(final ChangeType changeType) {
    final Function1<TypeDef, Boolean> _function = (TypeDef it) -> {
      Type _type = it.getType();
      return Boolean.valueOf((_type instanceof RecordType));
    };
    final Consumer<TypeDef> _function_1 = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      boolean _equals = ((RecordType) _type).getName().equals(this.currentSchema);
      if (_equals) {
        Type _type_1 = typeDef.getType();
        final Function1<org.xtext.example.mydsl.myAvdl.Field, Boolean> _function_2 = (org.xtext.example.mydsl.myAvdl.Field it) -> {
          return Boolean.valueOf(it.getName().equals(changeType.getField().getName()));
        };
        final Consumer<org.xtext.example.mydsl.myAvdl.Field> _function_3 = (org.xtext.example.mydsl.myAvdl.Field field) -> {
          PrimativeTypeLink _createPrimativeTypeLink = MyAvdlFactory.eINSTANCE.createPrimativeTypeLink();
          final Procedure1<PrimativeTypeLink> _function_4 = (PrimativeTypeLink it) -> {
            it.setTarget(changeType.getNewType());
          };
          PrimativeTypeLink _doubleArrow = ObjectExtensions.<PrimativeTypeLink>operator_doubleArrow(_createPrimativeTypeLink, _function_4);
          field.setType(_doubleArrow);
        };
        IterableExtensions.<org.xtext.example.mydsl.myAvdl.Field>filter(((RecordType) _type_1).getFields(), _function_2).forEach(_function_3);
      }
    };
    IterableExtensions.<TypeDef>filter(Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class), _function).forEach(_function_1);
  }
  
  public void compile(final ChangeEnum changeEnum) {
    this.currentSchema = changeEnum.getSchema().getName();
    EObject _eContainer = changeEnum.getSchema().eContainer();
    TypeDef schemaContainer = ((TypeDef) _eContainer);
    EObject _eContainer_1 = schemaContainer.eContainer();
    this.currentProtocol = ((AvroIDLFile) _eContainer_1).getName();
    EList<EnumRule> _rules = changeEnum.getRules();
    for (final EnumRule rule : _rules) {
      this.compile(rule);
    }
  }
  
  public void compile(final EnumRule enumRule) {
    boolean _matched = false;
    if (enumRule instanceof RemoveEnum) {
      _matched=true;
      this.compile(((RemoveEnum)enumRule));
    }
    if (!_matched) {
      if (enumRule instanceof RenameEnum) {
        _matched=true;
        this.compile(((RenameEnum)enumRule));
      }
    }
    if (!_matched) {
      if (enumRule instanceof AddEnum) {
        _matched=true;
        this.compile(((AddEnum)enumRule));
      }
    }
  }
  
  public void compile(final RemoveEnum removeEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((EnumType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          final Predicate<String> _function_1 = (String it) -> {
            return it.equals(removeEnum.getVarName());
          };
          ((EnumType) _type_2).getLiterals().removeIf(_function_1);
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final RenameEnum renameEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        Type _type_1 = typeDef.getType();
        boolean _equals = ((EnumType) _type_1).getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_2 = typeDef.getType();
          Type _type_3 = typeDef.getType();
          ((EnumType) _type_2).getLiterals().set(
            ((EnumType) _type_3).getLiterals().indexOf(renameEnum.getOldName()), renameEnum.getNewEnumName());
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
  
  public void compile(final AddEnum addEnum) {
    final Consumer<TypeDef> _function = (TypeDef typeDef) -> {
      Type _type = typeDef.getType();
      if ((_type instanceof EnumType)) {
        boolean _equals = typeDef.getType().getName().equals(this.currentSchema);
        if (_equals) {
          Type _type_1 = typeDef.getType();
          ((EnumType) _type_1).getLiterals().add(addEnum.getIndex(), addEnum.getVarName());
        }
      }
    };
    Iterables.<TypeDef>filter(this.protocols.get(this.currentProtocol).getElements(), TypeDef.class).forEach(_function);
  }
}
