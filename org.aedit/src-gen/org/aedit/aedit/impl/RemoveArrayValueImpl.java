/**
 * generated by Xtext 2.21.0
 */
package org.aedit.aedit.impl;

import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.RemoveArrayValue;
import org.aedit.aedit.Value;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Remove Array Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.aedit.aedit.impl.RemoveArrayValueImpl#getValueToRemove <em>Value To Remove</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RemoveArrayValueImpl extends ArrayEditRulesImpl implements RemoveArrayValue
{
  /**
   * The cached value of the '{@link #getValueToRemove() <em>Value To Remove</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueToRemove()
   * @generated
   * @ordered
   */
  protected Value valueToRemove;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RemoveArrayValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AeditPackage.Literals.REMOVE_ARRAY_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getValueToRemove()
  {
    return valueToRemove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueToRemove(Value newValueToRemove, NotificationChain msgs)
  {
    Value oldValueToRemove = valueToRemove;
    valueToRemove = newValueToRemove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE, oldValueToRemove, newValueToRemove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueToRemove(Value newValueToRemove)
  {
    if (newValueToRemove != valueToRemove)
    {
      NotificationChain msgs = null;
      if (valueToRemove != null)
        msgs = ((InternalEObject)valueToRemove).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE, null, msgs);
      if (newValueToRemove != null)
        msgs = ((InternalEObject)newValueToRemove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE, null, msgs);
      msgs = basicSetValueToRemove(newValueToRemove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE, newValueToRemove, newValueToRemove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE:
        return basicSetValueToRemove(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE:
        return getValueToRemove();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE:
        setValueToRemove((Value)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE:
        setValueToRemove((Value)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AeditPackage.REMOVE_ARRAY_VALUE__VALUE_TO_REMOVE:
        return valueToRemove != null;
    }
    return super.eIsSet(featureID);
  }

} //RemoveArrayValueImpl
