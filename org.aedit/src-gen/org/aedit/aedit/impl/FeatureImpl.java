/**
 * generated by Xtext 2.21.0
 */
package org.aedit.aedit.impl;

import java.util.Collection;

import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.Feature;
import org.aedit.aedit.RuleMap;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.aedit.aedit.impl.FeatureImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.aedit.aedit.impl.FeatureImpl#getExtend <em>Extend</em>}</li>
 *   <li>{@link org.aedit.aedit.impl.FeatureImpl#getRuleMaps <em>Rule Maps</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FeatureImpl extends MinimalEObjectImpl.Container implements Feature
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtend() <em>Extend</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtend()
   * @generated
   * @ordered
   */
  protected Feature extend;

  /**
   * The cached value of the '{@link #getRuleMaps() <em>Rule Maps</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleMaps()
   * @generated
   * @ordered
   */
  protected EList<RuleMap> ruleMaps;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AeditPackage.Literals.FEATURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AeditPackage.FEATURE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature getExtend()
  {
    if (extend != null && extend.eIsProxy())
    {
      InternalEObject oldExtend = (InternalEObject)extend;
      extend = (Feature)eResolveProxy(oldExtend);
      if (extend != oldExtend)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AeditPackage.FEATURE__EXTEND, oldExtend, extend));
      }
    }
    return extend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature basicGetExtend()
  {
    return extend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtend(Feature newExtend)
  {
    Feature oldExtend = extend;
    extend = newExtend;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AeditPackage.FEATURE__EXTEND, oldExtend, extend));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RuleMap> getRuleMaps()
  {
    if (ruleMaps == null)
    {
      ruleMaps = new EObjectResolvingEList<RuleMap>(RuleMap.class, this, AeditPackage.FEATURE__RULE_MAPS);
    }
    return ruleMaps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AeditPackage.FEATURE__NAME:
        return getName();
      case AeditPackage.FEATURE__EXTEND:
        if (resolve) return getExtend();
        return basicGetExtend();
      case AeditPackage.FEATURE__RULE_MAPS:
        return getRuleMaps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AeditPackage.FEATURE__NAME:
        setName((String)newValue);
        return;
      case AeditPackage.FEATURE__EXTEND:
        setExtend((Feature)newValue);
        return;
      case AeditPackage.FEATURE__RULE_MAPS:
        getRuleMaps().clear();
        getRuleMaps().addAll((Collection<? extends RuleMap>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AeditPackage.FEATURE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AeditPackage.FEATURE__EXTEND:
        setExtend((Feature)null);
        return;
      case AeditPackage.FEATURE__RULE_MAPS:
        getRuleMaps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AeditPackage.FEATURE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AeditPackage.FEATURE__EXTEND:
        return extend != null;
      case AeditPackage.FEATURE__RULE_MAPS:
        return ruleMaps != null && !ruleMaps.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //FeatureImpl
