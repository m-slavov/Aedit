/*
 * generated by Xtext 2.21.0
 */
package org.aedit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AeditGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRuleDeclarationsRuleDeclarationParserRuleCall_0_0 = (RuleCall)cRuleDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cRuleMapsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleMapsRuleMapParserRuleCall_1_0 = (RuleCall)cRuleMapsAssignment_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cFeatureMapsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureMapsFeatureMapParserRuleCall_3_0 = (RuleCall)cFeatureMapsAssignment_3.eContents().get(0);
		
		//Model:
		//	ruleDeclarations+=RuleDeclaration*
		//	ruleMaps+=RuleMap*
		//	features+=Feature*
		//	featureMaps+=FeatureMap*;
		@Override public ParserRule getRule() { return rule; }
		
		//ruleDeclarations+=RuleDeclaration* ruleMaps+=RuleMap* features+=Feature* featureMaps+=FeatureMap*
		public Group getGroup() { return cGroup; }
		
		//ruleDeclarations+=RuleDeclaration*
		public Assignment getRuleDeclarationsAssignment_0() { return cRuleDeclarationsAssignment_0; }
		
		//RuleDeclaration
		public RuleCall getRuleDeclarationsRuleDeclarationParserRuleCall_0_0() { return cRuleDeclarationsRuleDeclarationParserRuleCall_0_0; }
		
		//ruleMaps+=RuleMap*
		public Assignment getRuleMapsAssignment_1() { return cRuleMapsAssignment_1; }
		
		//RuleMap
		public RuleCall getRuleMapsRuleMapParserRuleCall_1_0() { return cRuleMapsRuleMapParserRuleCall_1_0; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_0() { return cFeaturesFeatureParserRuleCall_2_0; }
		
		//featureMaps+=FeatureMap*
		public Assignment getFeatureMapsAssignment_3() { return cFeatureMapsAssignment_3; }
		
		//FeatureMap
		public RuleCall getFeatureMapsFeatureMapParserRuleCall_3_0() { return cFeatureMapsFeatureMapParserRuleCall_3_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendFeatureCrossReference_2_1_0 = (CrossReference)cExtendAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendFeatureIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendFeatureCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleMapsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRuleMapsRuleMapCrossReference_4_0 = (CrossReference)cRuleMapsAssignment_4.eContents().get(0);
		private final RuleCall cRuleMapsRuleMapIDTerminalRuleCall_4_0_1 = (RuleCall)cRuleMapsRuleMapCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Feature:
		//	'feature' name=ID (':' extend=[Feature])? '{' ruleMaps+=[RuleMap]* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' name=ID (':' extend=[Feature])? '{' ruleMaps+=[RuleMap]* '}'
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' extend=[Feature])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//extend=[Feature]
		public Assignment getExtendAssignment_2_1() { return cExtendAssignment_2_1; }
		
		//[Feature]
		public CrossReference getExtendFeatureCrossReference_2_1_0() { return cExtendFeatureCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendFeatureIDTerminalRuleCall_2_1_0_1() { return cExtendFeatureIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ruleMaps+=[RuleMap]*
		public Assignment getRuleMapsAssignment_4() { return cRuleMapsAssignment_4; }
		
		//[RuleMap]
		public CrossReference getRuleMapsRuleMapCrossReference_4_0() { return cRuleMapsRuleMapCrossReference_4_0; }
		
		//ID
		public RuleCall getRuleMapsRuleMapIDTerminalRuleCall_4_0_1() { return cRuleMapsRuleMapIDTerminalRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FeatureMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.FeatureMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameFeatureCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cNameFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FeatureMap:
		//	'use' name=[Feature] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'use' name=[Feature] ';'
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//name=[Feature]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Feature]
		public CrossReference getNameFeatureCrossReference_1_0() { return cNameFeatureCrossReference_1_0; }
		
		//ID
		public RuleCall getNameFeatureIDTerminalRuleCall_1_0_1() { return cNameFeatureIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class RuleMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RuleMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRulesRuleDeclarationCrossReference_3_0 = (CrossReference)cRulesAssignment_3.eContents().get(0);
		private final RuleCall cRulesRuleDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cRulesRuleDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RuleMap:
		//	'ruleset' name=ID '{' rules+=[RuleDeclaration]* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ruleset' name=ID '{' rules+=[RuleDeclaration]* '}'
		public Group getGroup() { return cGroup; }
		
		//'ruleset'
		public Keyword getRulesetKeyword_0() { return cRulesetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rules+=[RuleDeclaration]*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//[RuleDeclaration]
		public CrossReference getRulesRuleDeclarationCrossReference_3_0() { return cRulesRuleDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getRulesRuleDeclarationIDTerminalRuleCall_3_0_1() { return cRulesRuleDeclarationIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesGenericRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RuleDeclaration:
		//	'rule' name=ID '{' rules+=GenericRule* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID '{' rules+=GenericRule* '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rules+=GenericRule*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//GenericRule
		public RuleCall getRulesGenericRuleParserRuleCall_3_0() { return cRulesGenericRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GenericRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.GenericRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRenameSchemaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveSchemaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChangeSchemaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChangeEnumParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAddAnnotationToSchemaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveAnnotationFromSchemaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//GenericRule:
		//	RenameSchema | RemoveSchema | Add | ChangeSchema | ChangeEnum | AddAnnotationToSchema | RemoveAnnotationFromSchema;
		@Override public ParserRule getRule() { return rule; }
		
		//RenameSchema | RemoveSchema | Add | ChangeSchema | ChangeEnum | AddAnnotationToSchema | RemoveAnnotationFromSchema
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RenameSchema
		public RuleCall getRenameSchemaParserRuleCall_0() { return cRenameSchemaParserRuleCall_0; }
		
		//RemoveSchema
		public RuleCall getRemoveSchemaParserRuleCall_1() { return cRemoveSchemaParserRuleCall_1; }
		
		//Add
		public RuleCall getAddParserRuleCall_2() { return cAddParserRuleCall_2; }
		
		//ChangeSchema
		public RuleCall getChangeSchemaParserRuleCall_3() { return cChangeSchemaParserRuleCall_3; }
		
		//ChangeEnum
		public RuleCall getChangeEnumParserRuleCall_4() { return cChangeEnumParserRuleCall_4; }
		
		//AddAnnotationToSchema
		public RuleCall getAddAnnotationToSchemaParserRuleCall_5() { return cAddAnnotationToSchemaParserRuleCall_5; }
		
		//RemoveAnnotationFromSchema
		public RuleCall getRemoveAnnotationFromSchemaParserRuleCall_6() { return cRemoveAnnotationFromSchemaParserRuleCall_6; }
	}
	public class SchemaRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.SchemaRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChangeDefValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChangeTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAddAnnotationToFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAddNameAnnotationToFieldParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRemoveAnnotationFromFieldParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRemoveNameAnnotationFromFieldParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cArrayEditRulesParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//SchemaRule:
		//	RemoveVariable | RenameVariable | AddVariable | ChangeDefValue | ChangeType | AddAnnotationToField |
		//	AddNameAnnotationToField | RemoveAnnotationFromField | RemoveNameAnnotationFromField | ArrayEditRules;
		@Override public ParserRule getRule() { return rule; }
		
		//RemoveVariable | RenameVariable | AddVariable | ChangeDefValue | ChangeType | AddAnnotationToField |
		//AddNameAnnotationToField | RemoveAnnotationFromField | RemoveNameAnnotationFromField | ArrayEditRules
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RemoveVariable
		public RuleCall getRemoveVariableParserRuleCall_0() { return cRemoveVariableParserRuleCall_0; }
		
		//RenameVariable
		public RuleCall getRenameVariableParserRuleCall_1() { return cRenameVariableParserRuleCall_1; }
		
		//AddVariable
		public RuleCall getAddVariableParserRuleCall_2() { return cAddVariableParserRuleCall_2; }
		
		//ChangeDefValue
		public RuleCall getChangeDefValueParserRuleCall_3() { return cChangeDefValueParserRuleCall_3; }
		
		//ChangeType
		public RuleCall getChangeTypeParserRuleCall_4() { return cChangeTypeParserRuleCall_4; }
		
		//AddAnnotationToField
		public RuleCall getAddAnnotationToFieldParserRuleCall_5() { return cAddAnnotationToFieldParserRuleCall_5; }
		
		//AddNameAnnotationToField
		public RuleCall getAddNameAnnotationToFieldParserRuleCall_6() { return cAddNameAnnotationToFieldParserRuleCall_6; }
		
		//RemoveAnnotationFromField
		public RuleCall getRemoveAnnotationFromFieldParserRuleCall_7() { return cRemoveAnnotationFromFieldParserRuleCall_7; }
		
		//RemoveNameAnnotationFromField
		public RuleCall getRemoveNameAnnotationFromFieldParserRuleCall_8() { return cRemoveNameAnnotationFromFieldParserRuleCall_8; }
		
		//ArrayEditRules
		public RuleCall getArrayEditRulesParserRuleCall_9() { return cArrayEditRulesParserRuleCall_9; }
	}
	public class ArrayEditRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ArrayEditRules");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveArrayValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveArrayValueAtIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddValueToArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArrayEditRules:
		//	RemoveArrayValue | RemoveArrayValueAtIndex | AddValueToArray;
		@Override public ParserRule getRule() { return rule; }
		
		//RemoveArrayValue | RemoveArrayValueAtIndex | AddValueToArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RemoveArrayValue
		public RuleCall getRemoveArrayValueParserRuleCall_0() { return cRemoveArrayValueParserRuleCall_0; }
		
		//RemoveArrayValueAtIndex
		public RuleCall getRemoveArrayValueAtIndexParserRuleCall_1() { return cRemoveArrayValueAtIndexParserRuleCall_1; }
		
		//AddValueToArray
		public RuleCall getAddValueToArrayParserRuleCall_2() { return cAddValueToArrayParserRuleCall_2; }
	}
	public class EnumRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.EnumRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddEnumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EnumRule:
		//	RemoveEnum | RenameEnum | AddEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//RemoveEnum | RenameEnum | AddEnum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RemoveEnum
		public RuleCall getRemoveEnumParserRuleCall_0() { return cRemoveEnumParserRuleCall_0; }
		
		//RenameEnum
		public RuleCall getRenameEnumParserRuleCall_1() { return cRenameEnumParserRuleCall_1; }
		
		//AddEnum
		public RuleCall getAddEnumParserRuleCall_2() { return cAddEnumParserRuleCall_2; }
	}
	public class AddAnnotationToSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddAnnotationToSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAnnotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0 = (RuleCall)cSchemaTypeAssignment_1.eContents().get(0);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AddAnnotationToSchema:
		//	'add.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotation=Annotation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotation=Annotation ';'
		public Group getGroup() { return cGroup; }
		
		//'add.annot'
		public Keyword getAddAnnotKeyword_0() { return cAddAnnotKeyword_0; }
		
		//schemaType=SCHEMA_TYPE
		public Assignment getSchemaTypeAssignment_1() { return cSchemaTypeAssignment_1; }
		
		//SCHEMA_TYPE
		public RuleCall getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0() { return cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0; }
		
		//schema=[avroIDL::Type|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::Type|QN]
		public CrossReference getSchemaTypeCrossReference_2_0() { return cSchemaTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaTypeQNParserRuleCall_2_0_1() { return cSchemaTypeQNParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//annotation=Annotation
		public Assignment getAnnotationAssignment_4() { return cAnnotationAssignment_4; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_4_0() { return cAnnotationAnnotationParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AddAnnotationToFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddAnnotationToField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAnnotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddAnnotationToField:
		//	'add.annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';'
		public Group getGroup() { return cGroup; }
		
		//'add.annot'
		public Keyword getAddAnnotKeyword_0() { return cAddAnnotKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//annotation=Annotation
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AddNameAnnotationToFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddNameAnnotationToField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddName_annotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddNameAnnotationToField:
		//	'add.name_annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.name_annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';'
		public Group getGroup() { return cGroup; }
		
		//'add.name_annot'
		public Keyword getAddName_annotKeyword_0() { return cAddName_annotKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//annotation=Annotation
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RemoveAnnotationFromSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveAnnotationFromSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveAnnotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0 = (RuleCall)cSchemaTypeAssignment_1.eContents().get(0);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationToRemoveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAnnotationToRemoveAnnotationCrossReference_4_0 = (CrossReference)cAnnotationToRemoveAssignment_4.eContents().get(0);
		private final RuleCall cAnnotationToRemoveAnnotationQNParserRuleCall_4_0_1 = (RuleCall)cAnnotationToRemoveAnnotationCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RemoveAnnotationFromSchema:
		//	'remove.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove.annot'
		public Keyword getRemoveAnnotKeyword_0() { return cRemoveAnnotKeyword_0; }
		
		//schemaType=SCHEMA_TYPE
		public Assignment getSchemaTypeAssignment_1() { return cSchemaTypeAssignment_1; }
		
		//SCHEMA_TYPE
		public RuleCall getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0() { return cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0; }
		
		//schema=[avroIDL::Type|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::Type|QN]
		public CrossReference getSchemaTypeCrossReference_2_0() { return cSchemaTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaTypeQNParserRuleCall_2_0_1() { return cSchemaTypeQNParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//annotationToRemove=[avroIDL::Annotation|QN]
		public Assignment getAnnotationToRemoveAssignment_4() { return cAnnotationToRemoveAssignment_4; }
		
		//[avroIDL::Annotation|QN]
		public CrossReference getAnnotationToRemoveAnnotationCrossReference_4_0() { return cAnnotationToRemoveAnnotationCrossReference_4_0; }
		
		//QN
		public RuleCall getAnnotationToRemoveAnnotationQNParserRuleCall_4_0_1() { return cAnnotationToRemoveAnnotationQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class RemoveAnnotationFromFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveAnnotationFromField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveAnnotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationToRemoveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAnnotationToRemoveAnnotationCrossReference_3_0 = (CrossReference)cAnnotationToRemoveAssignment_3.eContents().get(0);
		private final RuleCall cAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1 = (RuleCall)cAnnotationToRemoveAnnotationCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RemoveAnnotationFromField:
		//	'remove.annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove.annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove.annot'
		public Keyword getRemoveAnnotKeyword_0() { return cRemoveAnnotKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//annotationToRemove=[avroIDL::Annotation|QN]
		public Assignment getAnnotationToRemoveAssignment_3() { return cAnnotationToRemoveAssignment_3; }
		
		//[avroIDL::Annotation|QN]
		public CrossReference getAnnotationToRemoveAnnotationCrossReference_3_0() { return cAnnotationToRemoveAnnotationCrossReference_3_0; }
		
		//QN
		public RuleCall getAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1() { return cAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RemoveNameAnnotationFromFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveNameAnnotationFromField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveName_annotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationToRemoveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAnnotationToRemoveAnnotationCrossReference_3_0 = (CrossReference)cAnnotationToRemoveAssignment_3.eContents().get(0);
		private final RuleCall cAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1 = (RuleCall)cAnnotationToRemoveAnnotationCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RemoveNameAnnotationFromField:
		//	'remove.name_annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove.name_annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove.name_annot'
		public Keyword getRemoveName_annotKeyword_0() { return cRemoveName_annotKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//annotationToRemove=[avroIDL::Annotation|QN]
		public Assignment getAnnotationToRemoveAssignment_3() { return cAnnotationToRemoveAssignment_3; }
		
		//[avroIDL::Annotation|QN]
		public CrossReference getAnnotationToRemoveAnnotationCrossReference_3_0() { return cAnnotationToRemoveAnnotationCrossReference_3_0; }
		
		//QN
		public RuleCall getAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1() { return cAnnotationToRemoveAnnotationQNParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ChangeSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSchemaTypeAlternatives_1_0 = (Alternatives)cSchemaTypeAssignment_1.eContents().get(0);
		private final Keyword cSchemaTypeRecordKeyword_1_0_0 = (Keyword)cSchemaTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cSchemaTypeErrorKeyword_1_0_1 = (Keyword)cSchemaTypeAlternatives_1_0.eContents().get(1);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesSchemaRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChangeSchema:
		//	'change' schemaType=('record' | 'error') schema=[avroIDL::Type|QN] '{' rules+=SchemaRule* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'change' schemaType=('record' | 'error') schema=[avroIDL::Type|QN] '{' rules+=SchemaRule* '}'
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//schemaType=('record' | 'error')
		public Assignment getSchemaTypeAssignment_1() { return cSchemaTypeAssignment_1; }
		
		//('record' | 'error')
		public Alternatives getSchemaTypeAlternatives_1_0() { return cSchemaTypeAlternatives_1_0; }
		
		//'record'
		public Keyword getSchemaTypeRecordKeyword_1_0_0() { return cSchemaTypeRecordKeyword_1_0_0; }
		
		//'error'
		public Keyword getSchemaTypeErrorKeyword_1_0_1() { return cSchemaTypeErrorKeyword_1_0_1; }
		
		//schema=[avroIDL::Type|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::Type|QN]
		public CrossReference getSchemaTypeCrossReference_2_0() { return cSchemaTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaTypeQNParserRuleCall_2_0_1() { return cSchemaTypeQNParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//rules+=SchemaRule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//SchemaRule
		public RuleCall getRulesSchemaRuleParserRuleCall_4_0() { return cRulesSchemaRuleParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ChangeEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ChangeEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaEnumTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaEnumTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaEnumTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesEnumRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChangeEnum:
		//	'change' 'enum' schema=[avroIDL::EnumType|QN] '{' rules+=EnumRule* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'change' 'enum' schema=[avroIDL::EnumType|QN] '{' rules+=EnumRule* '}'
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//schema=[avroIDL::EnumType|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::EnumType|QN]
		public CrossReference getSchemaEnumTypeCrossReference_2_0() { return cSchemaEnumTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaEnumTypeQNParserRuleCall_2_0_1() { return cSchemaEnumTypeQNParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//rules+=EnumRule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//EnumRule
		public RuleCall getRulesEnumRuleParserRuleCall_4_0() { return cRulesEnumRuleParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Add");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddRecordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddErrorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Add:
		//	AddRecord | AddError | AddEnumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//AddRecord | AddError | AddEnumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddRecord
		public RuleCall getAddRecordParserRuleCall_0() { return cAddRecordParserRuleCall_0; }
		
		//AddError
		public RuleCall getAddErrorParserRuleCall_1() { return cAddErrorParserRuleCall_1; }
		
		//AddEnumeration
		public RuleCall getAddEnumerationParserRuleCall_2() { return cAddEnumerationParserRuleCall_2; }
	}
	public class AddRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecordAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecordAnnotationsAnnotationParserRuleCall_4_0 = (RuleCall)cRecordAnnotationsAssignment_4.eContents().get(0);
		private final Keyword cRecordKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNamespaceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cNamespaceAvroIDLFileCrossReference_6_0 = (CrossReference)cNamespaceAssignment_6.eContents().get(0);
		private final RuleCall cNamespaceAvroIDLFileIDTerminalRuleCall_6_0_1 = (RuleCall)cNamespaceAvroIDLFileCrossReference_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRecordNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRecordNameIDTerminalRuleCall_8_0 = (RuleCall)cRecordNameAssignment_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cFieldsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFieldsFieldParserRuleCall_10_0 = (RuleCall)cFieldsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//AddRecord:
		//	'add.at' '(' index=INT ')' recordAnnotations+=Annotation* 'record' namespace=[avroIDL::AvroIDLFile] '.' recordName=ID
		//	'{' fields+=Field* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.at' '(' index=INT ')' recordAnnotations+=Annotation* 'record' namespace=[avroIDL::AvroIDLFile] '.' recordName=ID
		//'{' fields+=Field* '}'
		public Group getGroup() { return cGroup; }
		
		//'add.at'
		public Keyword getAddAtKeyword_0() { return cAddAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//recordAnnotations+=Annotation*
		public Assignment getRecordAnnotationsAssignment_4() { return cRecordAnnotationsAssignment_4; }
		
		//Annotation
		public RuleCall getRecordAnnotationsAnnotationParserRuleCall_4_0() { return cRecordAnnotationsAnnotationParserRuleCall_4_0; }
		
		//'record'
		public Keyword getRecordKeyword_5() { return cRecordKeyword_5; }
		
		//namespace=[avroIDL::AvroIDLFile]
		public Assignment getNamespaceAssignment_6() { return cNamespaceAssignment_6; }
		
		//[avroIDL::AvroIDLFile]
		public CrossReference getNamespaceAvroIDLFileCrossReference_6_0() { return cNamespaceAvroIDLFileCrossReference_6_0; }
		
		//ID
		public RuleCall getNamespaceAvroIDLFileIDTerminalRuleCall_6_0_1() { return cNamespaceAvroIDLFileIDTerminalRuleCall_6_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
		
		//recordName=ID
		public Assignment getRecordNameAssignment_8() { return cRecordNameAssignment_8; }
		
		//ID
		public RuleCall getRecordNameIDTerminalRuleCall_8_0() { return cRecordNameIDTerminalRuleCall_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_10() { return cFieldsAssignment_10; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_10_0() { return cFieldsFieldParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class AddErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddError");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cErrorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNamespaceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNamespaceAvroIDLFileCrossReference_5_0 = (CrossReference)cNamespaceAssignment_5.eContents().get(0);
		private final RuleCall cNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1 = (RuleCall)cNamespaceAvroIDLFileCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cErrorNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cErrorNameIDTerminalRuleCall_7_0 = (RuleCall)cErrorNameAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFieldsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFieldsFieldParserRuleCall_9_0 = (RuleCall)cFieldsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AddError:
		//	'add.at' '(' index=INT ')' 'error' namespace=[avroIDL::AvroIDLFile] '.' errorName=ID '{' fields+=Field* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.at' '(' index=INT ')' 'error' namespace=[avroIDL::AvroIDLFile] '.' errorName=ID '{' fields+=Field* '}'
		public Group getGroup() { return cGroup; }
		
		//'add.at'
		public Keyword getAddAtKeyword_0() { return cAddAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'error'
		public Keyword getErrorKeyword_4() { return cErrorKeyword_4; }
		
		//namespace=[avroIDL::AvroIDLFile]
		public Assignment getNamespaceAssignment_5() { return cNamespaceAssignment_5; }
		
		//[avroIDL::AvroIDLFile]
		public CrossReference getNamespaceAvroIDLFileCrossReference_5_0() { return cNamespaceAvroIDLFileCrossReference_5_0; }
		
		//ID
		public RuleCall getNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1() { return cNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//errorName=ID
		public Assignment getErrorNameAssignment_7() { return cErrorNameAssignment_7; }
		
		//ID
		public RuleCall getErrorNameIDTerminalRuleCall_7_0() { return cErrorNameIDTerminalRuleCall_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_9() { return cFieldsAssignment_9; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_9_0() { return cFieldsFieldParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class AddEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEnumKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNamespaceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNamespaceAvroIDLFileCrossReference_5_0 = (CrossReference)cNamespaceAssignment_5.eContents().get(0);
		private final RuleCall cNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1 = (RuleCall)cNamespaceAvroIDLFileCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEnumNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEnumNameIDTerminalRuleCall_7_0 = (RuleCall)cEnumNameAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSymbolsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSymbolsIDTerminalRuleCall_9_0 = (RuleCall)cSymbolsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cSymbolsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cSymbolsIDTerminalRuleCall_10_1_0 = (RuleCall)cSymbolsAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//AddEnumeration:
		//	'add.at' '(' index=INT ')' 'enum' namespace=[avroIDL::AvroIDLFile] '.' enumName=ID '{' symbols+=ID (',' symbols+=ID)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.at' '(' index=INT ')' 'enum' namespace=[avroIDL::AvroIDLFile] '.' enumName=ID '{' symbols+=ID (',' symbols+=ID)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'add.at'
		public Keyword getAddAtKeyword_0() { return cAddAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'enum'
		public Keyword getEnumKeyword_4() { return cEnumKeyword_4; }
		
		//namespace=[avroIDL::AvroIDLFile]
		public Assignment getNamespaceAssignment_5() { return cNamespaceAssignment_5; }
		
		//[avroIDL::AvroIDLFile]
		public CrossReference getNamespaceAvroIDLFileCrossReference_5_0() { return cNamespaceAvroIDLFileCrossReference_5_0; }
		
		//ID
		public RuleCall getNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1() { return cNamespaceAvroIDLFileIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//enumName=ID
		public Assignment getEnumNameAssignment_7() { return cEnumNameAssignment_7; }
		
		//ID
		public RuleCall getEnumNameIDTerminalRuleCall_7_0() { return cEnumNameIDTerminalRuleCall_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//symbols+=ID
		public Assignment getSymbolsAssignment_9() { return cSymbolsAssignment_9; }
		
		//ID
		public RuleCall getSymbolsIDTerminalRuleCall_9_0() { return cSymbolsIDTerminalRuleCall_9_0; }
		
		//(',' symbols+=ID)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//symbols+=ID
		public Assignment getSymbolsAssignment_10_1() { return cSymbolsAssignment_10_1; }
		
		//ID
		public RuleCall getSymbolsIDTerminalRuleCall_10_1_0() { return cSymbolsIDTerminalRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class AddVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewVarFieldParserRuleCall_4_0 = (RuleCall)cNewVarAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AddVariable:
		//	'add.at' '(' index=INT ')' newVar=Field ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.at' '(' index=INT ')' newVar=Field ';'
		public Group getGroup() { return cGroup; }
		
		//'add.at'
		public Keyword getAddAtKeyword_0() { return cAddAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//newVar=Field
		public Assignment getNewVarAssignment_4() { return cNewVarAssignment_4; }
		
		//Field
		public RuleCall getNewVarFieldParserRuleCall_4_0() { return cNewVarFieldParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AddEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarNameIDTerminalRuleCall_4_0 = (RuleCall)cVarNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AddEnum:
		//	'add.at' '(' index=INT ')' varName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add.at' '(' index=INT ')' varName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'add.at'
		public Keyword getAddAtKeyword_0() { return cAddAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//varName=ID
		public Assignment getVarNameAssignment_4() { return cVarNameAssignment_4; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_4_0() { return cVarNameIDTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class RemoveSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0 = (RuleCall)cSchemaTypeAssignment_1.eContents().get(0);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RemoveSchema:
		//	'remove' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//schemaType=SCHEMA_TYPE
		public Assignment getSchemaTypeAssignment_1() { return cSchemaTypeAssignment_1; }
		
		//SCHEMA_TYPE
		public RuleCall getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0() { return cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0; }
		
		//schema=[avroIDL::Type|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::Type|QN]
		public CrossReference getSchemaTypeCrossReference_2_0() { return cSchemaTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaTypeQNParserRuleCall_2_0_1() { return cSchemaTypeQNParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RemoveVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RemoveVariable:
		//	'remove' variable=[avroIDL::Field|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' variable=[avroIDL::Field|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class RemoveEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RemoveEnum:
		//	'remove' varName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' varName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class RenameSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RenameSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0 = (RuleCall)cSchemaTypeAssignment_1.eContents().get(0);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaTypeCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaTypeQNParserRuleCall_2_0_1 = (RuleCall)cSchemaTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewSchNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewSchNameIDTerminalRuleCall_4_0 = (RuleCall)cNewSchNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RenameSchema:
		//	'rename' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' newSchName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'rename' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' newSchName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'rename'
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//schemaType=SCHEMA_TYPE
		public Assignment getSchemaTypeAssignment_1() { return cSchemaTypeAssignment_1; }
		
		//SCHEMA_TYPE
		public RuleCall getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0() { return cSchemaTypeSCHEMA_TYPEParserRuleCall_1_0; }
		
		//schema=[avroIDL::Type|QN]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[avroIDL::Type|QN]
		public CrossReference getSchemaTypeCrossReference_2_0() { return cSchemaTypeCrossReference_2_0; }
		
		//QN
		public RuleCall getSchemaTypeQNParserRuleCall_2_0_1() { return cSchemaTypeQNParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//newSchName=ID
		public Assignment getNewSchNameAssignment_4() { return cNewSchNameAssignment_4; }
		
		//ID
		public RuleCall getNewSchNameIDTerminalRuleCall_4_0() { return cNewSchNameIDTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class RenameVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RenameVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewVarNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewVarNameIDTerminalRuleCall_3_0 = (RuleCall)cNewVarNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RenameVariable:
		//	'rename' variable=[avroIDL::Field|QN] '=>' newVarName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'rename' variable=[avroIDL::Field|QN] '=>' newVarName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'rename'
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//newVarName=ID
		public Assignment getNewVarNameAssignment_3() { return cNewVarNameAssignment_3; }
		
		//ID
		public RuleCall getNewVarNameIDTerminalRuleCall_3_0() { return cNewVarNameIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RenameEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RenameEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOldNameIDTerminalRuleCall_1_0 = (RuleCall)cOldNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewEnumNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewEnumNameIDTerminalRuleCall_3_0 = (RuleCall)cNewEnumNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RenameEnum:
		//	'rename' oldName=ID '=>' newEnumName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'rename' oldName=ID '=>' newEnumName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'rename'
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//oldName=ID
		public Assignment getOldNameAssignment_1() { return cOldNameAssignment_1; }
		
		//ID
		public RuleCall getOldNameIDTerminalRuleCall_1_0() { return cOldNameIDTerminalRuleCall_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//newEnumName=ID
		public Assignment getNewEnumNameAssignment_3() { return cNewEnumNameAssignment_3; }
		
		//ID
		public RuleCall getNewEnumNameIDTerminalRuleCall_3_0() { return cNewEnumNameIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeDefValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ChangeDefValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_valKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQNParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewValValueParserRuleCall_3_0 = (RuleCall)cNewValAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeDefValue:
		//	'set_val' field=[avroIDL::Field|QN] '=>' newVal=Value ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'set_val' field=[avroIDL::Field|QN] '=>' newVal=Value ';'
		public Group getGroup() { return cGroup; }
		
		//'set_val'
		public Keyword getSet_valKeyword_0() { return cSet_valKeyword_0; }
		
		//field=[avroIDL::Field|QN]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getFieldFieldQNParserRuleCall_1_0_1() { return cFieldFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//newVal=Value
		public Assignment getNewValAssignment_3() { return cNewValAssignment_3; }
		
		//Value
		public RuleCall getNewValValueParserRuleCall_3_0() { return cNewValValueParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_typeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQNParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewTypeVARIABLE_TYPEParserRuleCall_3_0 = (RuleCall)cNewTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeType:
		//	'set_type' field=[avroIDL::Field|QN] '=>' newType=VARIABLE_TYPE ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'set_type' field=[avroIDL::Field|QN] '=>' newType=VARIABLE_TYPE ';'
		public Group getGroup() { return cGroup; }
		
		//'set_type'
		public Keyword getSet_typeKeyword_0() { return cSet_typeKeyword_0; }
		
		//field=[avroIDL::Field|QN]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getFieldFieldQNParserRuleCall_1_0_1() { return cFieldFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//newType=VARIABLE_TYPE
		public Assignment getNewTypeAssignment_3() { return cNewTypeAssignment_3; }
		
		//VARIABLE_TYPE
		public RuleCall getNewTypeVARIABLE_TYPEParserRuleCall_3_0() { return cNewTypeVARIABLE_TYPEParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RemoveArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemove_valueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFieldCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFieldQNParserRuleCall_1_0_1 = (RuleCall)cVariableFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueToRemoveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueToRemoveValueParserRuleCall_3_0 = (RuleCall)cValueToRemoveAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RemoveArrayValue:
		//	'remove_value' variable=[avroIDL::Field|QN] '=>' valueToRemove=Value ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove_value' variable=[avroIDL::Field|QN] '=>' valueToRemove=Value ';'
		public Group getGroup() { return cGroup; }
		
		//'remove_value'
		public Keyword getRemove_valueKeyword_0() { return cRemove_valueKeyword_0; }
		
		//variable=[avroIDL::Field|QN]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[avroIDL::Field|QN]
		public CrossReference getVariableFieldCrossReference_1_0() { return cVariableFieldCrossReference_1_0; }
		
		//QN
		public RuleCall getVariableFieldQNParserRuleCall_1_0_1() { return cVariableFieldQNParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//valueToRemove=Value
		public Assignment getValueToRemoveAssignment_3() { return cValueToRemoveAssignment_3; }
		
		//Value
		public RuleCall getValueToRemoveValueParserRuleCall_3_0() { return cValueToRemoveValueParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RemoveArrayValueAtIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.RemoveArrayValueAtIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemove_valueAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cArrayFieldCrossReference_4_0 = (CrossReference)cArrayAssignment_4.eContents().get(0);
		private final RuleCall cArrayFieldQNParserRuleCall_4_0_1 = (RuleCall)cArrayFieldCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RemoveArrayValueAtIndex:
		//	'remove_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'remove_value.at'
		public Keyword getRemove_valueAtKeyword_0() { return cRemove_valueAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//array=[avroIDL::Field|QN]
		public Assignment getArrayAssignment_4() { return cArrayAssignment_4; }
		
		//[avroIDL::Field|QN]
		public CrossReference getArrayFieldCrossReference_4_0() { return cArrayFieldCrossReference_4_0; }
		
		//QN
		public RuleCall getArrayFieldQNParserRuleCall_4_0_1() { return cArrayFieldQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AddValueToArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AddValueToArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdd_valueAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cArrayFieldCrossReference_4_0 = (CrossReference)cArrayAssignment_4.eContents().get(0);
		private final RuleCall cArrayFieldQNParserRuleCall_4_0_1 = (RuleCall)cArrayFieldCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueToAddAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cValueToAddAlternatives_6_0 = (Alternatives)cValueToAddAssignment_6.eContents().get(0);
		private final RuleCall cValueToAddArrayParserRuleCall_6_0_0 = (RuleCall)cValueToAddAlternatives_6_0.eContents().get(0);
		private final RuleCall cValueToAddValueParserRuleCall_6_0_1 = (RuleCall)cValueToAddAlternatives_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AddValueToArray:
		//	'add_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] '=>' valueToAdd=(Array | Value) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'add_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] '=>' valueToAdd=(Array | Value) ';'
		public Group getGroup() { return cGroup; }
		
		//'add_value.at'
		public Keyword getAdd_valueAtKeyword_0() { return cAdd_valueAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//array=[avroIDL::Field|QN]
		public Assignment getArrayAssignment_4() { return cArrayAssignment_4; }
		
		//[avroIDL::Field|QN]
		public CrossReference getArrayFieldCrossReference_4_0() { return cArrayFieldCrossReference_4_0; }
		
		//QN
		public RuleCall getArrayFieldQNParserRuleCall_4_0_1() { return cArrayFieldQNParserRuleCall_4_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
		
		//valueToAdd=(Array | Value)
		public Assignment getValueToAddAssignment_6() { return cValueToAddAssignment_6; }
		
		//(Array | Value)
		public Alternatives getValueToAddAlternatives_6_0() { return cValueToAddAlternatives_6_0; }
		
		//Array
		public RuleCall getValueToAddArrayParserRuleCall_6_0_0() { return cValueToAddArrayParserRuleCall_6_0_0; }
		
		//Value
		public RuleCall getValueToAddValueParserRuleCall_6_0_1() { return cValueToAddValueParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFieldTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFieldTypeAlternatives_1_0 = (Alternatives)cFieldTypeAssignment_1.eContents().get(0);
		private final RuleCall cFieldTypePrimitiveTypeFieldParserRuleCall_1_0_0 = (RuleCall)cFieldTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cFieldTypeCustomTypeFieldParserRuleCall_1_0_1 = (RuleCall)cFieldTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cFieldTypeComplexTypeFieldParserRuleCall_1_0_2 = (RuleCall)cFieldTypeAlternatives_1_0.eContents().get(2);
		
		//Field:
		//	annotations+=Annotation* fieldType=(PrimitiveTypeField | CustomTypeField | ComplexTypeField);
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* fieldType=(PrimitiveTypeField | CustomTypeField | ComplexTypeField)
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//fieldType=(PrimitiveTypeField | CustomTypeField | ComplexTypeField)
		public Assignment getFieldTypeAssignment_1() { return cFieldTypeAssignment_1; }
		
		//(PrimitiveTypeField | CustomTypeField | ComplexTypeField)
		public Alternatives getFieldTypeAlternatives_1_0() { return cFieldTypeAlternatives_1_0; }
		
		//PrimitiveTypeField
		public RuleCall getFieldTypePrimitiveTypeFieldParserRuleCall_1_0_0() { return cFieldTypePrimitiveTypeFieldParserRuleCall_1_0_0; }
		
		//CustomTypeField
		public RuleCall getFieldTypeCustomTypeFieldParserRuleCall_1_0_1() { return cFieldTypeCustomTypeFieldParserRuleCall_1_0_1; }
		
		//ComplexTypeField
		public RuleCall getFieldTypeComplexTypeFieldParserRuleCall_1_0_2() { return cFieldTypeComplexTypeFieldParserRuleCall_1_0_2; }
	}
	public class CustomTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.CustomTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeCustomTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cNameAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CustomTypeField:
		//	type=CustomType nameAnnotations+=Annotation* varName=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=CustomType nameAnnotations+=Annotation* varName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=CustomType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//CustomType
		public RuleCall getTypeCustomTypeParserRuleCall_0_0() { return cTypeCustomTypeParserRuleCall_0_0; }
		
		//nameAnnotations+=Annotation*
		public Assignment getNameAnnotationsAssignment_1() { return cNameAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getNameAnnotationsAnnotationParserRuleCall_1_0() { return cNameAnnotationsAnnotationParserRuleCall_1_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_2_0() { return cVarNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PrimitiveTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.PrimitiveTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cNameAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//PrimitiveTypeField:
		//	type=PrimitiveType nameAnnotations+=Annotation* varName=ID ('=' value=Value)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=PrimitiveType nameAnnotations+=Annotation* varName=ID ('=' value=Value)?
		public Group getGroup() { return cGroup; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_0_0() { return cTypePrimitiveTypeParserRuleCall_0_0; }
		
		//nameAnnotations+=Annotation*
		public Assignment getNameAnnotationsAssignment_1() { return cNameAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getNameAnnotationsAnnotationParserRuleCall_1_0() { return cNameAnnotationsAnnotationParserRuleCall_1_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_2_0() { return cVarNameIDTerminalRuleCall_2_0; }
		
		//('=' value=Value)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=Value
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_1_0() { return cValueValueParserRuleCall_3_1_0; }
	}
	public class ComplexTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ComplexTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeArrayTypeFieldParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cNameAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueArrayParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//ComplexTypeField:
		//	type=ArrayTypeField nameAnnotations+=Annotation* varName=ID ('=' value=Array)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ArrayTypeField nameAnnotations+=Annotation* varName=ID ('=' value=Array)?
		public Group getGroup() { return cGroup; }
		
		//type=ArrayTypeField
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ArrayTypeField
		public RuleCall getTypeArrayTypeFieldParserRuleCall_0_0() { return cTypeArrayTypeFieldParserRuleCall_0_0; }
		
		//nameAnnotations+=Annotation*
		public Assignment getNameAnnotationsAssignment_1() { return cNameAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getNameAnnotationsAnnotationParserRuleCall_1_0() { return cNameAnnotationsAnnotationParserRuleCall_1_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_2_0() { return cVarNameIDTerminalRuleCall_2_0; }
		
		//('=' value=Array)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=Array
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Array
		public RuleCall getValueArrayParserRuleCall_3_1_0() { return cValueArrayParserRuleCall_3_1_0; }
	}
	public class ArrayTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.ArrayTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAnnotatedTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayTypeField:
		//	'array' '<' type=AnnotatedTypes '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'array' '<' type=AnnotatedTypes '>'
		public Group getGroup() { return cGroup; }
		
		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=AnnotatedTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AnnotatedTypes
		public RuleCall getTypeAnnotatedTypesParserRuleCall_2_0() { return cTypeAnnotatedTypesParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class AnnotatedTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AnnotatedTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotataionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotataionsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotataionsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypesParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AnnotatedTypes:
		//	annotataions+=Annotation* type=Types;
		@Override public ParserRule getRule() { return rule; }
		
		//annotataions+=Annotation* type=Types
		public Group getGroup() { return cGroup; }
		
		//annotataions+=Annotation*
		public Assignment getAnnotataionsAssignment_0() { return cAnnotataionsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotataionsAnnotationParserRuleCall_0_0() { return cAnnotataionsAnnotationParserRuleCall_0_0; }
		
		//type=Types
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Types
		public RuleCall getTypeTypesParserRuleCall_1_0() { return cTypeTypesParserRuleCall_1_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCustomTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayTypeFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Types:
		//	CustomType | PrimitiveType | ArrayTypeField;
		@Override public ParserRule getRule() { return rule; }
		
		//CustomType | PrimitiveType | ArrayTypeField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CustomType
		public RuleCall getCustomTypeParserRuleCall_0() { return cCustomTypeParserRuleCall_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_1() { return cPrimitiveTypeParserRuleCall_1; }
		
		//ArrayTypeField
		public RuleCall getArrayTypeFieldParserRuleCall_2() { return cArrayTypeFieldParserRuleCall_2; }
	}
	public class CustomTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.CustomType");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetTypeCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetTypeQNParserRuleCall_0_1 = (RuleCall)cTargetTypeCrossReference_0.eContents().get(1);
		
		//CustomType:
		//	target=[avroIDL::Type|QN];
		@Override public ParserRule getRule() { return rule; }
		
		//target=[avroIDL::Type|QN]
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//[avroIDL::Type|QN]
		public CrossReference getTargetTypeCrossReference_0() { return cTargetTypeCrossReference_0; }
		
		//QN
		public RuleCall getTargetTypeQNParserRuleCall_0_1() { return cTargetTypeQNParserRuleCall_0_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.PrimitiveType");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetVARIABLE_TYPEParserRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//PrimitiveType:
		//	target=VARIABLE_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//target=VARIABLE_TYPE
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//VARIABLE_TYPE
		public RuleCall getTargetVARIABLE_TYPEParserRuleCall_0() { return cTargetVARIABLE_TYPEParserRuleCall_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//	name=AN ('(' values=Values ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=AN ('(' values=Values ')')?
		public Group getGroup() { return cGroup; }
		
		//name=AN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//AN
		public RuleCall getNameANParserRuleCall_0_0() { return cNameANParserRuleCall_0_0; }
		
		//('(' values=Values ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//values=Values
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//Values
		public RuleCall getValuesValuesParserRuleCall_1_1_0() { return cValuesValuesParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Values");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueArrayParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1_1.eContents().get(0);
		
		//Values:
		//	{Values} (value+=Array | value+=Value (',' value+=Value)*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Values} (value+=Array | value+=Value (',' value+=Value)*)*
		public Group getGroup() { return cGroup; }
		
		//{Values}
		public Action getValuesAction_0() { return cValuesAction_0; }
		
		//(value+=Array | value+=Value (',' value+=Value)*)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value+=Array
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//Array
		public RuleCall getValueArrayParserRuleCall_1_0_0() { return cValueArrayParserRuleCall_1_0_0; }
		
		//value+=Value (',' value+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//value+=Value
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_1_0_0() { return cValueValueParserRuleCall_1_1_0_0; }
		
		//(',' value+=Value)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//value+=Value
		public Assignment getValueAssignment_1_1_1_1() { return cValueAssignment_1_1_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_1_1_1_0() { return cValueValueParserRuleCall_1_1_1_1_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Array:
		//	=> '[' values=Values ']';
		@Override public ParserRule getRule() { return rule; }
		
		//=> '[' values=Values ']'
		public Group getGroup() { return cGroup; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values=Values
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//Values
		public RuleCall getValuesValuesParserRuleCall_1_0() { return cValuesValuesParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//	FloatValue | IntValue | StringValue | BooleanValue | Null;
		@Override public ParserRule getRule() { return rule; }
		
		//FloatValue | IntValue | StringValue | BooleanValue | Null
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_0() { return cFloatValueParserRuleCall_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }
		
		//Null
		public RuleCall getNullParserRuleCall_4() { return cNullParserRuleCall_4; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.FloatValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValRealParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FloatValue:
		//	val=Real;
		@Override public ParserRule getRule() { return rule; }
		
		//val=Real
		public Assignment getValAssignment() { return cValAssignment; }
		
		//Real
		public RuleCall getValRealParserRuleCall_0() { return cValRealParserRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.StringValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringValue:
		//	val=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//val=ID
		public Assignment getValAssignment() { return cValAssignment; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_0() { return cValIDTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.IntValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAlternatives_0.eContents().get(0);
		private final RuleCall cValNegativeIntParserRuleCall_0_1 = (RuleCall)cValAlternatives_0.eContents().get(1);
		
		//IntValue:
		//	val=(INT | NegativeInt);
		@Override public ParserRule getRule() { return rule; }
		
		//val=(INT | NegativeInt)
		public Assignment getValAssignment() { return cValAssignment; }
		
		//(INT | NegativeInt)
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }
		
		//NegativeInt
		public RuleCall getValNegativeIntParserRuleCall_0_1() { return cValNegativeIntParserRuleCall_0_1; }
	}
	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Null");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNullKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//Null:
		//	val='null';
		@Override public ParserRule getRule() { return rule; }
		
		//val='null'
		public Assignment getValAssignment() { return cValAssignment; }
		
		//'null'
		public Keyword getValNullKeyword_0() { return cValNullKeyword_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.BooleanValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBooleanParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//BooleanValue:
		//	val=Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//val=Boolean
		public Assignment getValAssignment() { return cValAssignment; }
		
		//Boolean
		public RuleCall getValBooleanParserRuleCall_0() { return cValBooleanParserRuleCall_0; }
	}
	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Real ecore::EFloat:
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NegativeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.NegativeInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NegativeInt ecore::EInt:
		//	'-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' INT
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SCHEMA_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.SCHEMA_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cErrorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SCHEMA_TYPE:
		//	'record' |
		//	'error' |
		//	'enum';
		@Override public ParserRule getRule() { return rule; }
		
		//'record' | 'error' | 'enum'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'record'
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }
		
		//'error'
		public Keyword getErrorKeyword_1() { return cErrorKeyword_1; }
		
		//'enum'
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }
	}
	public class VARIABLE_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.VARIABLE_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBooleanKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//VARIABLE_TYPE:
		//	'int' |
		//	'double' |
		//	'string' |
		//	'long' |
		//	'boolean' |
		//	'float';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'double' | 'string' | 'long' | 'boolean' | 'float'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
		
		//'string'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
		
		//'long'
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }
		
		//'boolean'
		public Keyword getBooleanKeyword_4() { return cBooleanKeyword_4; }
		
		//'float'
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }
	}
	public class QNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.QN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.aedit.Aedit.AN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//AN:
		//	'@' ID ('-' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' ID ('-' ID)*
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('-' ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final FeatureElements pFeature;
	private final FeatureMapElements pFeatureMap;
	private final RuleMapElements pRuleMap;
	private final RuleDeclarationElements pRuleDeclaration;
	private final GenericRuleElements pGenericRule;
	private final SchemaRuleElements pSchemaRule;
	private final ArrayEditRulesElements pArrayEditRules;
	private final EnumRuleElements pEnumRule;
	private final AddAnnotationToSchemaElements pAddAnnotationToSchema;
	private final AddAnnotationToFieldElements pAddAnnotationToField;
	private final AddNameAnnotationToFieldElements pAddNameAnnotationToField;
	private final RemoveAnnotationFromSchemaElements pRemoveAnnotationFromSchema;
	private final RemoveAnnotationFromFieldElements pRemoveAnnotationFromField;
	private final RemoveNameAnnotationFromFieldElements pRemoveNameAnnotationFromField;
	private final ChangeSchemaElements pChangeSchema;
	private final ChangeEnumElements pChangeEnum;
	private final AddElements pAdd;
	private final AddRecordElements pAddRecord;
	private final AddErrorElements pAddError;
	private final AddEnumerationElements pAddEnumeration;
	private final AddVariableElements pAddVariable;
	private final AddEnumElements pAddEnum;
	private final RemoveSchemaElements pRemoveSchema;
	private final RemoveVariableElements pRemoveVariable;
	private final RemoveEnumElements pRemoveEnum;
	private final RenameSchemaElements pRenameSchema;
	private final RenameVariableElements pRenameVariable;
	private final RenameEnumElements pRenameEnum;
	private final ChangeDefValueElements pChangeDefValue;
	private final ChangeTypeElements pChangeType;
	private final RemoveArrayValueElements pRemoveArrayValue;
	private final RemoveArrayValueAtIndexElements pRemoveArrayValueAtIndex;
	private final AddValueToArrayElements pAddValueToArray;
	private final FieldElements pField;
	private final CustomTypeFieldElements pCustomTypeField;
	private final PrimitiveTypeFieldElements pPrimitiveTypeField;
	private final ComplexTypeFieldElements pComplexTypeField;
	private final ArrayTypeFieldElements pArrayTypeField;
	private final AnnotatedTypesElements pAnnotatedTypes;
	private final TypesElements pTypes;
	private final CustomTypeElements pCustomType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final AnnotationElements pAnnotation;
	private final ValuesElements pValues;
	private final ArrayElements pArray;
	private final ValueElements pValue;
	private final FloatValueElements pFloatValue;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final NullElements pNull;
	private final BooleanValueElements pBooleanValue;
	private final RealElements pReal;
	private final BooleanElements pBoolean;
	private final NegativeIntElements pNegativeInt;
	private final SCHEMA_TYPEElements pSCHEMA_TYPE;
	private final VARIABLE_TYPEElements pVARIABLE_TYPE;
	private final QNElements pQN;
	private final ANElements pAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AeditGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFeature = new FeatureElements();
		this.pFeatureMap = new FeatureMapElements();
		this.pRuleMap = new RuleMapElements();
		this.pRuleDeclaration = new RuleDeclarationElements();
		this.pGenericRule = new GenericRuleElements();
		this.pSchemaRule = new SchemaRuleElements();
		this.pArrayEditRules = new ArrayEditRulesElements();
		this.pEnumRule = new EnumRuleElements();
		this.pAddAnnotationToSchema = new AddAnnotationToSchemaElements();
		this.pAddAnnotationToField = new AddAnnotationToFieldElements();
		this.pAddNameAnnotationToField = new AddNameAnnotationToFieldElements();
		this.pRemoveAnnotationFromSchema = new RemoveAnnotationFromSchemaElements();
		this.pRemoveAnnotationFromField = new RemoveAnnotationFromFieldElements();
		this.pRemoveNameAnnotationFromField = new RemoveNameAnnotationFromFieldElements();
		this.pChangeSchema = new ChangeSchemaElements();
		this.pChangeEnum = new ChangeEnumElements();
		this.pAdd = new AddElements();
		this.pAddRecord = new AddRecordElements();
		this.pAddError = new AddErrorElements();
		this.pAddEnumeration = new AddEnumerationElements();
		this.pAddVariable = new AddVariableElements();
		this.pAddEnum = new AddEnumElements();
		this.pRemoveSchema = new RemoveSchemaElements();
		this.pRemoveVariable = new RemoveVariableElements();
		this.pRemoveEnum = new RemoveEnumElements();
		this.pRenameSchema = new RenameSchemaElements();
		this.pRenameVariable = new RenameVariableElements();
		this.pRenameEnum = new RenameEnumElements();
		this.pChangeDefValue = new ChangeDefValueElements();
		this.pChangeType = new ChangeTypeElements();
		this.pRemoveArrayValue = new RemoveArrayValueElements();
		this.pRemoveArrayValueAtIndex = new RemoveArrayValueAtIndexElements();
		this.pAddValueToArray = new AddValueToArrayElements();
		this.pField = new FieldElements();
		this.pCustomTypeField = new CustomTypeFieldElements();
		this.pPrimitiveTypeField = new PrimitiveTypeFieldElements();
		this.pComplexTypeField = new ComplexTypeFieldElements();
		this.pArrayTypeField = new ArrayTypeFieldElements();
		this.pAnnotatedTypes = new AnnotatedTypesElements();
		this.pTypes = new TypesElements();
		this.pCustomType = new CustomTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pAnnotation = new AnnotationElements();
		this.pValues = new ValuesElements();
		this.pArray = new ArrayElements();
		this.pValue = new ValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pNull = new NullElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pReal = new RealElements();
		this.pBoolean = new BooleanElements();
		this.pNegativeInt = new NegativeIntElements();
		this.pSCHEMA_TYPE = new SCHEMA_TYPEElements();
		this.pVARIABLE_TYPE = new VARIABLE_TYPEElements();
		this.pQN = new QNElements();
		this.pAN = new ANElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.aedit.Aedit".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	ruleDeclarations+=RuleDeclaration*
	//	ruleMaps+=RuleMap*
	//	features+=Feature*
	//	featureMaps+=FeatureMap*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Feature:
	//	'feature' name=ID (':' extend=[Feature])? '{' ruleMaps+=[RuleMap]* '}';
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//FeatureMap:
	//	'use' name=[Feature] ';';
	public FeatureMapElements getFeatureMapAccess() {
		return pFeatureMap;
	}
	
	public ParserRule getFeatureMapRule() {
		return getFeatureMapAccess().getRule();
	}
	
	//RuleMap:
	//	'ruleset' name=ID '{' rules+=[RuleDeclaration]* '}';
	public RuleMapElements getRuleMapAccess() {
		return pRuleMap;
	}
	
	public ParserRule getRuleMapRule() {
		return getRuleMapAccess().getRule();
	}
	
	//RuleDeclaration:
	//	'rule' name=ID '{' rules+=GenericRule* '}';
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return pRuleDeclaration;
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}
	
	//GenericRule:
	//	RenameSchema | RemoveSchema | Add | ChangeSchema | ChangeEnum | AddAnnotationToSchema | RemoveAnnotationFromSchema;
	public GenericRuleElements getGenericRuleAccess() {
		return pGenericRule;
	}
	
	public ParserRule getGenericRuleRule() {
		return getGenericRuleAccess().getRule();
	}
	
	//SchemaRule:
	//	RemoveVariable | RenameVariable | AddVariable | ChangeDefValue | ChangeType | AddAnnotationToField |
	//	AddNameAnnotationToField | RemoveAnnotationFromField | RemoveNameAnnotationFromField | ArrayEditRules;
	public SchemaRuleElements getSchemaRuleAccess() {
		return pSchemaRule;
	}
	
	public ParserRule getSchemaRuleRule() {
		return getSchemaRuleAccess().getRule();
	}
	
	//ArrayEditRules:
	//	RemoveArrayValue | RemoveArrayValueAtIndex | AddValueToArray;
	public ArrayEditRulesElements getArrayEditRulesAccess() {
		return pArrayEditRules;
	}
	
	public ParserRule getArrayEditRulesRule() {
		return getArrayEditRulesAccess().getRule();
	}
	
	//EnumRule:
	//	RemoveEnum | RenameEnum | AddEnum;
	public EnumRuleElements getEnumRuleAccess() {
		return pEnumRule;
	}
	
	public ParserRule getEnumRuleRule() {
		return getEnumRuleAccess().getRule();
	}
	
	//AddAnnotationToSchema:
	//	'add.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotation=Annotation ';';
	public AddAnnotationToSchemaElements getAddAnnotationToSchemaAccess() {
		return pAddAnnotationToSchema;
	}
	
	public ParserRule getAddAnnotationToSchemaRule() {
		return getAddAnnotationToSchemaAccess().getRule();
	}
	
	//AddAnnotationToField:
	//	'add.annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';';
	public AddAnnotationToFieldElements getAddAnnotationToFieldAccess() {
		return pAddAnnotationToField;
	}
	
	public ParserRule getAddAnnotationToFieldRule() {
		return getAddAnnotationToFieldAccess().getRule();
	}
	
	//AddNameAnnotationToField:
	//	'add.name_annot' variable=[avroIDL::Field|QN] '=>' annotation=Annotation ';';
	public AddNameAnnotationToFieldElements getAddNameAnnotationToFieldAccess() {
		return pAddNameAnnotationToField;
	}
	
	public ParserRule getAddNameAnnotationToFieldRule() {
		return getAddNameAnnotationToFieldAccess().getRule();
	}
	
	//RemoveAnnotationFromSchema:
	//	'remove.annot' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
	public RemoveAnnotationFromSchemaElements getRemoveAnnotationFromSchemaAccess() {
		return pRemoveAnnotationFromSchema;
	}
	
	public ParserRule getRemoveAnnotationFromSchemaRule() {
		return getRemoveAnnotationFromSchemaAccess().getRule();
	}
	
	//RemoveAnnotationFromField:
	//	'remove.annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
	public RemoveAnnotationFromFieldElements getRemoveAnnotationFromFieldAccess() {
		return pRemoveAnnotationFromField;
	}
	
	public ParserRule getRemoveAnnotationFromFieldRule() {
		return getRemoveAnnotationFromFieldAccess().getRule();
	}
	
	//RemoveNameAnnotationFromField:
	//	'remove.name_annot' variable=[avroIDL::Field|QN] '=>' annotationToRemove=[avroIDL::Annotation|QN] ';';
	public RemoveNameAnnotationFromFieldElements getRemoveNameAnnotationFromFieldAccess() {
		return pRemoveNameAnnotationFromField;
	}
	
	public ParserRule getRemoveNameAnnotationFromFieldRule() {
		return getRemoveNameAnnotationFromFieldAccess().getRule();
	}
	
	//ChangeSchema:
	//	'change' schemaType=('record' | 'error') schema=[avroIDL::Type|QN] '{' rules+=SchemaRule* '}';
	public ChangeSchemaElements getChangeSchemaAccess() {
		return pChangeSchema;
	}
	
	public ParserRule getChangeSchemaRule() {
		return getChangeSchemaAccess().getRule();
	}
	
	//ChangeEnum:
	//	'change' 'enum' schema=[avroIDL::EnumType|QN] '{' rules+=EnumRule* '}';
	public ChangeEnumElements getChangeEnumAccess() {
		return pChangeEnum;
	}
	
	public ParserRule getChangeEnumRule() {
		return getChangeEnumAccess().getRule();
	}
	
	//Add:
	//	AddRecord | AddError | AddEnumeration;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//AddRecord:
	//	'add.at' '(' index=INT ')' recordAnnotations+=Annotation* 'record' namespace=[avroIDL::AvroIDLFile] '.' recordName=ID
	//	'{' fields+=Field* '}';
	public AddRecordElements getAddRecordAccess() {
		return pAddRecord;
	}
	
	public ParserRule getAddRecordRule() {
		return getAddRecordAccess().getRule();
	}
	
	//AddError:
	//	'add.at' '(' index=INT ')' 'error' namespace=[avroIDL::AvroIDLFile] '.' errorName=ID '{' fields+=Field* '}';
	public AddErrorElements getAddErrorAccess() {
		return pAddError;
	}
	
	public ParserRule getAddErrorRule() {
		return getAddErrorAccess().getRule();
	}
	
	//AddEnumeration:
	//	'add.at' '(' index=INT ')' 'enum' namespace=[avroIDL::AvroIDLFile] '.' enumName=ID '{' symbols+=ID (',' symbols+=ID)*
	//	'}';
	public AddEnumerationElements getAddEnumerationAccess() {
		return pAddEnumeration;
	}
	
	public ParserRule getAddEnumerationRule() {
		return getAddEnumerationAccess().getRule();
	}
	
	//AddVariable:
	//	'add.at' '(' index=INT ')' newVar=Field ';';
	public AddVariableElements getAddVariableAccess() {
		return pAddVariable;
	}
	
	public ParserRule getAddVariableRule() {
		return getAddVariableAccess().getRule();
	}
	
	//AddEnum:
	//	'add.at' '(' index=INT ')' varName=ID ';';
	public AddEnumElements getAddEnumAccess() {
		return pAddEnum;
	}
	
	public ParserRule getAddEnumRule() {
		return getAddEnumAccess().getRule();
	}
	
	//RemoveSchema:
	//	'remove' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] ';';
	public RemoveSchemaElements getRemoveSchemaAccess() {
		return pRemoveSchema;
	}
	
	public ParserRule getRemoveSchemaRule() {
		return getRemoveSchemaAccess().getRule();
	}
	
	//RemoveVariable:
	//	'remove' variable=[avroIDL::Field|QN] ';';
	public RemoveVariableElements getRemoveVariableAccess() {
		return pRemoveVariable;
	}
	
	public ParserRule getRemoveVariableRule() {
		return getRemoveVariableAccess().getRule();
	}
	
	//RemoveEnum:
	//	'remove' varName=ID ';';
	public RemoveEnumElements getRemoveEnumAccess() {
		return pRemoveEnum;
	}
	
	public ParserRule getRemoveEnumRule() {
		return getRemoveEnumAccess().getRule();
	}
	
	//RenameSchema:
	//	'rename' schemaType=SCHEMA_TYPE schema=[avroIDL::Type|QN] '=>' newSchName=ID ';';
	public RenameSchemaElements getRenameSchemaAccess() {
		return pRenameSchema;
	}
	
	public ParserRule getRenameSchemaRule() {
		return getRenameSchemaAccess().getRule();
	}
	
	//RenameVariable:
	//	'rename' variable=[avroIDL::Field|QN] '=>' newVarName=ID ';';
	public RenameVariableElements getRenameVariableAccess() {
		return pRenameVariable;
	}
	
	public ParserRule getRenameVariableRule() {
		return getRenameVariableAccess().getRule();
	}
	
	//RenameEnum:
	//	'rename' oldName=ID '=>' newEnumName=ID ';';
	public RenameEnumElements getRenameEnumAccess() {
		return pRenameEnum;
	}
	
	public ParserRule getRenameEnumRule() {
		return getRenameEnumAccess().getRule();
	}
	
	//ChangeDefValue:
	//	'set_val' field=[avroIDL::Field|QN] '=>' newVal=Value ';';
	public ChangeDefValueElements getChangeDefValueAccess() {
		return pChangeDefValue;
	}
	
	public ParserRule getChangeDefValueRule() {
		return getChangeDefValueAccess().getRule();
	}
	
	//ChangeType:
	//	'set_type' field=[avroIDL::Field|QN] '=>' newType=VARIABLE_TYPE ';';
	public ChangeTypeElements getChangeTypeAccess() {
		return pChangeType;
	}
	
	public ParserRule getChangeTypeRule() {
		return getChangeTypeAccess().getRule();
	}
	
	//RemoveArrayValue:
	//	'remove_value' variable=[avroIDL::Field|QN] '=>' valueToRemove=Value ';';
	public RemoveArrayValueElements getRemoveArrayValueAccess() {
		return pRemoveArrayValue;
	}
	
	public ParserRule getRemoveArrayValueRule() {
		return getRemoveArrayValueAccess().getRule();
	}
	
	//RemoveArrayValueAtIndex:
	//	'remove_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] ';';
	public RemoveArrayValueAtIndexElements getRemoveArrayValueAtIndexAccess() {
		return pRemoveArrayValueAtIndex;
	}
	
	public ParserRule getRemoveArrayValueAtIndexRule() {
		return getRemoveArrayValueAtIndexAccess().getRule();
	}
	
	//AddValueToArray:
	//	'add_value.at' '(' index=INT ')' array=[avroIDL::Field|QN] '=>' valueToAdd=(Array | Value) ';';
	public AddValueToArrayElements getAddValueToArrayAccess() {
		return pAddValueToArray;
	}
	
	public ParserRule getAddValueToArrayRule() {
		return getAddValueToArrayAccess().getRule();
	}
	
	//Field:
	//	annotations+=Annotation* fieldType=(PrimitiveTypeField | CustomTypeField | ComplexTypeField);
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//CustomTypeField:
	//	type=CustomType nameAnnotations+=Annotation* varName=ID ';';
	public CustomTypeFieldElements getCustomTypeFieldAccess() {
		return pCustomTypeField;
	}
	
	public ParserRule getCustomTypeFieldRule() {
		return getCustomTypeFieldAccess().getRule();
	}
	
	//PrimitiveTypeField:
	//	type=PrimitiveType nameAnnotations+=Annotation* varName=ID ('=' value=Value)?;
	public PrimitiveTypeFieldElements getPrimitiveTypeFieldAccess() {
		return pPrimitiveTypeField;
	}
	
	public ParserRule getPrimitiveTypeFieldRule() {
		return getPrimitiveTypeFieldAccess().getRule();
	}
	
	//ComplexTypeField:
	//	type=ArrayTypeField nameAnnotations+=Annotation* varName=ID ('=' value=Array)?;
	public ComplexTypeFieldElements getComplexTypeFieldAccess() {
		return pComplexTypeField;
	}
	
	public ParserRule getComplexTypeFieldRule() {
		return getComplexTypeFieldAccess().getRule();
	}
	
	//ArrayTypeField:
	//	'array' '<' type=AnnotatedTypes '>';
	public ArrayTypeFieldElements getArrayTypeFieldAccess() {
		return pArrayTypeField;
	}
	
	public ParserRule getArrayTypeFieldRule() {
		return getArrayTypeFieldAccess().getRule();
	}
	
	//AnnotatedTypes:
	//	annotataions+=Annotation* type=Types;
	public AnnotatedTypesElements getAnnotatedTypesAccess() {
		return pAnnotatedTypes;
	}
	
	public ParserRule getAnnotatedTypesRule() {
		return getAnnotatedTypesAccess().getRule();
	}
	
	//Types:
	//	CustomType | PrimitiveType | ArrayTypeField;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//CustomType:
	//	target=[avroIDL::Type|QN];
	public CustomTypeElements getCustomTypeAccess() {
		return pCustomType;
	}
	
	public ParserRule getCustomTypeRule() {
		return getCustomTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//	target=VARIABLE_TYPE;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//Annotation:
	//	name=AN ('(' values=Values ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//Values:
	//	{Values} (value+=Array | value+=Value (',' value+=Value)*)*;
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}
	
	//Array:
	//	=> '[' values=Values ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//Value:
	//	FloatValue | IntValue | StringValue | BooleanValue | Null;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//FloatValue:
	//	val=Real;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//StringValue:
	//	val=ID;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//	val=(INT | NegativeInt);
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//Null:
	//	val='null';
	public NullElements getNullAccess() {
		return pNull;
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}
	
	//BooleanValue:
	//	val=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//Real ecore::EFloat:
	//	'-'? INT '.' INT;
	public RealElements getRealAccess() {
		return pReal;
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}
	
	//Boolean ecore::EBoolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//NegativeInt ecore::EInt:
	//	'-' INT;
	public NegativeIntElements getNegativeIntAccess() {
		return pNegativeInt;
	}
	
	public ParserRule getNegativeIntRule() {
		return getNegativeIntAccess().getRule();
	}
	
	//SCHEMA_TYPE:
	//	'record' |
	//	'error' |
	//	'enum';
	public SCHEMA_TYPEElements getSCHEMA_TYPEAccess() {
		return pSCHEMA_TYPE;
	}
	
	public ParserRule getSCHEMA_TYPERule() {
		return getSCHEMA_TYPEAccess().getRule();
	}
	
	//VARIABLE_TYPE:
	//	'int' |
	//	'double' |
	//	'string' |
	//	'long' |
	//	'boolean' |
	//	'float';
	public VARIABLE_TYPEElements getVARIABLE_TYPEAccess() {
		return pVARIABLE_TYPE;
	}
	
	public ParserRule getVARIABLE_TYPERule() {
		return getVARIABLE_TYPEAccess().getRule();
	}
	
	//QN:
	//	ID ('.' ID)*;
	public QNElements getQNAccess() {
		return pQN;
	}
	
	public ParserRule getQNRule() {
		return getQNAccess().getRule();
	}
	
	//AN:
	//	'@' ID ('-' ID)*;
	public ANElements getANAccess() {
		return pAN;
	}
	
	public ParserRule getANRule() {
		return getANAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
