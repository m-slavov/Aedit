/*
 * generated by Xtext 2.21.0
 */
grammar InternalAedit;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.aedit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.aedit.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.aedit.services.AeditGrammarAccess;

}

@parser::members {

 	private AeditGrammarAccess grammarAccess;

    public InternalAeditParser(TokenStream input, AeditGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AeditGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRuleDeclarationsRuleDeclarationParserRuleCall_0_0());
				}
				lv_ruleDeclarations_0_0=ruleRuleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"ruleDeclarations",
						lv_ruleDeclarations_0_0,
						"org.aedit.Aedit.RuleDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRuleMapsRuleMapParserRuleCall_1_0());
				}
				lv_ruleMaps_1_0=ruleRuleMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"ruleMaps",
						lv_ruleMaps_1_0,
						"org.aedit.Aedit.RuleMap");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFeaturesFeatureParserRuleCall_2_0());
				}
				lv_features_2_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"org.aedit.Aedit.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFeatureMapsFeatureMapParserRuleCall_3_0());
				}
				lv_featureMaps_3_0=ruleFeatureMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"featureMaps",
						lv_featureMaps_3_0,
						"org.aedit.Aedit.FeatureMap");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='feature'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureAccess().getFeatureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getFeatureAccess().getExtendFeatureCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getFeatureAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getFeatureAccess().getRuleMapsRuleMapCrossReference_4_0());
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getFeatureAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFeatureMap
entryRuleFeatureMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureMapRule()); }
	iv_ruleFeatureMap=ruleFeatureMap
	{ $current=$iv_ruleFeatureMap.current; }
	EOF;

// Rule FeatureMap
ruleFeatureMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureMapAccess().getUseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureMapRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFeatureMapAccess().getNameFeatureCrossReference_1_0());
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getFeatureMapAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRuleMap
entryRuleRuleMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleMapRule()); }
	iv_ruleRuleMap=ruleRuleMap
	{ $current=$iv_ruleRuleMap.current; }
	EOF;

// Rule RuleMap
ruleRuleMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ruleset'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleMapAccess().getRulesetKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleMapAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleMapRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleMapAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleMapRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getRuleMapAccess().getRulesRuleDeclarationCrossReference_3_0());
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleMapAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleDeclarationRule()); }
	iv_ruleRuleDeclaration=ruleRuleDeclaration
	{ $current=$iv_ruleRuleDeclaration.current; }
	EOF;

// Rule RuleDeclaration
ruleRuleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleDeclarationAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleDeclarationAccess().getRulesGenericRuleParserRuleCall_3_0());
				}
				lv_rules_3_0=ruleGenericRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
					}
					add(
						$current,
						"rules",
						lv_rules_3_0,
						"org.aedit.Aedit.GenericRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGenericRule
entryRuleGenericRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericRuleRule()); }
	iv_ruleGenericRule=ruleGenericRule
	{ $current=$iv_ruleGenericRule.current; }
	EOF;

// Rule GenericRule
ruleGenericRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getRenameSchemaParserRuleCall_0());
		}
		this_RenameSchema_0=ruleRenameSchema
		{
			$current = $this_RenameSchema_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getRemoveSchemaParserRuleCall_1());
		}
		this_RemoveSchema_1=ruleRemoveSchema
		{
			$current = $this_RemoveSchema_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getAddParserRuleCall_2());
		}
		this_Add_2=ruleAdd
		{
			$current = $this_Add_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getChangeSchemaParserRuleCall_3());
		}
		this_ChangeSchema_3=ruleChangeSchema
		{
			$current = $this_ChangeSchema_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getChangeEnumParserRuleCall_4());
		}
		this_ChangeEnum_4=ruleChangeEnum
		{
			$current = $this_ChangeEnum_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getAddAnnotationToSchemaParserRuleCall_5());
		}
		this_AddAnnotationToSchema_5=ruleAddAnnotationToSchema
		{
			$current = $this_AddAnnotationToSchema_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenericRuleAccess().getRemoveAnnotationFromSchemaParserRuleCall_6());
		}
		this_RemoveAnnotationFromSchema_6=ruleRemoveAnnotationFromSchema
		{
			$current = $this_RemoveAnnotationFromSchema_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSchemaRule
entryRuleSchemaRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaRuleRule()); }
	iv_ruleSchemaRule=ruleSchemaRule
	{ $current=$iv_ruleSchemaRule.current; }
	EOF;

// Rule SchemaRule
ruleSchemaRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getRemoveVariableParserRuleCall_0());
		}
		this_RemoveVariable_0=ruleRemoveVariable
		{
			$current = $this_RemoveVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getRenameVariableParserRuleCall_1());
		}
		this_RenameVariable_1=ruleRenameVariable
		{
			$current = $this_RenameVariable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getAddVariableParserRuleCall_2());
		}
		this_AddVariable_2=ruleAddVariable
		{
			$current = $this_AddVariable_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getChangeDefValueParserRuleCall_3());
		}
		this_ChangeDefValue_3=ruleChangeDefValue
		{
			$current = $this_ChangeDefValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getChangeTypeParserRuleCall_4());
		}
		this_ChangeType_4=ruleChangeType
		{
			$current = $this_ChangeType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getAddAnnotationToFieldParserRuleCall_5());
		}
		this_AddAnnotationToField_5=ruleAddAnnotationToField
		{
			$current = $this_AddAnnotationToField_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getAddNameAnnotationToFieldParserRuleCall_6());
		}
		this_AddNameAnnotationToField_6=ruleAddNameAnnotationToField
		{
			$current = $this_AddNameAnnotationToField_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getRemoveAnnotationFromFieldParserRuleCall_7());
		}
		this_RemoveAnnotationFromField_7=ruleRemoveAnnotationFromField
		{
			$current = $this_RemoveAnnotationFromField_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getRemoveNameAnnotationFromFieldParserRuleCall_8());
		}
		this_RemoveNameAnnotationFromField_8=ruleRemoveNameAnnotationFromField
		{
			$current = $this_RemoveNameAnnotationFromField_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaRuleAccess().getArrayEditRulesParserRuleCall_9());
		}
		this_ArrayEditRules_9=ruleArrayEditRules
		{
			$current = $this_ArrayEditRules_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayEditRules
entryRuleArrayEditRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayEditRulesRule()); }
	iv_ruleArrayEditRules=ruleArrayEditRules
	{ $current=$iv_ruleArrayEditRules.current; }
	EOF;

// Rule ArrayEditRules
ruleArrayEditRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArrayEditRulesAccess().getRemoveArrayValueParserRuleCall_0());
		}
		this_RemoveArrayValue_0=ruleRemoveArrayValue
		{
			$current = $this_RemoveArrayValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArrayEditRulesAccess().getRemoveArrayValueAtIndexParserRuleCall_1());
		}
		this_RemoveArrayValueAtIndex_1=ruleRemoveArrayValueAtIndex
		{
			$current = $this_RemoveArrayValueAtIndex_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArrayEditRulesAccess().getAddValueToArrayParserRuleCall_2());
		}
		this_AddValueToArray_2=ruleAddValueToArray
		{
			$current = $this_AddValueToArray_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumRule
entryRuleEnumRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRuleRule()); }
	iv_ruleEnumRule=ruleEnumRule
	{ $current=$iv_ruleEnumRule.current; }
	EOF;

// Rule EnumRule
ruleEnumRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumRuleAccess().getRemoveEnumParserRuleCall_0());
		}
		this_RemoveEnum_0=ruleRemoveEnum
		{
			$current = $this_RemoveEnum_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnumRuleAccess().getRenameEnumParserRuleCall_1());
		}
		this_RenameEnum_1=ruleRenameEnum
		{
			$current = $this_RenameEnum_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnumRuleAccess().getAddEnumParserRuleCall_2());
		}
		this_AddEnum_2=ruleAddEnum
		{
			$current = $this_AddEnum_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAddAnnotationToSchema
entryRuleAddAnnotationToSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddAnnotationToSchemaRule()); }
	iv_ruleAddAnnotationToSchema=ruleAddAnnotationToSchema
	{ $current=$iv_ruleAddAnnotationToSchema.current; }
	EOF;

// Rule AddAnnotationToSchema
ruleAddAnnotationToSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddAnnotationToSchemaAccess().getAddAnnotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAnnotationToSchemaAccess().getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0());
				}
				lv_schemaType_1_0=ruleSCHEMA_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddAnnotationToSchemaRule());
					}
					set(
						$current,
						"schemaType",
						lv_schemaType_1_0,
						"org.aedit.Aedit.SCHEMA_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddAnnotationToSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAddAnnotationToSchemaAccess().getSchemaTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddAnnotationToSchemaAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAnnotationToSchemaAccess().getAnnotationAnnotationParserRuleCall_4_0());
				}
				lv_annotation_4_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddAnnotationToSchemaRule());
					}
					set(
						$current,
						"annotation",
						lv_annotation_4_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddAnnotationToSchemaAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAddAnnotationToField
entryRuleAddAnnotationToField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddAnnotationToFieldRule()); }
	iv_ruleAddAnnotationToField=ruleAddAnnotationToField
	{ $current=$iv_ruleAddAnnotationToField.current; }
	EOF;

// Rule AddAnnotationToField
ruleAddAnnotationToField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddAnnotationToFieldAccess().getAddAnnotKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddAnnotationToFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAddAnnotationToFieldAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddAnnotationToFieldAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAnnotationToFieldAccess().getAnnotationAnnotationParserRuleCall_3_0());
				}
				lv_annotation_3_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddAnnotationToFieldRule());
					}
					set(
						$current,
						"annotation",
						lv_annotation_3_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddAnnotationToFieldAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleAddNameAnnotationToField
entryRuleAddNameAnnotationToField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddNameAnnotationToFieldRule()); }
	iv_ruleAddNameAnnotationToField=ruleAddNameAnnotationToField
	{ $current=$iv_ruleAddNameAnnotationToField.current; }
	EOF;

// Rule AddNameAnnotationToField
ruleAddNameAnnotationToField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.name_annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddNameAnnotationToFieldAccess().getAddName_annotKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddNameAnnotationToFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAddNameAnnotationToFieldAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddNameAnnotationToFieldAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddNameAnnotationToFieldAccess().getAnnotationAnnotationParserRuleCall_3_0());
				}
				lv_annotation_3_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddNameAnnotationToFieldRule());
					}
					set(
						$current,
						"annotation",
						lv_annotation_3_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddNameAnnotationToFieldAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleRemoveAnnotationFromSchema
entryRuleRemoveAnnotationFromSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveAnnotationFromSchemaRule()); }
	iv_ruleRemoveAnnotationFromSchema=ruleRemoveAnnotationFromSchema
	{ $current=$iv_ruleRemoveAnnotationFromSchema.current; }
	EOF;

// Rule RemoveAnnotationFromSchema
ruleRemoveAnnotationFromSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove.annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveAnnotationFromSchemaAccess().getRemoveAnnotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveAnnotationFromSchemaAccess().getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0());
				}
				lv_schemaType_1_0=ruleSCHEMA_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveAnnotationFromSchemaRule());
					}
					set(
						$current,
						"schemaType",
						lv_schemaType_1_0,
						"org.aedit.Aedit.SCHEMA_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveAnnotationFromSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveAnnotationFromSchemaAccess().getSchemaTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getRemoveAnnotationFromSchemaAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveAnnotationFromSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveAnnotationFromSchemaAccess().getAnnotationToRemoveAnnotationCrossReference_4_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRemoveAnnotationFromSchemaAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleRemoveAnnotationFromField
entryRuleRemoveAnnotationFromField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveAnnotationFromFieldRule()); }
	iv_ruleRemoveAnnotationFromField=ruleRemoveAnnotationFromField
	{ $current=$iv_ruleRemoveAnnotationFromField.current; }
	EOF;

// Rule RemoveAnnotationFromField
ruleRemoveAnnotationFromField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove.annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveAnnotationFromFieldAccess().getRemoveAnnotKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveAnnotationFromFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveAnnotationFromFieldAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getRemoveAnnotationFromFieldAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveAnnotationFromFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveAnnotationFromFieldAccess().getAnnotationToRemoveAnnotationCrossReference_3_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRemoveAnnotationFromFieldAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleRemoveNameAnnotationFromField
entryRuleRemoveNameAnnotationFromField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveNameAnnotationFromFieldRule()); }
	iv_ruleRemoveNameAnnotationFromField=ruleRemoveNameAnnotationFromField
	{ $current=$iv_ruleRemoveNameAnnotationFromField.current; }
	EOF;

// Rule RemoveNameAnnotationFromField
ruleRemoveNameAnnotationFromField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove.name_annot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveNameAnnotationFromFieldAccess().getRemoveName_annotKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveNameAnnotationFromFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveNameAnnotationFromFieldAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getRemoveNameAnnotationFromFieldAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveNameAnnotationFromFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveNameAnnotationFromFieldAccess().getAnnotationToRemoveAnnotationCrossReference_3_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRemoveNameAnnotationFromFieldAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleChangeSchema
entryRuleChangeSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeSchemaRule()); }
	iv_ruleChangeSchema=ruleChangeSchema
	{ $current=$iv_ruleChangeSchema.current; }
	EOF;

// Rule ChangeSchema
ruleChangeSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='change'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeSchemaAccess().getChangeKeyword_0());
		}
		(
			(
				(
					lv_schemaType_1_1='record'
					{
						newLeafNode(lv_schemaType_1_1, grammarAccess.getChangeSchemaAccess().getSchemaTypeRecordKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChangeSchemaRule());
						}
						setWithLastConsumed($current, "schemaType", lv_schemaType_1_1, null);
					}
					    |
					lv_schemaType_1_2='error'
					{
						newLeafNode(lv_schemaType_1_2, grammarAccess.getChangeSchemaAccess().getSchemaTypeErrorKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChangeSchemaRule());
						}
						setWithLastConsumed($current, "schemaType", lv_schemaType_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChangeSchemaAccess().getSchemaTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getChangeSchemaAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeSchemaAccess().getRulesSchemaRuleParserRuleCall_4_0());
				}
				lv_rules_4_0=ruleSchemaRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeSchemaRule());
					}
					add(
						$current,
						"rules",
						lv_rules_4_0,
						"org.aedit.Aedit.SchemaRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getChangeSchemaAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleChangeEnum
entryRuleChangeEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeEnumRule()); }
	iv_ruleChangeEnum=ruleChangeEnum
	{ $current=$iv_ruleChangeEnum.current; }
	EOF;

// Rule ChangeEnum
ruleChangeEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='change'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeEnumAccess().getChangeKeyword_0());
		}
		otherlv_1='enum'
		{
			newLeafNode(otherlv_1, grammarAccess.getChangeEnumAccess().getEnumKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeEnumRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChangeEnumAccess().getSchemaEnumTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getChangeEnumAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeEnumAccess().getRulesEnumRuleParserRuleCall_4_0());
				}
				lv_rules_4_0=ruleEnumRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeEnumRule());
					}
					add(
						$current,
						"rules",
						lv_rules_4_0,
						"org.aedit.Aedit.EnumRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getChangeEnumAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddAccess().getAddRecordParserRuleCall_0());
		}
		this_AddRecord_0=ruleAddRecord
		{
			$current = $this_AddRecord_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAddAccess().getAddErrorParserRuleCall_1());
		}
		this_AddError_1=ruleAddError
		{
			$current = $this_AddError_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAddAccess().getAddEnumerationParserRuleCall_2());
		}
		this_AddEnumeration_2=ruleAddEnumeration
		{
			$current = $this_AddEnumeration_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAddRecord
entryRuleAddRecord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRecordRule()); }
	iv_ruleAddRecord=ruleAddRecord
	{ $current=$iv_ruleAddRecord.current; }
	EOF;

// Rule AddRecord
ruleAddRecord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddRecordAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddRecordAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddRecordAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRecordRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddRecordAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='record'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddRecordAccess().getRecordKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRecordRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getAddRecordAccess().getNamespaceAvroIDLFileCrossReference_5_0());
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getAddRecordAccess().getFullStopKeyword_6());
		}
		(
			(
				lv_recordName_7_0=RULE_ID
				{
					newLeafNode(lv_recordName_7_0, grammarAccess.getAddRecordAccess().getRecordNameIDTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRecordRule());
					}
					setWithLastConsumed(
						$current,
						"recordName",
						lv_recordName_7_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getAddRecordAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddRecordAccess().getFieldsFieldParserRuleCall_9_0());
				}
				lv_fields_9_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRecordRule());
					}
					add(
						$current,
						"fields",
						lv_fields_9_0,
						"org.aedit.Aedit.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getAddRecordAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleAddError
entryRuleAddError returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddErrorRule()); }
	iv_ruleAddError=ruleAddError
	{ $current=$iv_ruleAddError.current; }
	EOF;

// Rule AddError
ruleAddError returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddErrorAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddErrorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddErrorAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddErrorRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddErrorAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='error'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddErrorAccess().getErrorKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddErrorRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getAddErrorAccess().getNamespaceAvroIDLFileCrossReference_5_0());
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getAddErrorAccess().getFullStopKeyword_6());
		}
		(
			(
				lv_errorName_7_0=RULE_ID
				{
					newLeafNode(lv_errorName_7_0, grammarAccess.getAddErrorAccess().getErrorNameIDTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddErrorRule());
					}
					setWithLastConsumed(
						$current,
						"errorName",
						lv_errorName_7_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getAddErrorAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddErrorAccess().getFieldsFieldParserRuleCall_9_0());
				}
				lv_fields_9_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddErrorRule());
					}
					add(
						$current,
						"fields",
						lv_fields_9_0,
						"org.aedit.Aedit.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getAddErrorAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleAddEnumeration
entryRuleAddEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddEnumerationRule()); }
	iv_ruleAddEnumeration=ruleAddEnumeration
	{ $current=$iv_ruleAddEnumeration.current; }
	EOF;

// Rule AddEnumeration
ruleAddEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddEnumerationAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddEnumerationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddEnumerationAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumerationRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddEnumerationAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='enum'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddEnumerationAccess().getEnumKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumerationRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getAddEnumerationAccess().getNamespaceAvroIDLFileCrossReference_5_0());
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getAddEnumerationAccess().getFullStopKeyword_6());
		}
		(
			(
				lv_enumName_7_0=RULE_ID
				{
					newLeafNode(lv_enumName_7_0, grammarAccess.getAddEnumerationAccess().getEnumNameIDTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumerationRule());
					}
					setWithLastConsumed(
						$current,
						"enumName",
						lv_enumName_7_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getAddEnumerationAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				lv_symbols_9_0=RULE_ID
				{
					newLeafNode(lv_symbols_9_0, grammarAccess.getAddEnumerationAccess().getSymbolsIDTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumerationRule());
					}
					addWithLastConsumed(
						$current,
						"symbols",
						lv_symbols_9_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getAddEnumerationAccess().getCommaKeyword_10_0());
			}
			(
				(
					lv_symbols_11_0=RULE_ID
					{
						newLeafNode(lv_symbols_11_0, grammarAccess.getAddEnumerationAccess().getSymbolsIDTerminalRuleCall_10_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddEnumerationRule());
						}
						addWithLastConsumed(
							$current,
							"symbols",
							lv_symbols_11_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getAddEnumerationAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleAddVariable
entryRuleAddVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddVariableRule()); }
	iv_ruleAddVariable=ruleAddVariable
	{ $current=$iv_ruleAddVariable.current; }
	EOF;

// Rule AddVariable
ruleAddVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddVariableAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddVariableAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddVariableAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddVariableRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddVariableAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddVariableAccess().getNewVarFieldParserRuleCall_4_0());
				}
				lv_newVar_4_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddVariableRule());
					}
					set(
						$current,
						"newVar",
						lv_newVar_4_0,
						"org.aedit.Aedit.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddVariableAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAddEnum
entryRuleAddEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddEnumRule()); }
	iv_ruleAddEnum=ruleAddEnum
	{ $current=$iv_ruleAddEnum.current; }
	EOF;

// Rule AddEnum
ruleAddEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddEnumAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddEnumAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddEnumAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddEnumAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				lv_varName_4_0=RULE_ID
				{
					newLeafNode(lv_varName_4_0, grammarAccess.getAddEnumAccess().getVarNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddEnumRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddEnumAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleRemoveSchema
entryRuleRemoveSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveSchemaRule()); }
	iv_ruleRemoveSchema=ruleRemoveSchema
	{ $current=$iv_ruleRemoveSchema.current; }
	EOF;

// Rule RemoveSchema
ruleRemoveSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveSchemaAccess().getRemoveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveSchemaAccess().getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0());
				}
				lv_schemaType_1_0=ruleSCHEMA_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveSchemaRule());
					}
					set(
						$current,
						"schemaType",
						lv_schemaType_1_0,
						"org.aedit.Aedit.SCHEMA_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveSchemaAccess().getSchemaTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getRemoveSchemaAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleRemoveVariable
entryRuleRemoveVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveVariableRule()); }
	iv_ruleRemoveVariable=ruleRemoveVariable
	{ $current=$iv_ruleRemoveVariable.current; }
	EOF;

// Rule RemoveVariable
ruleRemoveVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveVariableAccess().getRemoveKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveVariableRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRemoveVariableAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRemoveVariableAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRemoveEnum
entryRuleRemoveEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveEnumRule()); }
	iv_ruleRemoveEnum=ruleRemoveEnum
	{ $current=$iv_ruleRemoveEnum.current; }
	EOF;

// Rule RemoveEnum
ruleRemoveEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveEnumAccess().getRemoveKeyword_0());
		}
		(
			(
				lv_varName_1_0=RULE_ID
				{
					newLeafNode(lv_varName_1_0, grammarAccess.getRemoveEnumAccess().getVarNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveEnumRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRemoveEnumAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRenameSchema
entryRuleRenameSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameSchemaRule()); }
	iv_ruleRenameSchema=ruleRenameSchema
	{ $current=$iv_ruleRenameSchema.current; }
	EOF;

// Rule RenameSchema
ruleRenameSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameSchemaAccess().getRenameKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRenameSchemaAccess().getSchemaTypeSCHEMA_TYPEParserRuleCall_1_0());
				}
				lv_schemaType_1_0=ruleSCHEMA_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRenameSchemaRule());
					}
					set(
						$current,
						"schemaType",
						lv_schemaType_1_0,
						"org.aedit.Aedit.SCHEMA_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameSchemaRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRenameSchemaAccess().getSchemaTypeCrossReference_2_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getRenameSchemaAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				lv_newSchName_4_0=RULE_ID
				{
					newLeafNode(lv_newSchName_4_0, grammarAccess.getRenameSchemaAccess().getNewSchNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameSchemaRule());
					}
					setWithLastConsumed(
						$current,
						"newSchName",
						lv_newSchName_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRenameSchemaAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleRenameVariable
entryRuleRenameVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameVariableRule()); }
	iv_ruleRenameVariable=ruleRenameVariable
	{ $current=$iv_ruleRenameVariable.current; }
	EOF;

// Rule RenameVariable
ruleRenameVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameVariableAccess().getRenameKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameVariableRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRenameVariableAccess().getVariableFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getRenameVariableAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				lv_newVarName_3_0=RULE_ID
				{
					newLeafNode(lv_newVarName_3_0, grammarAccess.getRenameVariableAccess().getNewVarNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameVariableRule());
					}
					setWithLastConsumed(
						$current,
						"newVarName",
						lv_newVarName_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRenameVariableAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleRenameEnum
entryRuleRenameEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameEnumRule()); }
	iv_ruleRenameEnum=ruleRenameEnum
	{ $current=$iv_ruleRenameEnum.current; }
	EOF;

// Rule RenameEnum
ruleRenameEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameEnumAccess().getRenameKeyword_0());
		}
		(
			(
				lv_oldName_1_0=RULE_ID
				{
					newLeafNode(lv_oldName_1_0, grammarAccess.getRenameEnumAccess().getOldNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameEnumRule());
					}
					setWithLastConsumed(
						$current,
						"oldName",
						lv_oldName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getRenameEnumAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				lv_newEnumName_3_0=RULE_ID
				{
					newLeafNode(lv_newEnumName_3_0, grammarAccess.getRenameEnumAccess().getNewEnumNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameEnumRule());
					}
					setWithLastConsumed(
						$current,
						"newEnumName",
						lv_newEnumName_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRenameEnumAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleChangeDefValue
entryRuleChangeDefValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeDefValueRule()); }
	iv_ruleChangeDefValue=ruleChangeDefValue
	{ $current=$iv_ruleChangeDefValue.current; }
	EOF;

// Rule ChangeDefValue
ruleChangeDefValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set_val'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeDefValueAccess().getSet_valKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeDefValueRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChangeDefValueAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getChangeDefValueAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeDefValueAccess().getNewValValueParserRuleCall_3_0());
				}
				lv_newVal_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeDefValueRule());
					}
					set(
						$current,
						"newVal",
						lv_newVal_3_0,
						"org.aedit.Aedit.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getChangeDefValueAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleChangeType
entryRuleChangeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeTypeRule()); }
	iv_ruleChangeType=ruleChangeType
	{ $current=$iv_ruleChangeType.current; }
	EOF;

// Rule ChangeType
ruleChangeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set_type'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeTypeAccess().getSet_typeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeTypeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChangeTypeAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getChangeTypeAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeTypeAccess().getNewTypeVARIABLE_TYPEParserRuleCall_3_0());
				}
				lv_newType_3_0=ruleVARIABLE_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeTypeRule());
					}
					set(
						$current,
						"newType",
						lv_newType_3_0,
						"org.aedit.Aedit.VARIABLE_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getChangeTypeAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleRemoveArrayValue
entryRuleRemoveArrayValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveArrayValueRule()); }
	iv_ruleRemoveArrayValue=ruleRemoveArrayValue
	{ $current=$iv_ruleRemoveArrayValue.current; }
	EOF;

// Rule RemoveArrayValue
ruleRemoveArrayValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveArrayValueAccess().getRemoveKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveArrayValueRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRemoveArrayValueAccess().getArrayFieldCrossReference_1_0());
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getRemoveArrayValueAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveArrayValueAccess().getValueToRemoveValueParserRuleCall_3_0());
				}
				lv_valueToRemove_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveArrayValueRule());
					}
					set(
						$current,
						"valueToRemove",
						lv_valueToRemove_3_0,
						"org.aedit.Aedit.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRemoveArrayValueAtIndex
entryRuleRemoveArrayValueAtIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveArrayValueAtIndexRule()); }
	iv_ruleRemoveArrayValueAtIndex=ruleRemoveArrayValueAtIndex
	{ $current=$iv_ruleRemoveArrayValueAtIndex.current; }
	EOF;

// Rule RemoveArrayValueAtIndex
ruleRemoveArrayValueAtIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveArrayValueAtIndexAccess().getRemoveAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRemoveArrayValueAtIndexAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getRemoveArrayValueAtIndexAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveArrayValueAtIndexRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRemoveArrayValueAtIndexAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveArrayValueAtIndexRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getRemoveArrayValueAtIndexAccess().getArrayFieldCrossReference_4_0());
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRemoveArrayValueAtIndexAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAddValueToArray
entryRuleAddValueToArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddValueToArrayRule()); }
	iv_ruleAddValueToArray=ruleAddValueToArray
	{ $current=$iv_ruleAddValueToArray.current; }
	EOF;

// Rule AddValueToArray
ruleAddValueToArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add.at'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddValueToArrayAccess().getAddAtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddValueToArrayAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getAddValueToArrayAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddValueToArrayRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddValueToArrayAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddValueToArrayRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getAddValueToArrayAccess().getArrayFieldCrossReference_4_0());
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddValueToArrayAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getAnnotationsAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getFieldTypePrimitiveTypeFieldParserRuleCall_1_0_0());
					}
					lv_fieldType_1_1=rulePrimitiveTypeField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"fieldType",
							lv_fieldType_1_1,
							"org.aedit.Aedit.PrimitiveTypeField");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFieldAccess().getFieldTypeCustomTypeFieldParserRuleCall_1_0_1());
					}
					lv_fieldType_1_2=ruleCustomTypeField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"fieldType",
							lv_fieldType_1_2,
							"org.aedit.Aedit.CustomTypeField");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFieldAccess().getFieldTypeComplexTypeFieldParserRuleCall_1_0_2());
					}
					lv_fieldType_1_3=ruleComplexTypeField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"fieldType",
							lv_fieldType_1_3,
							"org.aedit.Aedit.ComplexTypeField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCustomTypeField
entryRuleCustomTypeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomTypeFieldRule()); }
	iv_ruleCustomTypeField=ruleCustomTypeField
	{ $current=$iv_ruleCustomTypeField.current; }
	EOF;

// Rule CustomTypeField
ruleCustomTypeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomTypeFieldAccess().getTypeCustomTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleCustomType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomTypeFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.aedit.Aedit.CustomType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomTypeFieldAccess().getNameAnnotationsAnnotationParserRuleCall_1_0());
				}
				lv_nameAnnotations_1_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomTypeFieldRule());
					}
					add(
						$current,
						"nameAnnotations",
						lv_nameAnnotations_1_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_varName_2_0=RULE_ID
				{
					newLeafNode(lv_varName_2_0, grammarAccess.getCustomTypeFieldAccess().getVarNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomTypeFieldRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomTypeFieldAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulePrimitiveTypeField
entryRulePrimitiveTypeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeFieldRule()); }
	iv_rulePrimitiveTypeField=rulePrimitiveTypeField
	{ $current=$iv_rulePrimitiveTypeField.current; }
	EOF;

// Rule PrimitiveTypeField
rulePrimitiveTypeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveTypeFieldAccess().getTypePrimitiveTypeParserRuleCall_0_0());
				}
				lv_type_0_0=rulePrimitiveType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveTypeFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.aedit.Aedit.PrimitiveType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveTypeFieldAccess().getNameAnnotationsAnnotationParserRuleCall_1_0());
				}
				lv_nameAnnotations_1_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveTypeFieldRule());
					}
					add(
						$current,
						"nameAnnotations",
						lv_nameAnnotations_1_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_varName_2_0=RULE_ID
				{
					newLeafNode(lv_varName_2_0, grammarAccess.getPrimitiveTypeFieldAccess().getVarNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeFieldRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimitiveTypeFieldAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimitiveTypeFieldAccess().getValueValueParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimitiveTypeFieldRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.aedit.Aedit.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleComplexTypeField
entryRuleComplexTypeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTypeFieldRule()); }
	iv_ruleComplexTypeField=ruleComplexTypeField
	{ $current=$iv_ruleComplexTypeField.current; }
	EOF;

// Rule ComplexTypeField
ruleComplexTypeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexTypeFieldAccess().getTypeArrayTypeFieldParserRuleCall_0_0());
				}
				lv_type_0_0=ruleArrayTypeField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexTypeFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.aedit.Aedit.ArrayTypeField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexTypeFieldAccess().getNameAnnotationsAnnotationParserRuleCall_1_0());
				}
				lv_nameAnnotations_1_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexTypeFieldRule());
					}
					add(
						$current,
						"nameAnnotations",
						lv_nameAnnotations_1_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_varName_2_0=RULE_ID
				{
					newLeafNode(lv_varName_2_0, grammarAccess.getComplexTypeFieldAccess().getVarNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTypeFieldRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getComplexTypeFieldAccess().getEqualsSignKeyword_3_0());
			}
			(
				('[')=>
				(
					{
						newCompositeNode(grammarAccess.getComplexTypeFieldAccess().getValueArrayParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleArray
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexTypeFieldRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.aedit.Aedit.Array");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArrayTypeField
entryRuleArrayTypeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeFieldRule()); }
	iv_ruleArrayTypeField=ruleArrayTypeField
	{ $current=$iv_ruleArrayTypeField.current; }
	EOF;

// Rule ArrayTypeField
ruleArrayTypeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeFieldAccess().getArrayKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayTypeFieldAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeFieldAccess().getTypeAnnotatedTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAnnotatedTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.aedit.Aedit.AnnotatedTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayTypeFieldAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleAnnotatedTypes
entryRuleAnnotatedTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotatedTypesRule()); }
	iv_ruleAnnotatedTypes=ruleAnnotatedTypes
	{ $current=$iv_ruleAnnotatedTypes.current; }
	EOF;

// Rule AnnotatedTypes
ruleAnnotatedTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotatedTypesAccess().getAnnotataionsAnnotationParserRuleCall_0_0());
				}
				lv_annotataions_0_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotatedTypesRule());
					}
					add(
						$current,
						"annotataions",
						lv_annotataions_0_0,
						"org.aedit.Aedit.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotatedTypesAccess().getTypeTypesParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotatedTypesRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.aedit.Aedit.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	iv_ruleTypes=ruleTypes
	{ $current=$iv_ruleTypes.current; }
	EOF;

// Rule Types
ruleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypesAccess().getCustomTypeParserRuleCall_0());
		}
		this_CustomType_0=ruleCustomType
		{
			$current = $this_CustomType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypesAccess().getPrimitiveTypeParserRuleCall_1());
		}
		this_PrimitiveType_1=rulePrimitiveType
		{
			$current = $this_PrimitiveType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypesAccess().getArrayTypeFieldParserRuleCall_2());
		}
		this_ArrayTypeField_2=ruleArrayTypeField
		{
			$current = $this_ArrayTypeField_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCustomType
entryRuleCustomType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomTypeRule()); }
	iv_ruleCustomType=ruleCustomType
	{ $current=$iv_ruleCustomType.current; }
	EOF;

// Rule CustomType
ruleCustomType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCustomTypeRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getCustomTypeAccess().getTargetTypeCrossReference_0());
			}
			ruleQN
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	iv_rulePrimitiveType=rulePrimitiveType
	{ $current=$iv_rulePrimitiveType.current; }
	EOF;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getTargetVARIABLE_TYPEParserRuleCall_0());
			}
			lv_target_0_0=ruleVARIABLE_TYPE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
				}
				set(
					$current,
					"target",
					lv_target_0_0,
					"org.aedit.Aedit.VARIABLE_TYPE");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationAccess().getNameANParserRuleCall_0_0());
				}
				lv_name_0_0=ruleAN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.aedit.Aedit.AN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnnotationAccess().getValuesValuesParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleValues
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnnotationRule());
						}
						set(
							$current,
							"values",
							lv_values_2_0,
							"org.aedit.Aedit.Values");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleValues
entryRuleValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValuesRule()); }
	iv_ruleValues=ruleValues
	{ $current=$iv_ruleValues.current; }
	EOF;

// Rule Values
ruleValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValuesAccess().getValuesAction_0(),
					$current);
			}
		)
		(
			(
				('[')=>
				(
					{
						newCompositeNode(grammarAccess.getValuesAccess().getValueArrayParserRuleCall_1_0_0());
					}
					lv_value_1_0=ruleArray
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValuesRule());
						}
						add(
							$current,
							"value",
							lv_value_1_0,
							"org.aedit.Aedit.Array");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_0_0());
						}
						lv_value_2_0=ruleValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValuesRule());
							}
							add(
								$current,
								"value",
								lv_value_2_0,
								"org.aedit.Aedit.Value");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_1_1_0());
							}
							lv_value_4_0=ruleValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getValuesRule());
								}
								add(
									$current,
									"value",
									lv_value_4_0,
									"org.aedit.Aedit.Value");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)*
	)
;

// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_ruleArray=ruleArray
	{ $current=$iv_ruleArray.current; }
	EOF;

// Rule Array
ruleArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('[')=>
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getValuesValuesParserRuleCall_1_0());
				}
				lv_values_1_0=ruleValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					set(
						$current,
						"values",
						lv_values_1_0,
						"org.aedit.Aedit.Values");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getFloatValueParserRuleCall_0());
		}
		this_FloatValue_0=ruleFloatValue
		{
			$current = $this_FloatValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getIntValueParserRuleCall_1());
		}
		this_IntValue_1=ruleIntValue
		{
			$current = $this_IntValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3());
		}
		this_BooleanValue_3=ruleBooleanValue
		{
			$current = $this_BooleanValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getNullParserRuleCall_4());
		}
		this_Null_4=ruleNull
		{
			$current = $this_Null_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current; }
	EOF;

// Rule FloatValue
ruleFloatValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getValRealParserRuleCall_0());
			}
			lv_val_0_0=ruleReal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFloatValueRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"org.aedit.Aedit.Real");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_ID
			{
				newLeafNode(lv_val_0_0, grammarAccess.getStringValueAccess().getValIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current; }
	EOF;

// Rule IntValue
ruleIntValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_1=RULE_INT
				{
					newLeafNode(lv_val_0_1, grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntValueRule());
					}
					setWithLastConsumed(
						$current,
						"val",
						lv_val_0_1,
						"org.eclipse.xtext.common.Terminals.INT");
				}
				    |
				{
					newCompositeNode(grammarAccess.getIntValueAccess().getValNegativeIntParserRuleCall_0_1());
				}
				lv_val_0_2=ruleNegativeInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntValueRule());
					}
					set(
						$current,
						"val",
						lv_val_0_2,
						"org.aedit.Aedit.NegativeInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullRule()); }
	iv_ruleNull=ruleNull
	{ $current=$iv_ruleNull.current; }
	EOF;

// Rule Null
ruleNull returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0='null'
			{
				newLeafNode(lv_val_0_0, grammarAccess.getNullAccess().getValNullKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNullRule());
				}
				setWithLastConsumed($current, "val", lv_val_0_0, "null");
			}
		)
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanValueAccess().getValBooleanParserRuleCall_0());
			}
			lv_val_0_0=ruleBoolean
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBooleanValueRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"org.aedit.Aedit.Boolean");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleReal
entryRuleReal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRealRule()); }
	iv_ruleReal=ruleReal
	{ $current=$iv_ruleReal.current.getText(); }
	EOF;

// Rule Real
ruleReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getRealAccess().getINTTerminalRuleCall_1());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getRealAccess().getINTTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNegativeInt
entryRuleNegativeInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNegativeIntRule()); }
	iv_ruleNegativeInt=ruleNegativeInt
	{ $current=$iv_ruleNegativeInt.current.getText(); }
	EOF;

// Rule NegativeInt
ruleNegativeInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNegativeIntAccess().getHyphenMinusKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getNegativeIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSCHEMA_TYPE
entryRuleSCHEMA_TYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSCHEMA_TYPERule()); }
	iv_ruleSCHEMA_TYPE=ruleSCHEMA_TYPE
	{ $current=$iv_ruleSCHEMA_TYPE.current.getText(); }
	EOF;

// Rule SCHEMA_TYPE
ruleSCHEMA_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='record'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSCHEMA_TYPEAccess().getRecordKeyword_0());
		}
		    |
		kw='error'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSCHEMA_TYPEAccess().getErrorKeyword_1());
		}
		    |
		kw='enum'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSCHEMA_TYPEAccess().getEnumKeyword_2());
		}
	)
;

// Entry rule entryRuleVARIABLE_TYPE
entryRuleVARIABLE_TYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVARIABLE_TYPERule()); }
	iv_ruleVARIABLE_TYPE=ruleVARIABLE_TYPE
	{ $current=$iv_ruleVARIABLE_TYPE.current.getText(); }
	EOF;

// Rule VARIABLE_TYPE
ruleVARIABLE_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getIntKeyword_0());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getDoubleKeyword_1());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getStringKeyword_2());
		}
		    |
		kw='long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getLongKeyword_3());
		}
		    |
		kw='boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getBooleanKeyword_4());
		}
		    |
		kw='float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLE_TYPEAccess().getFloatKeyword_5());
		}
	)
;

// Entry rule entryRuleQN
entryRuleQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQNRule()); }
	iv_ruleQN=ruleQN
	{ $current=$iv_ruleQN.current.getText(); }
	EOF;

// Rule QN
ruleQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleAN
entryRuleAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getANRule()); }
	iv_ruleAN=ruleAN
	{ $current=$iv_ruleAN.current.getText(); }
	EOF;

// Rule AN
ruleAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getANAccess().getCommercialAtKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getANAccess().getIDTerminalRuleCall_1());
		}
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getANAccess().getHyphenMinusKeyword_2_0());
			}
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getANAccess().getIDTerminalRuleCall_2_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
