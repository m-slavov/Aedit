/*
 * generated by Xtext 2.12.0
 */
package org.aedit.scoping

import org.aedit.aedit.AeditPackage
import org.aedit.aedit.ChangeEnum
import org.aedit.aedit.ChangeSchema
import org.aedit.aedit.RemoveAnnotationFromField
import org.aedit.aedit.RemoveAnnotationFromSchema
import org.aedit.aedit.RemoveNameAnnotationFromField
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.resource.impl.AliasedEObjectDescription
import org.eclipse.xtext.scoping.impl.SimpleScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AeditScopeProvider extends AbstractAeditScopeProvider {

	override getScope(EObject context, EReference reference) {

		if (context.eContainer instanceof ChangeSchema || context.eContainer instanceof ChangeEnum) {
			if (reference == AeditPackage.Literals.RENAME_VARIABLE__VARIABLE ||
				reference == AeditPackage.Literals.REMOVE_VARIABLE__VARIABLE ||
				reference == AeditPackage.Literals.CHANGE_DEF_VALUE__FIELD ||
				reference == AeditPackage.Literals.CHANGE_TYPE__FIELD ||
				reference == AeditPackage.Literals.ADD_ANNOTATION_TO_FIELD__VARIABLE ||
				reference == AeditPackage.Literals.ADD_NAME_ANNOTATION_TO_FIELD__VARIABLE ||
				reference == AeditPackage.Literals.REMOVE_ANNOTATION_FROM_FIELD__VARIABLE ||
				reference == AeditPackage.Literals.REMOVE_NAME_ANNOTATION_FROM_FIELD__VARIABLE ||
				reference == AeditPackage.Literals.ADD_VALUE_TO_ARRAY__ARRAY ||
				reference == AeditPackage.Literals.REMOVE_ARRAY_VALUE__VARIABLE ||
				reference == AeditPackage.Literals.REMOVE_ARRAY_VALUE_AT_INDEX__ARRAY) {
					
				val scope = super.getScope(context, reference)
				val defs = scope.allElements.map [ d |
					if (d.name.segmentCount > 2) {
						new AliasedEObjectDescription(QualifiedName.create(d.name.segments.get(2)), d)
					} else if (d.name.segmentCount > 1) {
						new AliasedEObjectDescription(QualifiedName.create(d.name.segments.get(1)), d)
					} else {
						new AliasedEObjectDescription(QualifiedName.create(d.name.toString()), d)
					}
				].map([d|d as IEObjectDescription])
				return new SimpleScope(defs)
				
			} else if (reference == AeditPackage.Literals.REMOVE_ANNOTATION_FROM_FIELD__ANNOTATION_TO_REMOVE) {
				
				val splitRefNamesList = splitRefNames(context, reference)
				return new SimpleScope(splitRefNamesList)
				
			} else if (reference == AeditPackage.Literals.REMOVE_NAME_ANNOTATION_FROM_FIELD__ANNOTATION_TO_REMOVE) {
				
				val splitRefNamesList = splitRefNames(context, reference)
				return new SimpleScope(splitRefNamesList)
				
			}
		} else if (context instanceof RemoveAnnotationFromSchema) {
			if (reference == AeditPackage.Literals.REMOVE_ANNOTATION_FROM_SCHEMA__ANNOTATION_TO_REMOVE) {
				val splitRefNamesList = splitRefNames(context, reference)
				return new SimpleScope(splitRefNamesList)
			}
		}

		super.getScope(context, reference)
	}

	def splitRefNames(EObject context, EReference reference) {
		val scope = super.getScope(context, reference)
		val defs = scope.allElements.map [ d |
			if (d.name.segmentCount > 3) {
				new AliasedEObjectDescription(QualifiedName.create(d.name.segments.get(3).replace("@", "")), d)
			} else if (d.name.segmentCount > 2) {
				new AliasedEObjectDescription(QualifiedName.create(d.name.segments.get(2).replace("@", "")), d)
			} else if (d.name.segmentCount > 1) {
				new AliasedEObjectDescription(QualifiedName.create(d.name.segments.get(1).replace("@", "")), d)
			} else {
				new AliasedEObjectDescription(QualifiedName.create(d.name.toString().replace("@", "")), d)
			}
		].map([d|d as IEObjectDescription])
		return defs
	}
}
