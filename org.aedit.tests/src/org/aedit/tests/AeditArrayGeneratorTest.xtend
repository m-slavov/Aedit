/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import java.util.ArrayList
import java.util.List
import java.util.Map
import javax.inject.Provider
import org.aedit.generator.AeditGenerator
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.util.StringInputStream
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import avroclipse.avroIDL.AvroIDLFile
import avroclipse.avroIDL.BooleanValue
import avroclipse.avroIDL.CustomTypeLink
import avroclipse.avroIDL.EnumType
import avroclipse.avroIDL.FieldType
import avroclipse.avroIDL.FloatValue
import avroclipse.avroIDL.IntValue
import avroclipse.avroIDL.PrimativeTypeLink
import avroclipse.avroIDL.RecordType
import avroclipse.avroIDL.StringValue
import avroclipse.avroIDL.TypeDef
import avroclipse.avroIDL.Value
import avroclipse.avroIDL.ErrorType
import avroclipse.avroIDL.AnnotatedTypeLink
import avroclipse.avroIDL.ArrayFieldType
import avroclipse.avroIDL.Array

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditArrayGeneratorTest {

	@Inject AeditGenerator generator
	@Inject Provider<ResourceSet> rsp;

	@Test
	def testGetElements() {
		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					record Radar{
						int num;
					}
					
					enum Measures{
						Foo
					}
					
					error Err{
						int Foo;	
					}
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(elements.contains("NSRadar.Radar"))
		Assert.assertTrue(elements.contains("NSRadar.Radar.num"))
		Assert.assertTrue(elements.contains("NSRadar.Measures"))
		Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"))
		Assert.assertTrue(elements.contains("NSRadar.Err"))
		Assert.assertTrue(elements.contains("NSRadar.Err.Foo"))

	}

	@Test
	def testAddArray__WithoutValue() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add.at(0) array<string> «stringField» ;
							add.at(0) array<float> «floatField» ;
							add.at(0) array<boolean> «booleanField» ;
							add.at(0) array<long> «longField» ;
							add.at(0) array<double> «doubleField» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that all fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + booleanField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + floatField))

		// Assert that all fields are added in the order that is specified in the DSL
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), recordName, stringField))
		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), recordName, floatField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), recordName, booleanField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), recordName, longField))
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, doubleField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, floatField, "float"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, longField, "long"))

	}
	
	@Test
	def testAddArray__WithValues() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add.at(0) array<string> «stringField» = [Hello, World];
							add.at(0) array<float> «floatField» = [1,2];
							add.at(0) array<boolean> «booleanField» = [true,false];
							add.at(0) array<long> «longField» = [1,2];
							add.at(0) array<double> «doubleField» = [1.1, 2.2];
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that all fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + booleanField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + floatField))

		// Assert that all fields are added in the order that is specified in the DSL
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), recordName, stringField))
		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), recordName, floatField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), recordName, booleanField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), recordName, longField))
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, doubleField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, floatField, "float"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, longField, "long"))
		
		val strVal = newArrayList('Hello', 'World')
		val floatVal = newArrayList(1,2)
		val boolVal = newArrayList(true, false)
		val longVal = newArrayList(1, 2)
		val doubleVal = newArrayList(1.1f, 2.2f)
		
		Assert.assertArrayEquals(getArrayValues(generator.protocols.get(protocolName), recordName, stringField), strVal)
		Assert.assertArrayEquals(getArrayValues(generator.protocols.get(protocolName), recordName, floatField), floatVal)
		Assert.assertArrayEquals(getArrayValues(generator.protocols.get(protocolName), recordName, booleanField), boolVal)
		Assert.assertArrayEquals(getArrayValues(generator.protocols.get(protocolName), recordName, longField), longVal)
		Assert.assertArrayEquals(getArrayValues(generator.protocols.get(protocolName), recordName, doubleField), doubleVal)
	
	}
	
	@Test
	def testRemoveArrayValue__Int() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							remove_value num => 1;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<int> num = [1,2];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(!getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(1))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(2))
	
	}
	
	@Test
	def testRemoveArrayValue__String() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							remove_value num => foo;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<string> num = ["foo","foo1"];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(!getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains("foo"))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains("foo1"))
	
	}
	
	@Test
	def testRemoveArrayValue__Double() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							remove_value num => 1.1;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<double> num = [1.1 , 2.2];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(!getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(1.1f))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(2.2f))
	
	}
	
	@Test
	def testRemoveArrayValueAtIndex() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							remove_value.at(0) num;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<double> num = [1.1 , 2.2];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(!getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(1.1f))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(2.2f))
	
	}
	
	@Test
	def testAddArrayValue__Int() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add_value.at(0) num => 5;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<int> num = [1 , 2];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(5))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(1))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(2))
	
	}
	
	@Test
	def testAddArrayValue__Double() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add_value.at(0) num => 5.5;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<double> num = [1.1 , 2.2];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(5.5f))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(1.1f))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains(2.2f))
	
	}
	
		@Test
	def testAddArrayValue__String() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add_value.at(0) num => Foo;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						array<double> num = ["Hello" , "World"];
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains("Foo"))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains("Hello"))
		Assert.assertTrue(getArrayValues(generator.protocols.get(protocolName), recordName, "num").contains("World"))
	
	}

	// Helper methods
	def getElements(Map<String, AvroIDLFile> protocols) {
		val List<String> schemasAndFields = new ArrayList<String>()
		protocols.forEach [ p1, p2 |
			for (typeDef : p2.elements.filter(TypeDef)) {
				var currentSchema = typeDef.type

				if (currentSchema instanceof EnumType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (literal : currentSchema.literals) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + literal)
					}
				} else if (currentSchema instanceof RecordType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (field : currentSchema.fields) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + field.name)
					}
				} else if (currentSchema instanceof ErrorType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (field : currentSchema.fields) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + field.name)
					}
				}

			}
		]

		return schemasAndFields
	}

	def getSchemaPosition(AvroIDLFile avdl, String schemaName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				return avdl.elements.indexOf(typeDef)
			}
		}
	}

	def getSchemaType(AvroIDLFile avdl, String schemaName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				return currentSchema
			}
		}
	}

	def getFieldPosition(AvroIDLFile avdl, String schemaName, String fieldName) {

		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {

				if (currentSchema instanceof ErrorType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return (currentSchema as ErrorType).fields.indexOf(field)
						}
					}
				} else if (currentSchema instanceof RecordType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return (currentSchema as RecordType).fields.indexOf(field)
						}
					}
				}
			}
		}

	}

	def getConstantValuePosition(AvroIDLFile avdl, String schemaName, String constantValName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				if (currentSchema instanceof EnumType) {
					return currentSchema.literals.indexOf(constantValName)
				}
			}
		}
	}

	def getFieldType(AvroIDLFile avdl, String schemaName, String fieldName, String expectedType) {
		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type

			if (currentSchema.name.equals(schemaName)) {

				if (currentSchema instanceof RecordType) {
					for (field : currentSchema.fields) {
						
						if (field.name.equals(fieldName)) {

							val fieldType = field.type
							
							if (fieldType instanceof ArrayFieldType) {
								return getArrayType(fieldType.type).equals(expectedType)
							}
							
							return getType(field.type).equals(expectedType)

						}

					}
				} else if (currentSchema instanceof ErrorType) {
					for (field : currentSchema.fields) {

						if (field.name.equals(fieldName)) {
							
							val fieldType = field.type
							
							if (fieldType instanceof ArrayFieldType) {
								return getArrayType(fieldType.type).equals(expectedType)
							}
							
							return getType(field.type).equals(expectedType)

						}

					}
				}

			}
		}
	}
	
	def getArrayType(AnnotatedTypeLink annotatedTypeLink){
		if (annotatedTypeLink.type instanceof ArrayFieldType){
			getArrayType((annotatedTypeLink.type as ArrayFieldType).type)
		}
		return getType(annotatedTypeLink.type)
	}

	def getType(FieldType fieldType) {
		if (fieldType instanceof PrimativeTypeLink) {
			return fieldType.target
		} else if (fieldType instanceof CustomTypeLink) {
			if (fieldType.target instanceof RecordType) {
				return (fieldType.target as RecordType).name
			} else if (fieldType.target instanceof EnumType) {
				return (fieldType.target as EnumType).name
			} else if (fieldType.target instanceof ErrorType) {
				return (fieldType.target as ErrorType).name
			}
		}
	}

	def getFieldValue(AvroIDLFile avdl, String schemaName, String fieldName, Object expectedValue) {
		
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				if (currentSchema instanceof RecordType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default).equals(expectedValue)
						}
					}
				} else if (currentSchema instanceof ErrorType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default).equals(expectedValue)
						}
					}
				}

			}
		}
		
	}
	
	def ArrayList<Object> getArrayValues(AvroIDLFile avdl, String schemaName, String fieldName) {
		
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				if (currentSchema instanceof RecordType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default) as ArrayList<Object>
						}
					}
				} else if (currentSchema instanceof ErrorType) {
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default) as ArrayList<Object>
						}
					}
				}

			}
		}
		
	}

	def getDefValue(Value value) {

		if (value instanceof IntValue) {
			return value.^val
		} else if (value instanceof StringValue) {
			return value.^val
		} else if (value instanceof BooleanValue) {
			return value.^val
		} else if (value instanceof FloatValue) {
			return value.^val
		} else if (value instanceof Array){
			val values = value.values.value
			
			val valList = new ArrayList<Object>
			
			for (arrVal : values){
				if (arrVal instanceof Value){
					valList.add(getDefValue(arrVal))
				}
			}
			
			return valList
		}

	}

}
