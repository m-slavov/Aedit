/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import javax.inject.Provider
import org.aedit.aedit.AeditPackage
import org.aedit.aedit.Model
import org.aedit.validation.ErrorCodes
import org.aedit.validation.ErrorMessages
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.util.StringInputStream
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditAnnotationValidatorTest {

	@Inject extension ValidationTestHelper
	@Inject extension ParseHelper<Model>

	@Inject
	Provider<ResourceSet> rsp;

	//Add annotation to schema
	@Test
	def void testAddAnnotationToSchema__TypeMissmatch() {

		parse('''
			rule Rule1 {
						add.annot enum SRF.Burst_parameters => @foo(foo);
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addAnnotationToSchema, ErrorCodes.ADD_ANNOTATION_TO_SCHEMA, ErrorMessages.TYPE_MISSMATCH)

	}
	
	@Test
	def void testAddAnnotationsToSchema__Duplicate(){
		
		parse('''
			rule Rule1 {
						add.annot record SRF.Burst_parameters => @foo(foo);
						add.annot record SRF.Burst_parameters => @foo(foo);
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addAnnotationToSchema, ErrorCodes.DUPLICATE_ANNOTATION, ErrorMessages.DUPLICATE_ANNOTATION)
		
	}
	
	@Test
	def void testAddAnnotationsToSchema__NotDuplicate(){
		parse('''
			rule Rule1 {
						add.annot record SRF.Burst_parameters => @foo(foo);
						add.annot record SRF.Burst_parameters => @foo1(foo);
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ }
					
				}''', "UTF-8"), null)
			]
		]).assertNoError(ErrorCodes.ADD_ANNOTATION_TO_SCHEMA)
	}
	
	//Add annotation to field
	@Test
	def void testAddAnnotationToField__IncorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.annot seconds => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
					record Timing {
						int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addAnnotationToField, ErrorCodes.ADD_ANNOTATION_TO_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA)
		
	}
	
	@Test
	def void testAddAnnotationToField__CorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.annot burst => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
					record Timing {
						int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def void testAddAnnotationToField__DuplicateAnnotation(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.annot burst => @foo(foo);
							add.annot burst => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addAnnotationToField, ErrorCodes.DUPLICATE_ANNOTATION, ErrorMessages.DUPLICATE_ANNOTATION)
	}
	
	@Test
	def void testAddAnnotationToField__DuplicateAnnotationII(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.annot burst => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addAnnotationToField, ErrorCodes.DUPLICATE_ANNOTATION, ErrorMessages.DUPLICATE_ANNOTATION)
	}
	
	@Test
	def void testAddAnnotationToField__UniqueAnnotation(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.annot burst => @uniqueFoo(foo);
							add.annot burst => @uniqueFoo1(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
	}
	
	//Add name annotation to field
	
	@Test
	def void testAddNameAnnotationToField__IncorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.name_annot seconds => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
					record Timing {
						int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addNameAnnotationToField, ErrorCodes.ADD_NAME_ANNOTATION_TO_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA)
		
	}
	
	@Test
	def void testAddNameAnnotationToField__CorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.name_annot burst => @correctField(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
					record Timing {
						int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def void testAddNameAnnotationToField__DuplicateAnnotation(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.name_annot burst => @foo(foo);
							add.name_annot burst => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addNameAnnotationToField, ErrorCodes.DUPLICATE_ANNOTATION, ErrorMessages.DUPLICATE_ANNOTATION)
	}
	
	@Test
	def void testAddNameAnnotationToField__DuplicateAnnotationII(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.name_annot burst => @foo(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addNameAnnotationToField, ErrorCodes.DUPLICATE_ANNOTATION, ErrorMessages.DUPLICATE_ANNOTATION)
	}
	
	@Test
	def void testAddNameAnnotationToField__UniqueAnnotation(){
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							add.name_annot burst => @uniqueFoo(foo);
							add.name_annot burst => @uniqueFoo1(foo);
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int burst;
					}
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
	}
	
	//Test remove annotation from field
	
	@Test
	def void testRemoveAnnotationFromField__IncorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot seconds => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
					record Timing {
						@foo("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeAnnotationFromField, ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA)
		
	}
	
	@Test
	def void testRemoveAnnotationFromField__CorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot burst => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
					record Timing {
						@foo("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def void testRemoveAnnotationFromField__AnnotationNotFound(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot burst => foo1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
					record Timing {
						@foo1("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeAnnotationFromField, ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.ANNOTATION_NOT_IN_FIELD)
		
	}
	
	@Test
	def void testRemoveAnnotationFromField__NoErrors(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot burst => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
					record Timing {
						@foo("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def void testRemoveAnnotationFromField__RemoveTwice(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot burst => foo;
							remove.annot burst => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") int burst;
					}
					record Timing {
						@foo("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeAnnotationFromField, ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.DELETED_ANNOTATION)
		
	}
	
	@Test
	def void testRemoveAnnotationFromField__RemoveDifferentAnnotations(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.annot burst => foo;
							remove.annot burst => foo1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						@foo("foo") @foo1("foo") int burst;
					}
					record Timing {
						@foo("foo") int seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	//Test remove name annotation from field
	
	@Test
	def void testRemoveNameAnnotationFromField__IncorrectField(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.name_annot seconds => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") burst;
					}
					record Timing {
						int @foo("foo") seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeNameAnnotationFromField, ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA)
		
	}
	
	@Test
	def void testRemoveNameAnnotationFromField__NoErrors(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.name_annot burst => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") burst;
					}
					record Timing {
						int @foo("foo") seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def void testRemoveNameAnnotationFromField__NameAnnotationNotFound(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.name_annot burst => foo1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") burst;
					}
					record Timing {
						int @foo("foo") seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeNameAnnotationFromField, ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.ANNOTATION_NOT_IN_FIELD)
		
	}
	
	@Test
	def void testRemoveNameAnnotationFromField__RemoveNameAnnotationTwice(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.name_annot burst => foo;
							remove.name_annot burst => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") burst;
					}
					record Timing {
						int @foo("foo") seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeNameAnnotationFromField, ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.DELETED_ANNOTATION)
		
	}
	
	@Test
	def void testRemoveNameAnnotationFromField__RemoveDifferentNameAnnotations(){
		
		parse('''
			rule Rule1 {
						change record SRF.Burst_parameters {
							remove.name_annot burst => foo;
							remove.name_annot burst => foo1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('SRF')
				protocol SRF{
					record Burst_parameters{ 
						int @foo("foo") @foo1("foo") burst;
					}
					record Timing {
						int @foo("foo")  seconds;	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertNoErrors
		
	}
	
	@Test
	def testRemoveAnnotationFromSchema__SchemaTypeMissmatch(){
		parse('''
			rule Rule1 {
					remove.annot error house.Garage => foo;
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					@foo("foo")
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeAnnotationFromSchema, ErrorCodes.REMOVE_ANNOTATION_FROM_SCHEMA, ErrorMessages.TYPE_MISSMATCH)
	}
	
	@Test
	def testRemoveAnnotationFromSchema__MissingAnnotation(){
		parse('''
			rule Rule1 {
					remove.annot record house.Garage => foo1;
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					@foo("foo")
					record Garage{
						int num;
					}
					
					@foo1("foo")
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeAnnotationFromSchema, ErrorCodes.REMOVE_ANNOTATION_FROM_SCHEMA, ErrorMessages.ANNOTATION_NOT_IN_SCHEMA)
	}
	
	def private assertMethod(Model m, EClass model, String code, String message) {
		m.assertError(
			model,
			code,
			message
		)
	}
}
