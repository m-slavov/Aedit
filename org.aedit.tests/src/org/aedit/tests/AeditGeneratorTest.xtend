/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import java.util.ArrayList
import java.util.List
import java.util.Map
import javax.inject.Provider
import org.aedit.generator.AeditGenerator
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.util.StringInputStream
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import avroclipse.avroIDL.AvroIDLFile
import avroclipse.avroIDL.BooleanValue
import avroclipse.avroIDL.CustomTypeLink
import avroclipse.avroIDL.EnumType
import avroclipse.avroIDL.FieldType
import avroclipse.avroIDL.FloatValue
import avroclipse.avroIDL.IntValue
import avroclipse.avroIDL.PrimativeTypeLink
import avroclipse.avroIDL.RecordType
import avroclipse.avroIDL.StringValue
import avroclipse.avroIDL.TypeDef
import avroclipse.avroIDL.Value
import avroclipse.avroIDL.ErrorType

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditGeneratorTest {

	@Inject AeditGenerator generator
	@Inject Provider<ResourceSet> rsp;

	@Test
	def testGetElements() {
		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					record Radar{
						int num;
					}
					
					enum Measures{
						Foo
					}
					
					error Err{
						int Foo;	
					}
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(elements.contains("NSRadar.Radar"))
		Assert.assertTrue(elements.contains("NSRadar.Radar.num"))
		Assert.assertTrue(elements.contains("NSRadar.Measures"))
		Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"))
		Assert.assertTrue(elements.contains("NSRadar.Err"))
		Assert.assertTrue(elements.contains("NSRadar.Err.Foo"))
		
	}

	@Test
	def testRemove__Record() {

		val toRemove = "NSRadar.Radar"
		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						remove record «toRemove»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					record Radar{
						int num;
					}
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the record is removed
		Assert.assertTrue(!elements.contains(toRemove))
	}

	@Test
	def testRemove__Enum() {
		val toRemove = "NSRadar.Measures"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						remove enum «toRemove»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the enum is removed
		Assert.assertTrue(!elements.contains(toRemove))
	}
	
	@Test
	def testRemove__Error() {
		val toRemove = "NSRadar.Measures"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						remove error «toRemove»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Measures{
						int Foo;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the enum is removed
		Assert.assertTrue(!elements.contains(toRemove))
	}

	@Test
	def testRename__Record() {

		val protocolName = "NSRadar"
		val toRename = protocolName + "." + "Radar"
		val newName = "NewRadar"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						rename record «toRename» => «newName»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Radar{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that a record with the old name does not exist
		Assert.assertTrue(!elements.contains(toRename))
		// Assert that a reocrd with the new name has been added
		Assert.assertTrue(elements.contains(protocolName + "." + newName))
	}

	@Test
	def testRename__Enum() {

		val protocolName = "NSRadar"
		val toRename = protocolName + "." + "Measures"
		val newName = "NewMeasures"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						rename enum «toRename» => «newName»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the enum with the old name does not exist
		Assert.assertTrue(!elements.contains(toRename))
		// Assert that the enum with the new name is added
		Assert.assertTrue(elements.contains(protocolName + "." + newName))
	}
	
	@Test
	def testRename__Error() {

		val protocolName = "NSRadar"
		val toRename = protocolName + "." + "Radar"
		val newName = "NewRadar"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						rename error «toRename» => «newName»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Radar{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that a record with the old name does not exist
		Assert.assertTrue(!elements.contains(toRename))
		// Assert that a reocrd with the new name has been added
		Assert.assertTrue(elements.contains(protocolName + "." + newName))
	}

	@Test
	def testRemoveField__Record() {

		val recordName = "NSRadar.Record"
		val fieldToRemove = "num"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «recordName» {
							remove «fieldToRemove»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the field is removed
		Assert.assertTrue(!elements.contains(recordName + '.' + fieldToRemove))
		// Assert that the other field is not deleted
		Assert.assertTrue(elements.contains(recordName + '.' + "name"))
	}

	@Test
	def testRemoveEnumConstant__Enum() {

		val protocolName = "NSRadar"
		val enumName = "Measures"
		val constantToRemove = "Foo"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change enum «protocolName».«enumName» {
							remove «constantToRemove»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo,
						Other
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the constant is removed
		Assert.assertTrue(!elements.contains(protocolName + '.' + enumName + '.' + constantToRemove))
		// Assert that the other constant is not removed
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + "Other"))

	}
	
	@Test
	def testRemoveField__Error() {

		val errorName = "NSRadar.Record"
		val fieldToRemove = "num"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change error «errorName» {
							remove «fieldToRemove»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the field is removed
		Assert.assertTrue(!elements.contains(errorName + '.' + fieldToRemove))
		// Assert that the other field is not deleted
		Assert.assertTrue(elements.contains(errorName + '.' + "name"))
	}
	
	@Test
	def testRenameField__Record() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val fieldToRename1 = "num"
		val fieldToRename2 = "seconds"

		val newName1 = "newNum"
		val newName2 = "seconds1"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							rename «fieldToRename1» => «newName1»
							rename «fieldToRename2» => «newName2»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						int seconds = 1;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that fields with the old names no longer exist
		Assert.assertTrue(!elements.contains(protocolName + '.' + recordName + '.' + fieldToRename1))
		Assert.assertTrue(!elements.contains(protocolName + '.' + recordName + '.' + fieldToRename2))
		// Assert that the fields with the new names are added
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + newName1))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + newName2))
		// Assert that the type remains unchanged
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, newName1, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, newName2, "int"))
		// Assert that the values remain unchanged
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, newName2, 1))

	}
	
	@Test
	def testRenameField__Error() {

		val protocolName = "NSRadar"
		val errorName = "Record"

		val fieldToRename1 = "num"
		val fieldToRename2 = "seconds"

		val newName1 = "newNum"
		val newName2 = "seconds1"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change error «protocolName».«errorName» {
							rename «fieldToRename1» => «newName1»
							rename «fieldToRename2» => «newName2»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Record{
						int num;
						int seconds = 1;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that fields with the old names no longer exist
		Assert.assertTrue(!elements.contains(protocolName + '.' + errorName + '.' + fieldToRename1))
		Assert.assertTrue(!elements.contains(protocolName + '.' + errorName + '.' + fieldToRename2))
		// Assert that the fields with the new names are added
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + newName1))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + newName2))
		// Assert that the type remains unchanged
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, newName1, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, newName2, "int"))
		// Assert that the values remain unchanged
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, newName2, 1))

	}

	@Test
	def testRenameEnumConstant__Enum() {

		val protocolName = "NSRadar"
		val enumName = "Measures"
		val constantToRename = "Foo"
		val newConstant = "NewFoo"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change enum «protocolName».«enumName» {
							rename «constantToRename» => «newConstant»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						M1, Foo, M2
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the constant with the old name does not exists
		Assert.assertTrue(!elements.contains(protocolName + '.' + enumName + '.' + constantToRename))
		// Assert that the constant with the new name is added
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + newConstant))
		// Assert that the other constants are with the same names and positions
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + "M1"))
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + "M2"))
		Assert.assertEquals(0, getConstantValuePosition(generator.protocols.get(protocolName), enumName, "M1"))
		Assert.assertEquals(2, getConstantValuePosition(generator.protocols.get(protocolName), enumName, "M2"))

	}

	@Test
	def testAddFeildWithoutValue__Record() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add.at(0) int «intField» ;
							add.at(0) string «stringField» ;
							add.at(0) float «floatField» ;
							add.at(0) boolean «booleanField» ;
							add.at(0) long «longField» ;
							add.at(0) double «doubleField» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that all fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + booleanField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + floatField))

		// Assert that all fields are added in the order that is specified in the DSL
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), recordName, intField))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), recordName, stringField))
		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), recordName, floatField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), recordName, booleanField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), recordName, longField))
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, doubleField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, floatField, "float"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, longField, "long"))

	}
	
	@Test
	def testAddFeildWithoutValue__Error() {

		val protocolName = "NSRadar"
		val errorName = "Record"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change error «protocolName».«errorName» {
							add.at(0) int «intField» ;
							add.at(0) string «stringField» ;
							add.at(0) float «floatField» ;
							add.at(0) boolean «booleanField» ;
							add.at(0) long «longField» ;
							add.at(0) double «doubleField» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that all fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + booleanField))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + errorName + '.' + floatField))

		// Assert that all fields are added in the order that is specified in the DSL
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), errorName, intField))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), errorName, stringField))
		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), errorName, floatField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), errorName, booleanField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), errorName, longField))
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), errorName, doubleField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, floatField, "float"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), errorName, longField, "long"))

	}
	
	@Test
	def testAddFeild__CustomField() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val customField = "customVal";

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add.at(0) NSRadar.CustomRecord «customField» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
					record CustomRecord{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that all fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + recordName + '.' + customField))

		// Assert that all fields are added in the order that is specified in the DSL
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, customField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, customField, "CustomRecord"))

	}
	
	@Test
	def testAddFeildWithValue__Record() {

		val protocolName = "NSRadar"
		val recordName = "Record"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField1 = "boolVal1";
		val booleanField2 = "boolVal2";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val intValue = 1
		val stringValue = "HelloWorld"
		val float floatValue = 99.9f
		val booleanValue1 = false
		val booleanValue2 = true
		val longValue = 10000
		val float doubleValue = 66.6f

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName» {
							add.at(0) int «intField» = «intValue» ;
							add.at(0) string «stringField» = «stringValue» ;
							add.at(0) float «floatField» = «floatValue» ;
							add.at(0) boolean «booleanField1» = «booleanValue1» ;
							add.at(0) boolean «booleanField2» = «booleanValue2» ;
							add.at(0) long «longField» = «longValue» ;
							add.at(0) double «doubleField» = «doubleValue» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);

		// Assert that the correct values are assigned
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, intField, intValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, doubleField, doubleValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, longField, longValue))

		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), recordName, booleanField1, booleanValue1))
		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), recordName, booleanField2, booleanValue2))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, stringField, stringValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, floatField, floatValue))
	}
	
	@Test
	def testAddFeildWithValue__Error() {

		val protocolName = "NSRadar"
		val errorName = "Record"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField1 = "boolVal1";
		val booleanField2 = "boolVal2";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val intValue = 1
		val stringValue = "HelloWorld"
		val float floatValue = 99.9f
		val booleanValue1 = false
		val booleanValue2 = true
		val longValue = 10000
		val float doubleValue = 66.6f

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change error «protocolName».«errorName» {
							add.at(0) int «intField» = «intValue» ;
							add.at(0) string «stringField» = «stringValue» ;
							add.at(0) float «floatField» = «floatValue» ;
							add.at(0) boolean «booleanField1» = «booleanValue1» ;
							add.at(0) boolean «booleanField2» = «booleanValue2» ;
							add.at(0) long «longField» = «longValue» ;
							add.at(0) double «doubleField» = «doubleValue» ;
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					error Record{
						int num;
						string name;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);

		// Assert that the correct values are assigned
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, intField, intValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, doubleField, doubleValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, longField, longValue))

		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), errorName, booleanField1, booleanValue1))
		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), errorName, booleanField2, booleanValue2))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, stringField, stringValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), errorName, floatField, floatValue))
	}

	@Test
	def testAddEnumConstant__Enum() {

		val protocolName = "NSRadar"
		val enumName = "Measures"
		val constantToAdd = "WIDTH"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change enum «protocolName».«enumName» {
							add.at(0) «constantToAdd»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						LENGTH
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		//Assert that the constant is added
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + constantToAdd))
		Assert.assertTrue(elements.contains(protocolName + '.' + enumName + '.' + "LENGTH"))

		//Assert that the constants have the correct indexes
		Assert.assertEquals(0, getConstantValuePosition(generator.protocols.get(protocolName), enumName, constantToAdd))
		Assert.assertEquals(1, getConstantValuePosition(generator.protocols.get(protocolName), enumName, "LENGTH"))

	}

	@Test
	def testAdd__Record() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(1) record «protocolName».«newRecordName»{}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))
		// Assert that the schema has been added to the correct position
		Assert.assertEquals(1, getSchemaPosition(generator.protocols.get(protocolName), newRecordName))
		//Assert that the schema has the correct type
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newRecordName) instanceof RecordType)
	}
	
		@Test
	def testAdd__Error() {

		val protocolName = "NSRadar"
		val newErrorName = "Sensor"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(1) error «protocolName».«newErrorName»{}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName))
		// Assert that the schema has been added to the correct position
		Assert.assertEquals(1, getSchemaPosition(generator.protocols.get(protocolName), newErrorName))
		//Assert that the schema has the correct type
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newErrorName) instanceof ErrorType)
	}

	@Test
	def testAdd__Enum() {

		val protocolName = "NSRadar"
		val newEnumName = "Range"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) enum «protocolName».«newEnumName»{}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { Foo1 }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newEnumName))
		// Assert that the schema has been added to the correct position
		Assert.assertEquals(2, getSchemaPosition(generator.protocols.get(protocolName), newEnumName))
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newEnumName) instanceof EnumType)
	}

	@Test
	def testAdd__RecordWithFieldsWithoutValues() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) record «protocolName».«newRecordName»{
							int «intField»
							string «stringField»
							float «floatField»
							boolean «booleanField»
							double «doubleField»
							long «longField»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo {}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + floatField))

		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + booleanField))
		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newRecordName, intField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newRecordName, stringField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), newRecordName, floatField))

		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), newRecordName, booleanField))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), newRecordName, doubleField))
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), newRecordName, longField))
		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, floatField, "float"))

		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, longField, "long"))
		
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newRecordName) instanceof RecordType)
	}
	
	@Test
	def testAdd__ErrorWithFieldsWithoutValues() {

		val protocolName = "NSRadar"
		val newErrorName = "Sensor"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField = "boolVal";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) error «protocolName».«newErrorName»{
							int «intField»
							string «stringField»
							float «floatField»
							boolean «booleanField»
							double «doubleField»
							long «longField»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo {}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + floatField))

		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + booleanField))
		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newErrorName, intField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newErrorName, stringField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), newErrorName, floatField))

		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), newErrorName, booleanField))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), newErrorName, doubleField))
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), newErrorName, longField))
		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, floatField, "float"))

		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, booleanField, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, longField, "long"))
		
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newErrorName) instanceof ErrorType)
		
	}

	@Test
	def testAdd__RecordWithCustomTypeFields() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val customTypeField1 = "customValRecord"
		val customTypeField2 = "customValEnum"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) record «protocolName».«newRecordName»{
							NSRadar.RadarOne «customTypeField1»;
							NSRadar.Foo «customTypeField2»;
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { FOO1 }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + customTypeField1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + customTypeField2))

		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newRecordName, customTypeField1))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newRecordName, customTypeField2))

		// Assert that the fields are of the correct type
		Assert.assertTrue(
			getFieldType(generator.protocols.get(protocolName), newRecordName, customTypeField1, "RadarOne"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, customTypeField2, "Foo"))
		
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newRecordName) instanceof RecordType)
		
	}
	
	@Test
	def testAdd__ErrorWithCustomTypeFields() {

		val protocolName = "NSRadar"
		val newErrorName = "Sensor"

		val customTypeField1 = "customValRecord"
		val customTypeField2 = "customValEnum"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) error «protocolName».«newErrorName»{
							NSRadar.RadarOne «customTypeField1»;
							NSRadar.Foo «customTypeField2»;
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { FOO1 }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + customTypeField1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + customTypeField2))

		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newErrorName, customTypeField1))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newErrorName, customTypeField2))

		// Assert that the fields are of the correct type
		Assert.assertTrue(
			getFieldType(generator.protocols.get(protocolName), newErrorName, customTypeField1, "RadarOne"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, customTypeField2, "Foo"))
		
		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newErrorName) instanceof ErrorType)
		
	}

	@Test
	def testAdd__RecordWithFieldsWithValues() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField1 = "boolVal1";
		val booleanField2 = "boolVal2";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val intValue = 1
		val stringValue = "HelloWorld"
		val float floatValue = 99.9f
		val booleanValue1 = false
		val booleanValue2 = true
		val longValue = 10000
		val float doubleValue = 66.6f

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) record «protocolName».«newRecordName»{
							int «intField» = «intValue»
							string «stringField» = «stringValue»
							float «floatField» = «floatValue»
							boolean «booleanField1» = «booleanValue1»
							boolean «booleanField2» = «booleanValue2»
							double «doubleField» = «doubleValue»
							long «longField» = «longValue»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + floatField))

		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + booleanField1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + booleanField2))

		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newRecordName, intField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newRecordName, stringField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), newRecordName, floatField))

		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), newRecordName, booleanField1))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), newRecordName, booleanField2))
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), newRecordName, doubleField))
		Assert.assertEquals(6, getFieldPosition(generator.protocols.get(protocolName), newRecordName, longField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, floatField, "float"))

		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, booleanField1, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, booleanField2, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, longField, "long"))

		// Assert that the correct values are assigned
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, intField, intValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, doubleField, doubleValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, longField, longValue))

		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), newRecordName, booleanField1, booleanValue1))
		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), newRecordName, booleanField2, booleanValue2))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, stringField, stringValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, floatField, floatValue))

		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newRecordName) instanceof RecordType)
		
	}
	
	@Test
	def testAdd__ErrorWithFieldsWithValues() {

		val protocolName = "NSRadar"
		val newErrorName = "Sensor"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField1 = "boolVal1";
		val booleanField2 = "boolVal2";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val intValue = 1
		val stringValue = "HelloWorld"
		val float floatValue = 99.9f
		val booleanValue1 = false
		val booleanValue2 = true
		val longValue = 10000
		val float doubleValue = 66.6f

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) error «protocolName».«newErrorName»{
							int «intField» = «intValue»
							string «stringField» = «stringValue»
							float «floatField» = «floatValue»
							boolean «booleanField1» = «booleanValue1»
							boolean «booleanField2» = «booleanValue2»
							double «doubleField» = «doubleValue»
							long «longField» = «longValue»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + intField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + stringField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + floatField))

		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + doubleField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + longField))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + booleanField1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newErrorName + '.' + booleanField2))

		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newErrorName, intField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newErrorName, stringField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), newErrorName, floatField))

		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), newErrorName, booleanField1))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), newErrorName, booleanField2))
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), newErrorName, doubleField))
		Assert.assertEquals(6, getFieldPosition(generator.protocols.get(protocolName), newErrorName, longField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, intField, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, stringField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, floatField, "float"))

		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, doubleField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, booleanField1, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, booleanField2, "boolean"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newErrorName, longField, "long"))

		// Assert that the correct values are assigned
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newErrorName, intField, intValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newErrorName, doubleField, doubleValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newErrorName, longField, longValue))

		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), newErrorName, booleanField1, booleanValue1))
		Assert.assertTrue(
			getFieldValue(generator.protocols.get(protocolName), newErrorName, booleanField2, booleanValue2))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newErrorName, stringField, stringValue))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newErrorName, floatField, floatValue))

		Assert.assertTrue(getSchemaType(generator.protocols.get(protocolName), newErrorName) instanceof ErrorType)
		
	}

	@Test
	def testAdd__EnumWithConstants() {
		val protocolName = "NSRadar"
		val newEnumName = "Range"

		val constant1 = "WIDE"
		val constant2 = "SHORT"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) enum «protocolName».«newEnumName»{
							«constant1», «constant2»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo { Foo1 }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newEnumName))
		Assert.assertTrue(elements.contains(protocolName + '.' + newEnumName + '.' + constant1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newEnumName + '.' + constant2))

		// Assert that the schema has been added to the correct position
		Assert.assertEquals(2, getSchemaPosition(generator.protocols.get(protocolName), newEnumName))

		// Assert that the constants have been added to the correct positions
		Assert.assertEquals(0, getConstantValuePosition(generator.protocols.get(protocolName), newEnumName, constant1))
		Assert.assertEquals(1, getConstantValuePosition(generator.protocols.get(protocolName), newEnumName, constant2))
	}

	@Test
	def testChangeDefType__PrimitiveValue_NoValues(){
		val protocolName = "NSRadar"
		val recordName = "RadarOne"

		val intField = "intVal";
		val stringField = "strVal";
		val floatField = "floatVal";
		val booleanField1 = "boolVal1";
		val longField = "longVal";
		val doubleField = "doubleVal"

		val intType = "int"
		val stringType = "string"
		val floatType = "float"
		val booleanType = "boolean"
		val longType = "long"
		val doubleType = "double"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName»{
							set_type «intField» => «longType»
							set_type «stringField» => «doubleType»
							set_type «floatField» => «booleanType»
							set_type «booleanField1» => «floatType»
							set_type «doubleField» => «stringType»
							set_type «longField» => «intType»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{
						int «intField»;
						string «stringField»;
						float «floatField»;
						boolean «booleanField1»;
						double «doubleField»;
						long «longField»;
					}
					enum Foo { }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]
		
		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);

		// Assert that the fields are still in the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, intField))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), recordName, stringField))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), recordName, floatField))

		Assert.assertEquals(3, getFieldPosition(generator.protocols.get(protocolName), recordName, booleanField1))
		Assert.assertEquals(4, getFieldPosition(generator.protocols.get(protocolName), recordName, doubleField))
		Assert.assertEquals(5, getFieldPosition(generator.protocols.get(protocolName), recordName, longField))
		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, intField, "long"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, stringField, "double"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, floatField, "boolean"))

		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, doubleField, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, booleanField1, "float"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, longField, "int"))
	}
	
	@Test
	def testChangeDefType__PrimitiveValue_WithValues(){
		val protocolName = "NSRadar"
		val recordName = "RadarOne"

		val intField = "intVal";
		val doubleType = "double"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName»{
							set_type «intField» => «doubleType»
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{
						int «intField» = 1;
					}
					enum Foo { }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]
		
		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);

		// Assert that the fields are still in the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, intField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), recordName, intField, "double"))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, intField, 1))
	}
	
	@Test
	def testChangeDefValue(){
		val protocolName = "NSRadar"
		val recordName = "RadarOne"

		val intField = "intVal";
		val doubleType = "double"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «protocolName».«recordName»{
							set_val «intField» => 55;
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{
						int «intField» = 1;
					}
					enum Foo { }
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]
		
		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);

		// Assert that the fields are still in the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), recordName, intField))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), recordName, intField, 55))
	}
	
	

	//Helper methods
	def getElements(Map<String, AvroIDLFile> protocols) {
		val List<String> schemasAndFields = new ArrayList<String>()
		protocols.forEach [ p1, p2 |
			for (typeDef : p2.elements.filter(TypeDef)) {
				var currentSchema = typeDef.type

				if (currentSchema instanceof EnumType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (literal : currentSchema.literals) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + literal)
					}
				} else if (currentSchema instanceof RecordType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (field : currentSchema.fields) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + field.name)
					}
				} else if (currentSchema instanceof ErrorType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (field : currentSchema.fields) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + field.name)
					}
				}

			}
		]

		return schemasAndFields
	}

	def getSchemaPosition(AvroIDLFile avdl, String schemaName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				return avdl.elements.indexOf(typeDef)
			}
		}
	}
	
	def getSchemaType(AvroIDLFile avdl, String schemaName){
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				return currentSchema
			}
		}
	}

	def getFieldPosition(AvroIDLFile avdl, String schemaName, String fieldName) {

		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				
				if (currentSchema instanceof ErrorType){
					for (field : currentSchema.fields) {
					if (field.name.equals(fieldName)) {
							return (currentSchema as ErrorType).fields.indexOf(field)
						}
					}
				} else if (currentSchema instanceof RecordType){
					for (field : currentSchema.fields) {
					if (field.name.equals(fieldName)) {
							return (currentSchema as RecordType).fields.indexOf(field)
						}
					}
				}
			}
		}

	}

	def getConstantValuePosition(AvroIDLFile avdl, String schemaName, String constantValName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				if (currentSchema instanceof EnumType) {
					return currentSchema.literals.indexOf(constantValName)
				}
			}
		}
	}

	def getFieldType(AvroIDLFile avdl, String schemaName, String fieldName, String expectedType) {
		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type

			if (currentSchema.name.equals(schemaName)) {
				
				if (currentSchema instanceof RecordType){
					for (field : currentSchema.fields) {

					if (field.name.equals(fieldName)) {

						return getType(field.type).equals(expectedType)

					}

				}
				} else if (currentSchema instanceof ErrorType){
					for (field : currentSchema.fields) {

					if (field.name.equals(fieldName)) {

						return getType(field.type).equals(expectedType)

					}

				}
				}
				
			}
		}
	}

	def getType(FieldType fieldType) {
		if (fieldType instanceof PrimativeTypeLink) {
			return fieldType.target
		} else if (fieldType instanceof CustomTypeLink) {
			if (fieldType.target instanceof RecordType) {
				return (fieldType.target as RecordType).name
			} else if (fieldType.target instanceof EnumType) {
				return (fieldType.target as EnumType).name
			} else if (fieldType.target instanceof ErrorType){
				return (fieldType.target as ErrorType).name
			}
		}
	}

	def getFieldValue(AvroIDLFile avdl, String schemaName, String fieldName, Object expectedValue) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				if (currentSchema instanceof RecordType){
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default).equals(expectedValue)
						}
					}
				} else if (currentSchema instanceof ErrorType){
					for (field : currentSchema.fields) {
						if (field.name.equals(fieldName)) {
							return getDefValue(field.^default).equals(expectedValue)
						}
					}
				}
				
			}
		}
	}

	def getDefValue(Value value) {

		if (value instanceof IntValue) {
			return value.^val
		} else if (value instanceof StringValue) {
			return value.^val
		} else if (value instanceof BooleanValue) {
			return value.^val
		} else if (value instanceof FloatValue) {
			return value.^val
		}

	}

}
