/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import java.util.ArrayList
import java.util.List
import java.util.Map
import javax.inject.Provider
import org.aedit.generator.AeditGenerator
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.util.StringInputStream
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.AvroIDLFile
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.EnumType
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.RecordType
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.TypeDef
import org.junit.Assert
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.IntValue
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.PrimativeTypeLink
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.Field
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.StringValue
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.Value

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditGeneratorTest {

	@Inject AeditGenerator generator
	@Inject Provider<ResourceSet> rsp;

	@Test
	def testGetElements() {
		val toRemove = "NSRadar.Radar"
		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					record Radar{
						int num;
					}
					
					enum Measures{
						Foo
					}
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(elements.contains("NSRadar.Radar"))
		Assert.assertTrue(elements.contains("NSRadar.Radar.num"))
		Assert.assertTrue(elements.contains("NSRadar.Measures"))
		Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"))
	}

	@Test
	def testRemoveRecord() {

		val toRemove = "NSRadar.Radar"
		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						remove record «toRemove»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					record Radar{
						int num;
					}
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(toRemove))
	}

	@Test
	def testRemoveEnum() {
		val toRemove = "NSRadar.Measures"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						remove enum «toRemove»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(toRemove))
	}

	@Test
	def testRenameRecord() {

		val protocolName = "NSRadar"
		val toRename = protocolName + "." + "Radar"
		val newName = "NewRadar"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						rename record «toRename» => «newName»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Radar{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(toRename))
		Assert.assertTrue(elements.contains(protocolName + "." + newName))
	}

	@Test
	def testRenameEnum() {

		val protocolName = "NSRadar"
		val toRename = protocolName + "." + "Measures"
		val newName = "NewMeasures"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						rename enum «toRename» => «newName»;
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(toRename))
		Assert.assertTrue(elements.contains(protocolName + "." + newName))
	}

	@Test
	def testRemoveFieldFromRecord() {

		val recordName = "NSRadar.Record"
		val fieldToRemove = "num"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «recordName» {
							remove «fieldToRemove»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(recordName + '.' + fieldToRemove))
	}

	@Test
	def testRemoveConstantFromEnum() {

		val recordName = "NSRadar.Measures"
		val constantToRemove = "Foo"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change enum «recordName» {
							remove «constantToRemove»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						Foo
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(recordName + '.' + constantToRemove))
	}

	@Test
	def testRenameField() {

		val recordName = "NSRadar.Record"
		val fieldToRename = "num"
		val newName = "newNum"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change record «recordName» {
							rename «fieldToRename» => «newName»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record Record{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(recordName + '.' + fieldToRename))
		Assert.assertTrue(elements.contains(recordName + '.' + newName))
	}

	@Test
	def testRenameConstant() {

		val enumName = "NSRadar.Measures"
		val constantToRename = "Foo"
		val newConstant = "NewFoo"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						change enum «enumName» {
							rename «constantToRename» => «newConstant»
						};
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					enum Measures{
						M1, Foo, M2
					}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		Assert.assertTrue(!elements.contains(enumName + '.' + constantToRename))
		Assert.assertTrue(elements.contains(enumName + '.' + newConstant))
	}

	@Test
	def testAddRecord() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(1) record «protocolName».«newRecordName»{}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))
		// Assert that the schema has been added to the correct position
		Assert.assertEquals(1, getSchemaPosition(generator.protocols.get(protocolName), newRecordName))
	}

	@Test
	def testAddEnum() {

		val protocolName = "NSRadar"
		val newEnumName = "Range"

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) enum «protocolName».«newEnumName»{}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo {}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newEnumName))
		// Assert that the schema has been added to the correct position
		Assert.assertEquals(2, getSchemaPosition(generator.protocols.get(protocolName), newEnumName))
	}

	@Test
	def testAddRecordWithFields() {

		val protocolName = "NSRadar"
		val newRecordName = "Sensor"

		val field1 = "num";
		val field2 = "name";
		val field3 = "version";

		val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
		val resourceSet = rsp.get => [
			createResource(URI.createFileURI("/Main.aedit")) => [
				load(new StringInputStream('''
					feature FeatureOne {
						RuleSet1
					}
					
					use FeatureOne;
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.aedit")) => [
				load(new StringInputStream('''
					rule Rule1 {
						add.at(2) record «protocolName».«newRecordName»{
							int «field1»
							string «field2» = XCY
							int «field3» = 1
						}
					}
					
					ruleset RuleSet1 {
						Rule1
					}
				''', "UTF-8"), null)
			]
			createResource(URI.createFileURI("/Other.avdlclipse")) => [
				load(new StringInputStream('''
				@namespace('NSRadar')
				protocol NSRadar{
					
					record RadarOne{}
					enum Foo {}
					record RadarTwo{}
					
				}''', "UTF-8"), null)
			]
		]

		val GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		generator.doGenerate(resourceSet.resources.get(0), fsa, context);
		val elements = getElements(generator.protocols)

		// Assert that the schema has been added to the file
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName))

		// Assert that the fields are added
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + field1))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + field2))
		Assert.assertTrue(elements.contains(protocolName + '.' + newRecordName + '.' + field3))

		// Assert that the fields are added to the correct positions
		Assert.assertEquals(0, getFieldPosition(generator.protocols.get(protocolName), newRecordName, field1))
		Assert.assertEquals(1, getFieldPosition(generator.protocols.get(protocolName), newRecordName, field2))
		Assert.assertEquals(2, getFieldPosition(generator.protocols.get(protocolName), newRecordName, field3))

		// Assert that the fields are of the correct type
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, field1, "int"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, field2, "string"))
		Assert.assertTrue(getFieldType(generator.protocols.get(protocolName), newRecordName, field3, "int"))
		
		//Assert that the
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, field2, "XCY"))
		Assert.assertTrue(getFieldValue(generator.protocols.get(protocolName), newRecordName, field3, 1))

	}

	def getElements(Map<String, AvroIDLFile> protocols) {
		val List<String> schemasAndFields = new ArrayList<String>()
		protocols.forEach [ p1, p2 |
			for (typeDef : p2.elements.filter(TypeDef)) {
				var currentSchema = typeDef.type

				if (currentSchema instanceof EnumType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (literal : currentSchema.literals) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + literal)
					}
				} else if (currentSchema instanceof RecordType) {
					schemasAndFields.add(p2.name + '.' + currentSchema.name)
					for (field : currentSchema.fields) {
						schemasAndFields.add(p2.name + '.' + currentSchema.name + '.' + field.name)
					}
				}

			}
		]

		return schemasAndFields
	}

	def getSchemaPosition(AvroIDLFile avdl, String schemaName) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				return avdl.elements.indexOf(typeDef)
			}
		}
	}

	def getFieldPosition(AvroIDLFile avdl, String schemaName, String fieldName) {

		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				for (field : (currentSchema as RecordType).fields) {
					if (field.name.equals(fieldName)) {
						return (currentSchema as RecordType).fields.indexOf(field)
					}
				}
			}
		}

	}

	def getFieldType(AvroIDLFile avdl, String schemaName, String fieldName, String expectedType) {
		// TODO: Optimize
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				for (field : (currentSchema as RecordType).fields) {
					if (field.name.equals(fieldName)) {
						return (field.type as PrimativeTypeLink).target.equals(expectedType)
					}
				}
			}
		}
	}

	def getFieldValue(AvroIDLFile avdl, String schemaName, String fieldName, Object expectedValue) {
		for (typeDef : avdl.elements.filter(TypeDef)) {
			var currentSchema = typeDef.type
			if (currentSchema.name.equals(schemaName)) {
				for (field : (currentSchema as RecordType).fields) {
					if (field.name.equals(fieldName)) {
						return getDefValue(field.^default).equals(expectedValue)
					}
				}
			}
		}
	}
	
	def getDefValue(Value value){
		
		if (value instanceof IntValue){
			return value.^val
		} else  if (value instanceof StringValue){
			return value.^val
		}

	}
	

}
