/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import javax.inject.Provider
import org.aedit.aedit.AeditPackage
import org.aedit.aedit.Model
import org.aedit.validation.AeditValidator
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.util.StringInputStream
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.xbase.testing.CompilationTestHelper

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditValidatorTest {

	@Inject extension ValidationTestHelper
	@Inject extension ParseHelper<Model>

	@Inject
	Provider<ResourceSet> rsp;

	@Test
	def void testRemoveDeletedSchema() {

		parse('''
			rule Rule1 {
						remove record house.Garage;
						remove record house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.removeSchema)

	}

	@Test
	def void testRemoveRenamedSchema() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						remove record house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.removeSchema)
	}

	@Test
	def testRenameRemovedSchema() {
		parse('''
			rule Rule1 {
						remove record house.Garage;
						rename record house.Garage => NewGarage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.renameSchema)
	}

	@Test
	def testRenameSchemaTwice() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						rename record house.Garage => OldGarage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.renameSchema)
	}

	@Test
	def testChangeRemovedSchema() {
		parse('''
			rule Rule1 {
						remove record house.Garage;
						change record house.Garage {};
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.changeSchema)
	}

	@Test
	def testChangeRenamedSchema() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						change record house.Garage {}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedSchema(AeditPackage.eINSTANCE.changeSchema)
	}

	@Test
	def testDuplicateSchema() {
		parse('''
			rule Rule1 {
						add.at(0) record house.Garage()
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addRecord, AeditValidator.DUPLICATE_FIELD,
			"Record with this name already exists in this namespace!")
	}

	@Test
	def testRemoveDeletedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							remove num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.removeVariable)
	}

	@Test
	def testRemoveRenamedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num => newNum;
							remove num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.removeVariable)
	}

	@Test
	def testRenameRemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							rename num => newNum;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.renameVariable)
	}

	@Test
	def testRenameVariableTwice() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num => newNum;
							rename num => newNum;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.renameVariable)
	}

	@Test
	def testChangeTypeOfRemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							set_type num => long;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.changeType)
	}

	@Test
	def testChangeValueOfRemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							set_val num => 1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedVariable(AeditPackage.eINSTANCE.changeDefValue)
	}

	@Test
	def testDuplicateField() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							add.at(0) string num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
				}''', "UTF-8"), null)
			]
		]).assertDuplicateField(AeditPackage.eINSTANCE.addVariable)
	}

	@Test
	def testDuplicateEnumConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						add.at(0) RED;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertDuplicateField(AeditPackage.eINSTANCE.addEnum)
	}

	@Test
	def testRemoveDeletedEnumConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						remove RED;
						remove RED;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedEnumConstant(AeditPackage.eINSTANCE.removeEnum)
	}

	@Test
	def testRemoveUndefinedConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						remove PURPLE;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertRemovedEnumConstant(AeditPackage.eINSTANCE.removeEnum)
	}

	def private assertRemovedSchema(Model m, EClass model) {
		m.assertError(
			model,
			AeditValidator.REMOVE_SCHEMA,
			"Schema does not exist!"
		)
	}

	def private assertRemovedVariable(Model m, EClass model) {
		m.assertError(
			model,
			AeditValidator.REMOVE_VARIABLE,
			"Variable has been deleted!"
		)
	}

	def private assertRemovedEnumConstant(Model m, EClass model) {
		m.assertError(
			model,
			AeditValidator.REMOVE_ENUM_CONST,
			"Constant does not exist!"
		)
	}

	def private assertDuplicateField(Model m, EClass model) {
		m.assertError(
			model,
			AeditValidator.DUPLICATE_FIELD,
			"Field with this name already exists!"
		)
	}

	def private assertMethod(Model m, EClass model, String code, String message) {
		m.assertError(
			model,
			code,
			message
		)
	}
}
