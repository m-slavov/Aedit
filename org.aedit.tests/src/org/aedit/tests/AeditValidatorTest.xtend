/*
 * generated by Xtext 2.12.0
 */
package org.aedit.tests

import com.google.inject.Inject
import javax.inject.Provider
import org.aedit.aedit.AeditPackage
import org.aedit.aedit.Model
import org.aedit.validation.ErrorCodes
import org.aedit.validation.ErrorMessages
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.util.StringInputStream
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(AvroclipseProvider)
class AeditValidatorTest {

	@Inject extension ValidationTestHelper
	@Inject extension ParseHelper<Model>

	@Inject
	Provider<ResourceSet> rsp;

	@Test
	def void testRemoveSchema__DeletedSchema() {

		parse('''
			rule Rule1 {
						remove record house.Garage;
						remove record house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeSchema, ErrorCodes.REMOVE_SCHEMA, ErrorMessages.DELETED_SCHEMA)

	}
	
	@Test
	def void testRemoveSchema__TypeMissmatchEnum() {

		parse('''
			rule Rule1 {
						remove enum house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeSchema, ErrorCodes.REMOVE_SCHEMA, ErrorMessages.TYPE_MISSMATCH)

	}
	
		@Test
	def void testRemoveSchema__TypeMissmatchError() {

		parse('''
			rule Rule1 {
						remove error house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeSchema, ErrorCodes.REMOVE_SCHEMA, ErrorMessages.TYPE_MISSMATCH)

	}
	

	@Test
	def void testRemoveSchema__RenamedSchema() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						remove record house.Garage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeSchema, ErrorCodes.REMOVE_SCHEMA, ErrorMessages.DELETED_SCHEMA)
	}

	@Test
	def testRenameSchema__RemovedSchema() {
		parse('''
			rule Rule1 {
						remove record house.Garage;
						rename record house.Garage => NewGarage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameSchema, ErrorCodes.RENAME_SCHEMA, ErrorMessages.DELETED_SCHEMA)
	}
	
	@Test
	def testRenameSchema__TypeMissmatch() {
		parse('''
			rule Rule1 {
						rename enum house.Garage => NewGarage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameSchema, ErrorCodes.RENAME_SCHEMA, ErrorMessages.TYPE_MISSMATCH)
	}

	/*
	 * NOTE: Renamed objects are treated as if the object has been removed.
	 */
	@Test
	def testRenameSchema__RenameTwice() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						rename record house.Garage => OldGarage;
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameSchema, ErrorCodes.RENAME_SCHEMA, ErrorMessages.DELETED_SCHEMA)
	}

	@Test
	def testChangeSchema__RemovedSchema() {
		parse('''
			rule Rule1 {
						remove record house.Garage;
						change record house.Garage {};
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeSchema, ErrorCodes.CHANGE_SCHEMA, ErrorMessages.DELETED_SCHEMA)
	}
	
	@Test
	def testChangeSchema__TypeMissmatch() {
		parse('''
			rule Rule1 {
						change error house.Garage {};
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{ }
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeSchema, ErrorCodes.CHANGE_SCHEMA, ErrorMessages.TYPE_MISSMATCH)
	}

	@Test
	def testChangeSchema__RenamedSchema() {
		parse('''
			rule Rule1 {
						rename record house.Garage => NewGarage;
						change record house.Garage {}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeSchema, ErrorCodes.CHANGE_SCHEMA, ErrorMessages.DELETED_SCHEMA)
	}

	@Test
	def testAddRecord__DuplicateSchema() {
		parse('''
			rule Rule1 {
						add.at(0) record house.Garage()
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			] 
		]).assertMethod(AeditPackage.eINSTANCE.addRecord, ErrorCodes.ADD_RECORD, ErrorMessages.DUPLICATE_SCHEMA)
	}

	@Test
	def testRemoveVariable__DeletedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							remove num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeVariable, ErrorCodes.REMOVE_VARIABLE, ErrorMessages.DELETED_FIELD)
	}

	@Test
	def testRemoveVariable__RenamedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num => newNum;
							remove num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeVariable, ErrorCodes.REMOVE_VARIABLE, ErrorMessages.DELETED_FIELD)
	}
	
	@Test
	def testRemoveVariable__IncorrectVariable(){
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					record SecondGarage{
						int num1;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeVariable, ErrorCodes.REMOVE_VARIABLE, ErrorMessages.FIELD_NOT_IN_SCHEMA)
	}

	@Test
	def testRenameVariable__RemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							rename num => newNum;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameVariable, ErrorCodes.RENAME_VARIABLE, ErrorMessages.DELETED_FIELD)
	}

	@Test
	def testRenameVariable__RenamedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num => newNum;
							rename num => newNum;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameVariable, ErrorCodes.RENAME_VARIABLE, ErrorMessages.DELETED_FIELD)
	}
	
	@Test
	def testRenameVariable__IncorrectVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num1 => newNum;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					record SecondGarage{
						int num1;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameVariable, ErrorCodes.RENAME_VARIABLE, ErrorMessages.FIELD_NOT_IN_SCHEMA)
	}
	
	@Test
	def testRenameVariable__NewNameTaken() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							rename num => foo;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
						sting foo;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.renameVariable, ErrorCodes.RENAME_VARIABLE, ErrorMessages.DUPLICATE_FIELD)
	}
	

	@Test
	def testChangeType__RemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							set_type num => long;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeType, ErrorCodes.CHANGE_TYPE, ErrorMessages.DELETED_FIELD)
	}
	
	@Test
	def testChangeType__IncorrectVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							set_type num1 => long;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					record SecondGarage{
						int num1;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeType, ErrorCodes.CHANGE_TYPE, ErrorMessages.FIELD_NOT_IN_SCHEMA)
	}

	@Test
	def testChangeDefValue__RemovedVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							remove num;
							set_val num => 1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeDefValue, ErrorCodes.CHANGE_DEF_VALUE, ErrorMessages.DELETED_FIELD)
	}
	
	@Test
	def testChangeDefValue__IncorrectVariable() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							set_val num1 => 1;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					record SecondGarage{
						int num1;
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.changeDefValue, ErrorCodes.CHANGE_DEF_VALUE, ErrorMessages.FIELD_NOT_IN_SCHEMA)
	}

	@Test
	def testAddVariable_DuplicateField() {
		parse('''
			rule Rule1 {
						change record house.Garage {
							add.at(0) string num;
						}
					}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addVariable, ErrorCodes.ADD_VARIABLE, ErrorMessages.DUPLICATE_FIELD)
	}

	@Test
	def testAddEnumConstant__DuplicateEnumConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						add.at(0) RED;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.addEnum, ErrorCodes.ADD_ENUM_CONST, ErrorMessages.DUPLICATE_ENUM_CONST)
	}

	@Test
	def testRemoveEnumConstant_RemovedEnumConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						remove RED;
						remove RED;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeEnum, ErrorCodes.REMOVE_ENUM_CONST, ErrorMessages.REMOVED_ENUM_CONST)
	}

	@Test
	def testRemoveEnumConstant__UndefinedEnumConstant() {
		parse('''
			rule Rule1 {
					change enum house.Colors {
						remove PURPLE;
					}
				}
		''', URI.createFileURI("/Main.aedit"), rsp.get => [
			createResource(URI.createFileURI("/Other.avdl")) => [
				load(new StringInputStream('''
				@namespace('house')
				protocol House{
					record Garage{
						int num;
					}
					
					enum Colors{
						RED, GREEN, BLUE	
					}
					
				}''', "UTF-8"), null)
			]
		]).assertMethod(AeditPackage.eINSTANCE.removeEnum, ErrorCodes.REMOVE_ENUM_CONST, ErrorMessages.NON_EXISTENT_ENUM_CONST)
	}

	def private assertMethod(Model m, EClass model, String code, String message) {
		m.assertError(
			model,
			code,
			message
		)
	}
}
