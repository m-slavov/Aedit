/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import com.google.inject.Inject;
import javax.inject.Provider;
import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.Model;
import org.aedit.tests.AvroclipseProvider;
import org.aedit.validation.ErrorCodes;
import org.aedit.validation.ErrorMessages;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditAnnotationValidatorTest {
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testAddAnnotationToSchema__TypeMissmatch() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.annot enum SRF.Burst_parameters => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddAnnotationToSchema(), ErrorCodes.ADD_ANNOTATION_TO_SCHEMA, ErrorMessages.TYPE_MISSMATCH);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationsToSchema__Duplicate() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.annot record SRF.Burst_parameters => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.annot record SRF.Burst_parameters => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddAnnotationToSchema(), ErrorCodes.ADD_ANNOTATION_TO_SCHEMA, ErrorMessages.DUPLICATE_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationsToSchema__NotDuplicate() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.annot record SRF.Burst_parameters => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.annot record SRF.Burst_parameters => @foo1(foo);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoError(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), ErrorCodes.ADD_ANNOTATION_TO_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationToField__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot seconds => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddAnnotationToField(), ErrorCodes.ADD_ANNOTATION_TO_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationToField__CorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationToField__DuplicateAnnotation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddAnnotationToField(), ErrorCodes.ADD_ANNOTATION_TO_FIELD, ErrorMessages.DUPLICATE_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationToField__DuplicateAnnotationII() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddAnnotationToField(), ErrorCodes.ADD_ANNOTATION_TO_FIELD, ErrorMessages.DUPLICATE_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddAnnotationToField__UniqueAnnotation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @uniqueFoo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.annot burst => @uniqueFoo1(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddNameAnnotationToField__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot seconds => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddNameAnnotationToField(), ErrorCodes.ADD_NAME_ANNOTATION_TO_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddNameAnnotationToField__CorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @correctField(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddNameAnnotationToField__DuplicateAnnotation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddNameAnnotationToField(), ErrorCodes.ADD_NAME_ANNOTATION_TO_FIELD, ErrorMessages.DUPLICATE_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddNameAnnotationToField__DuplicateAnnotationII() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @foo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddNameAnnotationToField(), ErrorCodes.ADD_NAME_ANNOTATION_TO_FIELD, ErrorMessages.DUPLICATE_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddNameAnnotationToField__UniqueAnnotation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @uniqueFoo(foo);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.name_annot burst => @uniqueFoo1(foo);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot seconds => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveAnnotationFromField(), ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__CorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__AnnotationNotFound() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo1(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveAnnotationFromField(), ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.ANNOTATION_NOT_IN_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__NoErrors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__RemoveTwice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveAnnotationFromField(), ErrorCodes.REMOVE_ANNOTATION_FROM_FIELD, ErrorMessages.DELETED_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveAnnotationFromField__RemoveDifferentAnnotations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.annot burst => foo1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") @foo1(\"foo\") int burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("@foo(\"foo\") int seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveNameAnnotationFromField__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot seconds => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveNameAnnotationFromField(), ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveNameAnnotationFromField__NoErrors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveNameAnnotationFromField__NameAnnotationNotFound() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveNameAnnotationFromField(), ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.ANNOTATION_NOT_IN_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveNameAnnotationFromField__RemoveNameAnnotationTwice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveNameAnnotationFromField(), ErrorCodes.REMOVE_NAME_ANNOTATION_FROM_FIELD, ErrorMessages.DELETED_ANNOTATION);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveNameAnnotationFromField__RemoveDifferentNameAnnotations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove.name_annot burst => foo1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\") @foo1(\"foo\") burst;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int @foo(\"foo\")  seconds;\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertMethod(final Model m, final EClass model, final String code, final String message) {
    this._validationTestHelper.assertError(m, model, code, message);
  }
}
