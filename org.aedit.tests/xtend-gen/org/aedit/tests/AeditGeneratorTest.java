/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.inject.Provider;
import org.aedit.generator.AeditGenerator;
import org.aedit.tests.AvroclipseProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.AvroIDLFile;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.EnumType;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.Field;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.FieldType;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.IntValue;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.PrimativeTypeLink;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.RecordType;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.StringValue;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.Type;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.TypeDef;
import org.xtext.example.org.xtext.example.avdlclipse.avdlClipse.Value;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditGeneratorTest {
  @Inject
  private AeditGenerator generator;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testGetElements() {
    final String toRemove = "NSRadar.Radar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains("NSRadar.Radar"));
    Assert.assertTrue(elements.contains("NSRadar.Radar.num"));
    Assert.assertTrue(elements.contains("NSRadar.Measures"));
    Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"));
  }
  
  @Test
  public void testRemoveRecord() {
    final String toRemove = "NSRadar.Radar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove record ");
          _builder.append(toRemove, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRemove);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRemoveEnum() {
    final String toRemove = "NSRadar.Measures";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove enum ");
          _builder.append(toRemove, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRemove);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRenameRecord() {
    final String protocolName = "NSRadar";
    final String toRename = ((protocolName + ".") + "Radar");
    final String newName = "NewRadar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("rename record ");
          _builder.append(toRename, "\t");
          _builder.append(" => ");
          _builder.append(newName, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRename);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newName)));
  }
  
  @Test
  public void testRenameEnum() {
    final String protocolName = "NSRadar";
    final String toRename = ((protocolName + ".") + "Measures");
    final String newName = "NewMeasures";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("rename enum ");
          _builder.append(toRename, "\t");
          _builder.append(" => ");
          _builder.append(newName, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRename);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newName)));
  }
  
  @Test
  public void testRemoveFieldFromRecord() {
    final String recordName = "NSRadar.Record";
    final String fieldToRemove = "num";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove ");
          _builder.append(fieldToRemove, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((recordName + ".") + fieldToRemove));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRemoveConstantFromEnum() {
    final String recordName = "NSRadar.Measures";
    final String constantToRemove = "Foo";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change enum ");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove ");
          _builder.append(constantToRemove, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((recordName + ".") + constantToRemove));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRenameField() {
    final String recordName = "NSRadar.Record";
    final String fieldToRename = "num";
    final String newName = "newNum";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(fieldToRename, "\t\t");
          _builder.append(" => ");
          _builder.append(newName, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((recordName + ".") + fieldToRename));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((recordName + ".") + newName)));
  }
  
  @Test
  public void testRenameConstant() {
    final String enumName = "NSRadar.Measures";
    final String constantToRename = "Foo";
    final String newConstant = "NewFoo";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change enum ");
          _builder.append(enumName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(constantToRename, "\t\t");
          _builder.append(" => ");
          _builder.append(newConstant, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("M1, Foo, M2");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((enumName + ".") + constantToRename));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((enumName + ".") + newConstant)));
  }
  
  @Test
  public void testAddRecord() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(1) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{}");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertEquals(1, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newRecordName)).intValue());
  }
  
  @Test
  public void testAddEnum() {
    final String protocolName = "NSRadar";
    final String newEnumName = "Range";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newEnumName, "\t");
          _builder.append("{}");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo {}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newEnumName)));
    Assert.assertEquals(2, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newEnumName)).intValue());
  }
  
  @Test
  public void testAddRecordWithFields() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final String field1 = "num";
    final String field2 = "name";
    final String field3 = "version";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(field1, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(field2, "\t\t");
          _builder.append(" = XCY");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(field3, "\t\t");
          _builder.append(" = 1");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdlclipse"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo {}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + field1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + field2)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + field3)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, field1)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, field2)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, field3)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, field1, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, field2, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, field3, "int")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, field2, "XCY")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, field3, Integer.valueOf(1))).booleanValue());
  }
  
  public List<String> getElements(final Map<String, AvroIDLFile> protocols) {
    final List<String> schemasAndFields = new ArrayList<String>();
    final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
      Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(p2.getElements(), TypeDef.class);
      for (final TypeDef typeDef : _filter) {
        {
          Type currentSchema = typeDef.getType();
          if ((currentSchema instanceof EnumType)) {
            String _name = p2.getName();
            String _plus = (_name + ".");
            String _name_1 = ((EnumType)currentSchema).getName();
            String _plus_1 = (_plus + _name_1);
            schemasAndFields.add(_plus_1);
            EList<String> _literals = ((EnumType)currentSchema).getLiterals();
            for (final String literal : _literals) {
              String _name_2 = p2.getName();
              String _plus_2 = (_name_2 + ".");
              String _name_3 = ((EnumType)currentSchema).getName();
              String _plus_3 = (_plus_2 + _name_3);
              String _plus_4 = (_plus_3 + ".");
              String _plus_5 = (_plus_4 + literal);
              schemasAndFields.add(_plus_5);
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              String _name_4 = p2.getName();
              String _plus_6 = (_name_4 + ".");
              String _name_5 = ((RecordType)currentSchema).getName();
              String _plus_7 = (_plus_6 + _name_5);
              schemasAndFields.add(_plus_7);
              EList<Field> _fields = ((RecordType)currentSchema).getFields();
              for (final Field field : _fields) {
                String _name_6 = p2.getName();
                String _plus_8 = (_name_6 + ".");
                String _name_7 = ((RecordType)currentSchema).getName();
                String _plus_9 = (_plus_8 + _name_7);
                String _plus_10 = (_plus_9 + ".");
                String _name_8 = field.getName();
                String _plus_11 = (_plus_10 + _name_8);
                schemasAndFields.add(_plus_11);
              }
            }
          }
        }
      }
    };
    protocols.forEach(_function);
    return schemasAndFields;
  }
  
  public Integer getSchemaPosition(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return Integer.valueOf(avdl.getElements().indexOf(typeDef));
        }
      }
    }
    return null;
  }
  
  public Integer getFieldPosition(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          EList<Field> _fields = ((RecordType) currentSchema).getFields();
          for (final Field field : _fields) {
            boolean _equals_1 = field.getName().equals(fieldName);
            if (_equals_1) {
              return Integer.valueOf(((RecordType) currentSchema).getFields().indexOf(field));
            }
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldType(final AvroIDLFile avdl, final String schemaName, final String fieldName, final String expectedType) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          EList<Field> _fields = ((RecordType) currentSchema).getFields();
          for (final Field field : _fields) {
            boolean _equals_1 = field.getName().equals(fieldName);
            if (_equals_1) {
              FieldType _type = field.getType();
              return Boolean.valueOf(((PrimativeTypeLink) _type).getTarget().equals(expectedType));
            }
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldValue(final AvroIDLFile avdl, final String schemaName, final String fieldName, final Object expectedValue) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          EList<Field> _fields = ((RecordType) currentSchema).getFields();
          for (final Field field : _fields) {
            boolean _equals_1 = field.getName().equals(fieldName);
            if (_equals_1) {
              return Boolean.valueOf(this.getDefValue(field.getDefault()).equals(expectedValue));
            }
          }
        }
      }
    }
    return null;
  }
  
  public Object getDefValue(final Value value) {
    if ((value instanceof IntValue)) {
      return Integer.valueOf(((IntValue)value).getVal());
    } else {
      if ((value instanceof StringValue)) {
        return ((StringValue)value).getVal();
      }
    }
    return null;
  }
}
