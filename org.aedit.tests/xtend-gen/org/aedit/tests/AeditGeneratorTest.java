/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import avroclipse.avroIDL.AvroIDLFile;
import avroclipse.avroIDL.BooleanValue;
import avroclipse.avroIDL.CustomTypeLink;
import avroclipse.avroIDL.EnumType;
import avroclipse.avroIDL.ErrorType;
import avroclipse.avroIDL.Field;
import avroclipse.avroIDL.FieldType;
import avroclipse.avroIDL.FloatValue;
import avroclipse.avroIDL.IntValue;
import avroclipse.avroIDL.PrimativeTypeLink;
import avroclipse.avroIDL.RecordType;
import avroclipse.avroIDL.StringValue;
import avroclipse.avroIDL.Type;
import avroclipse.avroIDL.TypeDef;
import avroclipse.avroIDL.Value;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.inject.Provider;
import org.aedit.generator.AeditGenerator;
import org.aedit.tests.AvroclipseProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditGeneratorTest {
  @Inject
  private AeditGenerator generator;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testGetElements() {
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Err{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int Foo;\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains("NSRadar.Radar"));
    Assert.assertTrue(elements.contains("NSRadar.Radar.num"));
    Assert.assertTrue(elements.contains("NSRadar.Measures"));
    Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"));
    Assert.assertTrue(elements.contains("NSRadar.Err"));
    Assert.assertTrue(elements.contains("NSRadar.Err.Foo"));
  }
  
  @Test
  public void testRemove__Record() {
    final String toRemove = "NSRadar.Radar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove record ");
          _builder.append(toRemove, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRemove);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRemove__Enum() {
    final String toRemove = "NSRadar.Measures";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove enum ");
          _builder.append(toRemove, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRemove);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRemove__Error() {
    final String toRemove = "NSRadar.Measures";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove error ");
          _builder.append(toRemove, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int Foo;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRemove);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
  }
  
  @Test
  public void testRename__Record() {
    final String protocolName = "NSRadar";
    final String toRename = ((protocolName + ".") + "Radar");
    final String newName = "NewRadar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("rename record ");
          _builder.append(toRename, "\t");
          _builder.append(" => ");
          _builder.append(newName, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRename);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newName)));
  }
  
  @Test
  public void testRename__Enum() {
    final String protocolName = "NSRadar";
    final String toRename = ((protocolName + ".") + "Measures");
    final String newName = "NewMeasures";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("rename enum ");
          _builder.append(toRename, "\t");
          _builder.append(" => ");
          _builder.append(newName, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRename);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newName)));
  }
  
  @Test
  public void testRename__Error() {
    final String protocolName = "NSRadar";
    final String toRename = ((protocolName + ".") + "Radar");
    final String newName = "NewRadar";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("rename error ");
          _builder.append(toRename, "\t");
          _builder.append(" => ");
          _builder.append(newName, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(toRename);
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newName)));
  }
  
  @Test
  public void testRemoveField__Record() {
    final String recordName = "NSRadar.Record";
    final String fieldToRemove = "num";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove ");
          _builder.append(fieldToRemove, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((recordName + ".") + fieldToRemove));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((recordName + ".") + "name")));
  }
  
  @Test
  public void testRemoveEnumConstant__Enum() {
    final String protocolName = "NSRadar";
    final String enumName = "Measures";
    final String constantToRemove = "Foo";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(enumName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove ");
          _builder.append(constantToRemove, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo,");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Other");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((((protocolName + ".") + enumName) + ".") + constantToRemove));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + "Other")));
  }
  
  @Test
  public void testRemoveField__Error() {
    final String errorName = "NSRadar.Record";
    final String fieldToRemove = "num";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change error ");
          _builder.append(errorName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove ");
          _builder.append(fieldToRemove, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((errorName + ".") + fieldToRemove));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((errorName + ".") + "name")));
  }
  
  @Test
  public void testRenameField__Record() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String fieldToRename1 = "num";
    final String fieldToRename2 = "seconds";
    final String newName1 = "newNum";
    final String newName2 = "seconds1";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(fieldToRename1, "\t\t");
          _builder.append(" => ");
          _builder.append(newName1, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(fieldToRename2, "\t\t");
          _builder.append(" => ");
          _builder.append(newName2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int seconds = 1;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((((protocolName + ".") + recordName) + ".") + fieldToRename1));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = elements.contains(((((protocolName + ".") + recordName) + ".") + fieldToRename2));
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + newName1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + newName2)));
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, newName1, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, newName2, "int")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, newName2, Integer.valueOf(1))).booleanValue());
  }
  
  @Test
  public void testRenameField__Error() {
    final String protocolName = "NSRadar";
    final String errorName = "Record";
    final String fieldToRename1 = "num";
    final String fieldToRename2 = "seconds";
    final String newName1 = "newNum";
    final String newName2 = "seconds1";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(errorName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(fieldToRename1, "\t\t");
          _builder.append(" => ");
          _builder.append(newName1, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(fieldToRename2, "\t\t");
          _builder.append(" => ");
          _builder.append(newName2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int seconds = 1;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((((protocolName + ".") + errorName) + ".") + fieldToRename1));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = elements.contains(((((protocolName + ".") + errorName) + ".") + fieldToRename2));
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + newName1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + newName2)));
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, newName1, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, newName2, "int")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, newName2, Integer.valueOf(1))).booleanValue());
  }
  
  @Test
  public void testRenameEnumConstant__Enum() {
    final String protocolName = "NSRadar";
    final String enumName = "Measures";
    final String constantToRename = "Foo";
    final String newConstant = "NewFoo";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(enumName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("rename ");
          _builder.append(constantToRename, "\t\t");
          _builder.append(" => ");
          _builder.append(newConstant, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("M1, Foo, M2");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    boolean _contains = elements.contains(((((protocolName + ".") + enumName) + ".") + constantToRename));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + newConstant)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + "M1")));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + "M2")));
    Assert.assertEquals(0, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), enumName, "M1")).intValue());
    Assert.assertEquals(2, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), enumName, "M2")).intValue());
  }
  
  @Test
  public void testAddFeildWithoutValue__Record() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) int ");
          _builder.append(intField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) long ");
          _builder.append(longField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + booleanField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + floatField)));
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, intField)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, stringField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, floatField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, booleanField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, longField)).intValue());
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, doubleField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, longField, "long")).booleanValue());
  }
  
  @Test
  public void testAddFeildWithoutValue__Error() {
    final String protocolName = "NSRadar";
    final String errorName = "Record";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(errorName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) int ");
          _builder.append(intField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) long ");
          _builder.append(longField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + booleanField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + errorName) + ".") + floatField)));
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, intField)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, stringField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, floatField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, booleanField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, longField)).intValue());
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), errorName, doubleField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), errorName, longField, "long")).booleanValue());
  }
  
  @Test
  public void testAddFeild__CustomField() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String customField = "customVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) NSRadar.CustomRecord ");
          _builder.append(customField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record CustomRecord{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + customField)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, customField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, customField, "CustomRecord")).booleanValue());
  }
  
  @Test
  public void testAddFeildWithValue__Record() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField1 = "boolVal1";
    final String booleanField2 = "boolVal2";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final int intValue = 1;
    final String stringValue = "HelloWorld";
    final float floatValue = 99.9f;
    final boolean booleanValue1 = false;
    final boolean booleanValue2 = true;
    final int longValue = 10000;
    final float doubleValue = 66.6f;
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = ");
          _builder.append(intValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" = ");
          _builder.append(stringValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" = ");
          _builder.append(floatValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue1, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField2, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue2, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) long ");
          _builder.append(longField, "\t\t");
          _builder.append(" = ");
          _builder.append(longValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" = ");
          _builder.append(doubleValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, intField, Integer.valueOf(intValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, doubleField, Float.valueOf(doubleValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, longField, Integer.valueOf(longValue))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), recordName, booleanField1, Boolean.valueOf(booleanValue1))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), recordName, booleanField2, Boolean.valueOf(booleanValue2))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, stringField, stringValue)).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, floatField, Float.valueOf(floatValue))).booleanValue());
  }
  
  @Test
  public void testAddFeildWithValue__Error() {
    final String protocolName = "NSRadar";
    final String errorName = "Record";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField1 = "boolVal1";
    final String booleanField2 = "boolVal2";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final int intValue = 1;
    final String stringValue = "HelloWorld";
    final float floatValue = 99.9f;
    final boolean booleanValue1 = false;
    final boolean booleanValue2 = true;
    final int longValue = 10000;
    final float doubleValue = 66.6f;
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(errorName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = ");
          _builder.append(intValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" = ");
          _builder.append(stringValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" = ");
          _builder.append(floatValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue1, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) boolean ");
          _builder.append(booleanField2, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue2, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) long ");
          _builder.append(longField, "\t\t");
          _builder.append(" = ");
          _builder.append(longValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" = ");
          _builder.append(doubleValue, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, intField, Integer.valueOf(intValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, doubleField, Float.valueOf(doubleValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, longField, Integer.valueOf(longValue))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), errorName, booleanField1, Boolean.valueOf(booleanValue1))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), errorName, booleanField2, Boolean.valueOf(booleanValue2))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, stringField, stringValue)).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), errorName, floatField, Float.valueOf(floatValue))).booleanValue());
  }
  
  @Test
  public void testAddEnumConstant__Enum() {
    final String protocolName = "NSRadar";
    final String enumName = "Measures";
    final String constantToAdd = "WIDTH";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(enumName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) ");
          _builder.append(constantToAdd, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("LENGTH");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + constantToAdd)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + enumName) + ".") + "LENGTH")));
    Assert.assertEquals(0, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), enumName, constantToAdd)).intValue());
    Assert.assertEquals(1, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), enumName, "LENGTH")).intValue());
  }
  
  @Test
  public void testAdd__Record() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(1) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{}");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertEquals(1, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newRecordName)).intValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newRecordName);
    Assert.assertTrue((_schemaType instanceof RecordType));
  }
  
  @Test
  public void testAdd__Error() {
    final String protocolName = "NSRadar";
    final String newErrorName = "Sensor";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(1) error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newErrorName, "\t");
          _builder.append("{}");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newErrorName)));
    Assert.assertEquals(1, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newErrorName)).intValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newErrorName);
    Assert.assertTrue((_schemaType instanceof ErrorType));
  }
  
  @Test
  public void testAdd__Enum() {
    final String protocolName = "NSRadar";
    final String newEnumName = "Range";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newEnumName, "\t");
          _builder.append("{}");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { Foo1 }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newEnumName)));
    Assert.assertEquals(2, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newEnumName)).intValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newEnumName);
    Assert.assertTrue((_schemaType instanceof EnumType));
  }
  
  @Test
  public void testAdd__RecordWithFieldsWithoutValues() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(stringField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("float ");
          _builder.append(floatField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("double ");
          _builder.append(doubleField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("long ");
          _builder.append(longField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo {}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + floatField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + booleanField)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, intField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, stringField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, floatField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, booleanField)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, doubleField)).intValue());
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, longField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, longField, "long")).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newRecordName);
    Assert.assertTrue((_schemaType instanceof RecordType));
  }
  
  @Test
  public void testAdd__ErrorWithFieldsWithoutValues() {
    final String protocolName = "NSRadar";
    final String newErrorName = "Sensor";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newErrorName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(stringField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("float ");
          _builder.append(floatField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("double ");
          _builder.append(doubleField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("long ");
          _builder.append(longField, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo {}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newErrorName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + floatField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + booleanField)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, intField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, stringField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, floatField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, booleanField)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, doubleField)).intValue());
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, longField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, longField, "long")).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newErrorName);
    Assert.assertTrue((_schemaType instanceof ErrorType));
  }
  
  @Test
  public void testAdd__RecordWithCustomTypeFields() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final String customTypeField1 = "customValRecord";
    final String customTypeField2 = "customValEnum";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("NSRadar.RadarOne ");
          _builder.append(customTypeField1, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("NSRadar.Foo ");
          _builder.append(customTypeField2, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { FOO1 }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + customTypeField1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + customTypeField2)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, customTypeField1)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, customTypeField2)).intValue());
    Assert.assertTrue(
      (this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, customTypeField1, "RadarOne")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, customTypeField2, "Foo")).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newRecordName);
    Assert.assertTrue((_schemaType instanceof RecordType));
  }
  
  @Test
  public void testAdd__ErrorWithCustomTypeFields() {
    final String protocolName = "NSRadar";
    final String newErrorName = "Sensor";
    final String customTypeField1 = "customValRecord";
    final String customTypeField2 = "customValEnum";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newErrorName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("NSRadar.RadarOne ");
          _builder.append(customTypeField1, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("NSRadar.Foo ");
          _builder.append(customTypeField2, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { FOO1 }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newErrorName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + customTypeField1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + customTypeField2)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, customTypeField1)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, customTypeField2)).intValue());
    Assert.assertTrue(
      (this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, customTypeField1, "RadarOne")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, customTypeField2, "Foo")).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newErrorName);
    Assert.assertTrue((_schemaType instanceof ErrorType));
  }
  
  @Test
  public void testAdd__RecordWithFieldsWithValues() {
    final String protocolName = "NSRadar";
    final String newRecordName = "Sensor";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField1 = "boolVal1";
    final String booleanField2 = "boolVal2";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final int intValue = 1;
    final String stringValue = "HelloWorld";
    final float floatValue = 99.9f;
    final boolean booleanValue1 = false;
    final boolean booleanValue2 = true;
    final int longValue = 10000;
    final float doubleValue = 66.6f;
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newRecordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = ");
          _builder.append(intValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" = ");
          _builder.append(stringValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" = ");
          _builder.append(floatValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue1, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField2, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" = ");
          _builder.append(doubleValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("long ");
          _builder.append(longField, "\t\t");
          _builder.append(" = ");
          _builder.append(longValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newRecordName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + floatField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + booleanField1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newRecordName) + ".") + booleanField2)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, intField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, stringField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, floatField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, booleanField1)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, booleanField2)).intValue());
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, doubleField)).intValue());
    Assert.assertEquals(6, (this.getFieldPosition(this.generator.protocols.get(protocolName), newRecordName, longField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, booleanField1, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, booleanField2, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newRecordName, longField, "long")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, intField, Integer.valueOf(intValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, doubleField, Float.valueOf(doubleValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, longField, Integer.valueOf(longValue))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, booleanField1, Boolean.valueOf(booleanValue1))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, booleanField2, Boolean.valueOf(booleanValue2))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, stringField, stringValue)).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newRecordName, floatField, Float.valueOf(floatValue))).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newRecordName);
    Assert.assertTrue((_schemaType instanceof RecordType));
  }
  
  @Test
  public void testAdd__ErrorWithFieldsWithValues() {
    final String protocolName = "NSRadar";
    final String newErrorName = "Sensor";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField1 = "boolVal1";
    final String booleanField2 = "boolVal2";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final int intValue = 1;
    final String stringValue = "HelloWorld";
    final float floatValue = 99.9f;
    final boolean booleanValue1 = false;
    final boolean booleanValue2 = true;
    final int longValue = 10000;
    final float doubleValue = 66.6f;
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newErrorName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = ");
          _builder.append(intValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(stringField, "\t\t");
          _builder.append(" = ");
          _builder.append(stringValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("float ");
          _builder.append(floatField, "\t\t");
          _builder.append(" = ");
          _builder.append(floatValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue1, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField2, "\t\t");
          _builder.append(" = ");
          _builder.append(booleanValue2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" = ");
          _builder.append(doubleValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("long ");
          _builder.append(longField, "\t\t");
          _builder.append(" = ");
          _builder.append(longValue, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newErrorName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + intField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + floatField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + booleanField1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newErrorName) + ".") + booleanField2)));
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, intField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, stringField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, floatField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, booleanField1)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, booleanField2)).intValue());
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, doubleField)).intValue());
    Assert.assertEquals(6, (this.getFieldPosition(this.generator.protocols.get(protocolName), newErrorName, longField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, intField, "int")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, booleanField1, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, booleanField2, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), newErrorName, longField, "long")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, intField, Integer.valueOf(intValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, doubleField, Float.valueOf(doubleValue))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, longField, Integer.valueOf(longValue))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, booleanField1, Boolean.valueOf(booleanValue1))).booleanValue());
    Assert.assertTrue(
      (this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, booleanField2, Boolean.valueOf(booleanValue2))).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, stringField, stringValue)).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), newErrorName, floatField, Float.valueOf(floatValue))).booleanValue());
    Type _schemaType = this.getSchemaType(this.generator.protocols.get(protocolName), newErrorName);
    Assert.assertTrue((_schemaType instanceof ErrorType));
  }
  
  @Test
  public void testAdd__EnumWithConstants() {
    final String protocolName = "NSRadar";
    final String newEnumName = "Range";
    final String constant1 = "WIDE";
    final String constant2 = "SHORT";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.at(2) enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(newEnumName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append(constant1, "\t\t");
          _builder.append(", ");
          _builder.append(constant2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { Foo1 }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((protocolName + ".") + newEnumName)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newEnumName) + ".") + constant1)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + newEnumName) + ".") + constant2)));
    Assert.assertEquals(2, (this.getSchemaPosition(this.generator.protocols.get(protocolName), newEnumName)).intValue());
    Assert.assertEquals(0, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), newEnumName, constant1)).intValue());
    Assert.assertEquals(1, (this.getConstantValuePosition(this.generator.protocols.get(protocolName), newEnumName, constant2)).intValue());
  }
  
  @Test
  public void testChangeDefType__PrimitiveValue_NoValues() {
    final String protocolName = "NSRadar";
    final String recordName = "RadarOne";
    final String intField = "intVal";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField1 = "boolVal1";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final String intType = "int";
    final String stringType = "string";
    final String floatType = "float";
    final String booleanType = "boolean";
    final String longType = "long";
    final String doubleType = "double";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(intField, "\t\t");
          _builder.append(" => ");
          _builder.append(longType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(stringField, "\t\t");
          _builder.append(" => ");
          _builder.append(doubleType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(floatField, "\t\t");
          _builder.append(" => ");
          _builder.append(booleanType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(" => ");
          _builder.append(floatType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" => ");
          _builder.append(stringType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(longField, "\t\t");
          _builder.append(" => ");
          _builder.append(intType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("string ");
          _builder.append(stringField, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("float ");
          _builder.append(floatField, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("boolean ");
          _builder.append(booleanField1, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("double ");
          _builder.append(doubleField, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("long ");
          _builder.append(longField, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, intField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, stringField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, floatField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, booleanField1)).intValue());
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, doubleField)).intValue());
    Assert.assertEquals(5, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, longField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, intField, "long")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, stringField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, floatField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, doubleField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, booleanField1, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, longField, "int")).booleanValue());
  }
  
  @Test
  public void testChangeDefType__PrimitiveValue_WithValues() {
    final String protocolName = "NSRadar";
    final String recordName = "RadarOne";
    final String intField = "intVal";
    final String doubleType = "double";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_type ");
          _builder.append(intField, "\t\t");
          _builder.append(" => ");
          _builder.append(doubleType, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = 1;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, intField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, intField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, intField, Integer.valueOf(1))).booleanValue());
  }
  
  @Test
  public void testChangeDefValue() {
    final String protocolName = "NSRadar";
    final String recordName = "RadarOne";
    final String intField = "intVal";
    final String doubleType = "double";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("set_val ");
          _builder.append(intField, "\t\t");
          _builder.append(" => 55;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarOne{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int ");
          _builder.append(intField, "\t\t");
          _builder.append(" = 1;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Foo { }");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record RadarTwo{}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, intField)).intValue());
    Assert.assertTrue((this.getFieldValue(this.generator.protocols.get(protocolName), recordName, intField, Integer.valueOf(55))).booleanValue());
  }
  
  public List<String> getElements(final Map<String, AvroIDLFile> protocols) {
    final List<String> schemasAndFields = new ArrayList<String>();
    final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
      Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(p2.getElements(), TypeDef.class);
      for (final TypeDef typeDef : _filter) {
        {
          Type currentSchema = typeDef.getType();
          if ((currentSchema instanceof EnumType)) {
            String _name = p2.getName();
            String _plus = (_name + ".");
            String _name_1 = ((EnumType)currentSchema).getName();
            String _plus_1 = (_plus + _name_1);
            schemasAndFields.add(_plus_1);
            EList<String> _literals = ((EnumType)currentSchema).getLiterals();
            for (final String literal : _literals) {
              String _name_2 = p2.getName();
              String _plus_2 = (_name_2 + ".");
              String _name_3 = ((EnumType)currentSchema).getName();
              String _plus_3 = (_plus_2 + _name_3);
              String _plus_4 = (_plus_3 + ".");
              String _plus_5 = (_plus_4 + literal);
              schemasAndFields.add(_plus_5);
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              String _name_4 = p2.getName();
              String _plus_6 = (_name_4 + ".");
              String _name_5 = ((RecordType)currentSchema).getName();
              String _plus_7 = (_plus_6 + _name_5);
              schemasAndFields.add(_plus_7);
              EList<Field> _fields = ((RecordType)currentSchema).getFields();
              for (final Field field : _fields) {
                String _name_6 = p2.getName();
                String _plus_8 = (_name_6 + ".");
                String _name_7 = ((RecordType)currentSchema).getName();
                String _plus_9 = (_plus_8 + _name_7);
                String _plus_10 = (_plus_9 + ".");
                String _name_8 = field.getName();
                String _plus_11 = (_plus_10 + _name_8);
                schemasAndFields.add(_plus_11);
              }
            } else {
              if ((currentSchema instanceof ErrorType)) {
                String _name_9 = p2.getName();
                String _plus_12 = (_name_9 + ".");
                String _name_10 = ((ErrorType)currentSchema).getName();
                String _plus_13 = (_plus_12 + _name_10);
                schemasAndFields.add(_plus_13);
                EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
                for (final Field field_1 : _fields_1) {
                  String _name_11 = p2.getName();
                  String _plus_14 = (_name_11 + ".");
                  String _name_12 = ((ErrorType)currentSchema).getName();
                  String _plus_15 = (_plus_14 + _name_12);
                  String _plus_16 = (_plus_15 + ".");
                  String _name_13 = field_1.getName();
                  String _plus_17 = (_plus_16 + _name_13);
                  schemasAndFields.add(_plus_17);
                }
              }
            }
          }
        }
      }
    };
    protocols.forEach(_function);
    return schemasAndFields;
  }
  
  public Integer getSchemaPosition(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return Integer.valueOf(avdl.getElements().indexOf(typeDef));
        }
      }
    }
    return null;
  }
  
  public Type getSchemaType(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return currentSchema;
        }
      }
    }
    return null;
  }
  
  public Integer getFieldPosition(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return Integer.valueOf(((ErrorType) currentSchema).getFields().indexOf(field));
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return Integer.valueOf(((RecordType) currentSchema).getFields().indexOf(field_1));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Integer getConstantValuePosition(final AvroIDLFile avdl, final String schemaName, final String constantValName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof EnumType)) {
            return Integer.valueOf(((EnumType)currentSchema).getLiterals().indexOf(constantValName));
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldType(final AvroIDLFile avdl, final String schemaName, final String fieldName, final String expectedType) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof RecordType)) {
            EList<Field> _fields = ((RecordType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return Boolean.valueOf(this.getType(field.getType()).equals(expectedType));
              }
            }
          } else {
            if ((currentSchema instanceof ErrorType)) {
              EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return Boolean.valueOf(this.getType(field_1.getType()).equals(expectedType));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public String getType(final FieldType fieldType) {
    if ((fieldType instanceof PrimativeTypeLink)) {
      return ((PrimativeTypeLink)fieldType).getTarget();
    } else {
      if ((fieldType instanceof CustomTypeLink)) {
        Type _target = ((CustomTypeLink)fieldType).getTarget();
        if ((_target instanceof RecordType)) {
          Type _target_1 = ((CustomTypeLink)fieldType).getTarget();
          return ((RecordType) _target_1).getName();
        } else {
          Type _target_2 = ((CustomTypeLink)fieldType).getTarget();
          if ((_target_2 instanceof EnumType)) {
            Type _target_3 = ((CustomTypeLink)fieldType).getTarget();
            return ((EnumType) _target_3).getName();
          } else {
            Type _target_4 = ((CustomTypeLink)fieldType).getTarget();
            if ((_target_4 instanceof ErrorType)) {
              Type _target_5 = ((CustomTypeLink)fieldType).getTarget();
              return ((ErrorType) _target_5).getName();
            }
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldValue(final AvroIDLFile avdl, final String schemaName, final String fieldName, final Object expectedValue) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof RecordType)) {
            EList<Field> _fields = ((RecordType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return Boolean.valueOf(this.getDefValue(field.getDefault()).equals(expectedValue));
              }
            }
          } else {
            if ((currentSchema instanceof ErrorType)) {
              EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return Boolean.valueOf(this.getDefValue(field_1.getDefault()).equals(expectedValue));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Object getDefValue(final Value value) {
    if ((value instanceof IntValue)) {
      return Integer.valueOf(((IntValue)value).getVal());
    } else {
      if ((value instanceof StringValue)) {
        return ((StringValue)value).getVal();
      } else {
        if ((value instanceof BooleanValue)) {
          return Boolean.valueOf(((BooleanValue)value).isVal());
        } else {
          if ((value instanceof FloatValue)) {
            return Float.valueOf(((FloatValue)value).getVal());
          }
        }
      }
    }
    return null;
  }
}
