/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import com.google.inject.Inject;
import javax.inject.Provider;
import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.Model;
import org.aedit.tests.AvroclipseProvider;
import org.aedit.validation.ErrorCodes;
import org.aedit.validation.ErrorMessages;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditValidatorTest {
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testRemoveSchema__DeletedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema(), ErrorCodes.REMOVE_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveSchema__TypeMissmatchEnum() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove enum house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema(), ErrorCodes.REMOVE_SCHEMA, ErrorMessages.TYPE_MISSMATCH);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveSchema__TypeMissmatchError() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove error house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema(), ErrorCodes.REMOVE_SCHEMA, ErrorMessages.TYPE_MISSMATCH);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveSchema__RenamedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema(), ErrorCodes.REMOVE_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameSchema__RemovedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameSchema(), ErrorCodes.RENAME_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameSchema__TypeMissmatch() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename enum house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameSchema(), ErrorCodes.RENAME_SCHEMA, ErrorMessages.TYPE_MISSMATCH);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * NOTE: Renamed objects are treated as if the object has been removed.
   */
  @Test
  public void testRenameSchema__RenameTwice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => OldGarage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameSchema(), ErrorCodes.RENAME_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeSchema__RemovedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {};");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeSchema(), ErrorCodes.CHANGE_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeSchema__TypeMissmatch() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change error house.Garage {};");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeSchema(), ErrorCodes.CHANGE_SCHEMA, ErrorMessages.TYPE_MISSMATCH);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeSchema__RenamedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeSchema(), ErrorCodes.CHANGE_SCHEMA, ErrorMessages.DELETED_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddRecord__DuplicateSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.at(0) record house.Garage()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddRecord(), ErrorCodes.ADD_RECORD, ErrorMessages.DUPLICATE_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveVariable__DeletedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveVariable(), ErrorCodes.REMOVE_VARIABLE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveVariable__RenamedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveVariable(), ErrorCodes.REMOVE_VARIABLE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveVariable__IncorrectVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record SecondGarage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num1;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveVariable(), ErrorCodes.REMOVE_VARIABLE, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameVariable__RemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable(), ErrorCodes.RENAME_VARIABLE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameVariable__RenamedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable(), ErrorCodes.RENAME_VARIABLE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameVariable__IncorrectVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num1 => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record SecondGarage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num1;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable(), ErrorCodes.RENAME_VARIABLE, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameVariable__NewNameTaken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => foo;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("sting foo;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable(), ErrorCodes.RENAME_VARIABLE, ErrorMessages.DUPLICATE_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeType__RemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_type num => long;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeType(), ErrorCodes.CHANGE_TYPE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeType__IncorrectVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_type num1 => long;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record SecondGarage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num1;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeType(), ErrorCodes.CHANGE_TYPE, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeDefValue__RemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_val num => 1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeDefValue(), ErrorCodes.CHANGE_DEF_VALUE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeDefValue__IncorrectVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_val num1 => 1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record SecondGarage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num1;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeDefValue(), ErrorCodes.CHANGE_DEF_VALUE, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddVariable_DuplicateField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.at(0) string num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddVariable(), ErrorCodes.ADD_VARIABLE, ErrorMessages.DUPLICATE_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddEnumConstant__DuplicateEnumConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.at(0) RED;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddEnum(), ErrorCodes.ADD_ENUM_CONST, ErrorMessages.DUPLICATE_ENUM_CONST);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveEnumConstant_RemovedEnumConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove RED;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove RED;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveEnum(), ErrorCodes.REMOVE_ENUM_CONST, ErrorMessages.REMOVED_ENUM_CONST);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveEnumConstant__UndefinedEnumConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove PURPLE;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveEnum(), ErrorCodes.REMOVE_ENUM_CONST, ErrorMessages.NON_EXISTENT_ENUM_CONST);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertMethod(final Model m, final EClass model, final String code, final String message) {
    this._validationTestHelper.assertError(m, model, code, message);
  }
}
