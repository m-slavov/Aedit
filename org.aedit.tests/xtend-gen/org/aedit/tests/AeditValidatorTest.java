/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import com.google.inject.Inject;
import javax.inject.Provider;
import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.Model;
import org.aedit.tests.AvroclipseProvider;
import org.aedit.validation.AeditValidator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditValidatorTest {
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testRemoveDeletedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveRenamedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameRemovedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameSchemaTwice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => OldGarage;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeRemovedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove record house.Garage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {};");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{ }");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeRenamedSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rename record house.Garage => NewGarage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedSchema(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeSchema());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDuplicateSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.at(0) record house.Garage()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddRecord(), AeditValidator.DUPLICATE_FIELD, 
        "Record with this name already exists in this namespace!");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveDeletedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveVariable());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveRenamedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveVariable());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameRemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameVariableTwice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rename num => newNum;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRenameVariable());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeTypeOfRemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_type num => long;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeType());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testChangeValueOfRemovedVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("remove num;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("set_val num => 1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedVariable(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getChangeDefValue());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDuplicateField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("change record house.Garage {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("add.at(0) string num;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertDuplicateField(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddVariable());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDuplicateEnumConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add.at(0) RED;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertDuplicateField(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddEnum());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveDeletedEnumConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove RED;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove RED;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedEnumConstant(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveEnum());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveUndefinedConstant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change enum house.Colors {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove PURPLE;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdlclipse"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'house\')");
            _builder_1.newLine();
            _builder_1.append("protocol House{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Garage{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int num;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("enum Colors{");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("RED, GREEN, BLUE\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertRemovedEnumConstant(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveEnum());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertRemovedSchema(final Model m, final EClass model) {
    this._validationTestHelper.assertError(m, model, 
      AeditValidator.REMOVE_SCHEMA, 
      "Schema does not exist!");
  }
  
  private void assertRemovedVariable(final Model m, final EClass model) {
    this._validationTestHelper.assertError(m, model, 
      AeditValidator.REMOVE_VARIABLE, 
      "Variable has been deleted!");
  }
  
  private void assertRemovedEnumConstant(final Model m, final EClass model) {
    this._validationTestHelper.assertError(m, model, 
      AeditValidator.REMOVE_ENUM_CONST, 
      "Constant does not exist!");
  }
  
  private void assertDuplicateField(final Model m, final EClass model) {
    this._validationTestHelper.assertError(m, model, 
      AeditValidator.DUPLICATE_FIELD, 
      "Field with this name already exists!");
  }
  
  private void assertMethod(final Model m, final EClass model, final String code, final String message) {
    this._validationTestHelper.assertError(m, model, code, message);
  }
}
