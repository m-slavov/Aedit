/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import avroclipse.avroIDL.Annotation;
import avroclipse.avroIDL.Array;
import avroclipse.avroIDL.AvroIDLFile;
import avroclipse.avroIDL.BooleanValue;
import avroclipse.avroIDL.CustomTypeLink;
import avroclipse.avroIDL.EnumType;
import avroclipse.avroIDL.ErrorType;
import avroclipse.avroIDL.Field;
import avroclipse.avroIDL.FieldType;
import avroclipse.avroIDL.FloatValue;
import avroclipse.avroIDL.IntValue;
import avroclipse.avroIDL.PrimativeTypeLink;
import avroclipse.avroIDL.RecordType;
import avroclipse.avroIDL.StringValue;
import avroclipse.avroIDL.Type;
import avroclipse.avroIDL.TypeDef;
import avroclipse.avroIDL.Value;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.inject.Provider;
import org.aedit.generator.AeditGenerator;
import org.aedit.tests.AvroclipseProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditAnnotationGeneratorTest {
  @Inject
  private AeditGenerator generator;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testGetElements() {
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Err{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int Foo;\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains("NSRadar.Radar"));
    Assert.assertTrue(elements.contains("NSRadar.Radar.num"));
    Assert.assertTrue(elements.contains("NSRadar.Measures"));
    Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"));
    Assert.assertTrue(elements.contains("NSRadar.Err"));
    Assert.assertTrue(elements.contains("NSRadar.Err.Foo"));
  }
  
  @Test
  public void testAddAnnotationToSchema__Record() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.annot record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo(foo);");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("add.annot record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo1(foo1);");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final ArrayList<String> addedAnnotations = CollectionLiterals.<String>newArrayList("@foo", "@foo1");
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(addedAnnotations, Object.class)), ((Object[])Conversions.unwrapArray(this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName), Object.class)));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo").equals("foo"));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo1").equals("foo1"));
  }
  
  @Test
  public void testAddAnnotationToSchema__Enum() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.annot enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo(foo);");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("add.annot enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo1(foo1);");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("NUM");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final ArrayList<String> addedAnnotations = CollectionLiterals.<String>newArrayList("@foo", "@foo1");
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(addedAnnotations, Object.class)), ((Object[])Conversions.unwrapArray(this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName), Object.class)));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo").equals("foo"));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo1").equals("foo1"));
  }
  
  @Test
  public void testAddAnnotationToSchema__Error() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("add.annot error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo(foo);");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("add.annot error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => @foo1(foo1);");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final ArrayList<String> addedAnnotations = CollectionLiterals.<String>newArrayList("@foo", "@foo1");
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(addedAnnotations, Object.class)), ((Object[])Conversions.unwrapArray(this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName), Object.class)));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo").equals("foo"));
    Assert.assertTrue(this.getSchemaAnnotationValue(this.generator.protocols.get(protocolName), recordName, "@foo1").equals("foo1"));
  }
  
  @Test
  public void testRemoveAnnotationFromSchema__Record() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove.annot record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("remove.annot record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo1;");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo(\"foo\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo1(\"foo1\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo1");
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
  }
  
  @Test
  public void testRemoveAnnotationFromSchema__Enum() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove.annot enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("remove.annot enum ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo1;");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo(\"foo\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo1(\"foo1\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("NUM");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo1");
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
  }
  
  @Test
  public void testRemoveAnnotationFromSchema__Error() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("remove.annot error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("remove.annot error ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" => foo1;");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo(\"foo\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@foo1(\"foo1\")");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = this.getSchemaAnnotations(this.generator.protocols.get(protocolName), recordName).contains("@foo1");
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
  }
  
  @Test
  public void testAddAnnotationToField__AnnotationWithValue() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("add.annot num  => @foo(foo);");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("add.annot name => @foo1(foo1);");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(CollectionLiterals.<Object>newArrayList("@foo"), Object.class)), ((Object[])Conversions.unwrapArray(this.getFieldAnnotationNames(this.generator.protocols.get(protocolName), recordName, "num"), Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(CollectionLiterals.<Object>newArrayList("@foo1"), Object.class)), ((Object[])Conversions.unwrapArray(this.getFieldAnnotationNames(this.generator.protocols.get(protocolName), recordName, "name"), Object.class)));
    Assert.assertTrue(this.getFieldAnnotationValue(this.generator.protocols.get(protocolName), recordName, "num", "@foo").equals("foo"));
    Assert.assertTrue(this.getFieldAnnotationValue(this.generator.protocols.get(protocolName), recordName, "name", "@foo1").equals("foo1"));
  }
  
  @Test
  public void testAddNameAnnotationToField__AnnotationWithValue() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("add.name_annot num  => @foo(foo);");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("add.name_annot name => @foo1(foo1);");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(CollectionLiterals.<Object>newArrayList("@foo"), Object.class)), ((Object[])Conversions.unwrapArray(this.getFieldNameAnnotationNames(this.generator.protocols.get(protocolName), recordName, "num"), Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(CollectionLiterals.<Object>newArrayList("@foo1"), Object.class)), ((Object[])Conversions.unwrapArray(this.getFieldNameAnnotationNames(this.generator.protocols.get(protocolName), recordName, "name"), Object.class)));
    Assert.assertTrue(this.getFieldNameAnnotationValue(this.generator.protocols.get(protocolName), recordName, "num", "@foo").equals("foo"));
    Assert.assertTrue(this.getFieldNameAnnotationValue(this.generator.protocols.get(protocolName), recordName, "name", "@foo1").equals("foo1"));
  }
  
  @Test
  public void testRemoveAnnotationFromField() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("remove.annot num  => foo;");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("remove.annot name => foo1;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("@foo(\"foo\") int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("@foo1(\"foo1\") string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getFieldAnnotationNames(this.generator.protocols.get(protocolName), recordName, "num").contains("@foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = this.getFieldAnnotationNames(this.generator.protocols.get(protocolName), recordName, "name").contains("@foo1");
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
    boolean _equals = this.getFieldAnnotationValue(this.generator.protocols.get(protocolName), recordName, "num", "@foo").equals("foo");
    boolean _not_2 = (!_equals);
    Assert.assertTrue(_not_2);
    boolean _equals_1 = this.getFieldAnnotationValue(this.generator.protocols.get(protocolName), recordName, "name", "@foo1").equals("foo1");
    boolean _not_3 = (!_equals_1);
    Assert.assertTrue(_not_3);
  }
  
  @Test
  public void testRemoveNameAnnotationFromField() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("remove.name_annot num  => foo;");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("remove.name_annot name => foo1;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int @foo(\"foo\") num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string @foo1(\"foo1\") name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getFieldNameAnnotationNames(this.generator.protocols.get(protocolName), recordName, "num").contains("@foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    boolean _contains_1 = this.getFieldAnnotationNames(this.generator.protocols.get(protocolName), recordName, "name").contains("@foo1");
    boolean _not_1 = (!_contains_1);
    Assert.assertTrue(_not_1);
    boolean _equals = this.getFieldNameAnnotationValue(this.generator.protocols.get(protocolName), recordName, "num", "@foo").equals("foo");
    boolean _not_2 = (!_equals);
    Assert.assertTrue(_not_2);
    boolean _equals_1 = this.getFieldNameAnnotationValue(this.generator.protocols.get(protocolName), recordName, "name", "@foo1").equals("foo1");
    boolean _not_3 = (!_equals_1);
    Assert.assertTrue(_not_3);
  }
  
  public List<String> getElements(final Map<String, AvroIDLFile> protocols) {
    final List<String> schemasAndFields = new ArrayList<String>();
    final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
      Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(p2.getElements(), TypeDef.class);
      for (final TypeDef typeDef : _filter) {
        {
          Type currentSchema = typeDef.getType();
          if ((currentSchema instanceof EnumType)) {
            String _name = p2.getName();
            String _plus = (_name + ".");
            String _name_1 = ((EnumType)currentSchema).getName();
            String _plus_1 = (_plus + _name_1);
            schemasAndFields.add(_plus_1);
            EList<String> _literals = ((EnumType)currentSchema).getLiterals();
            for (final String literal : _literals) {
              String _name_2 = p2.getName();
              String _plus_2 = (_name_2 + ".");
              String _name_3 = ((EnumType)currentSchema).getName();
              String _plus_3 = (_plus_2 + _name_3);
              String _plus_4 = (_plus_3 + ".");
              String _plus_5 = (_plus_4 + literal);
              schemasAndFields.add(_plus_5);
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              String _name_4 = p2.getName();
              String _plus_6 = (_name_4 + ".");
              String _name_5 = ((RecordType)currentSchema).getName();
              String _plus_7 = (_plus_6 + _name_5);
              schemasAndFields.add(_plus_7);
              EList<Field> _fields = ((RecordType)currentSchema).getFields();
              for (final Field field : _fields) {
                String _name_6 = p2.getName();
                String _plus_8 = (_name_6 + ".");
                String _name_7 = ((RecordType)currentSchema).getName();
                String _plus_9 = (_plus_8 + _name_7);
                String _plus_10 = (_plus_9 + ".");
                String _name_8 = field.getName();
                String _plus_11 = (_plus_10 + _name_8);
                schemasAndFields.add(_plus_11);
              }
            } else {
              if ((currentSchema instanceof ErrorType)) {
                String _name_9 = p2.getName();
                String _plus_12 = (_name_9 + ".");
                String _name_10 = ((ErrorType)currentSchema).getName();
                String _plus_13 = (_plus_12 + _name_10);
                schemasAndFields.add(_plus_13);
                EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
                for (final Field field_1 : _fields_1) {
                  String _name_11 = p2.getName();
                  String _plus_14 = (_name_11 + ".");
                  String _name_12 = ((ErrorType)currentSchema).getName();
                  String _plus_15 = (_plus_14 + _name_12);
                  String _plus_16 = (_plus_15 + ".");
                  String _name_13 = field_1.getName();
                  String _plus_17 = (_plus_16 + _name_13);
                  schemasAndFields.add(_plus_17);
                }
              }
            }
          }
        }
      }
    };
    protocols.forEach(_function);
    return schemasAndFields;
  }
  
  public Integer getSchemaPosition(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return Integer.valueOf(avdl.getElements().indexOf(typeDef));
        }
      }
    }
    return null;
  }
  
  public Type getSchemaType(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return currentSchema;
        }
      }
    }
    return null;
  }
  
  public ArrayList<String> getSchemaAnnotations(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          ArrayList<String> annotationNamesList = new ArrayList<String>();
          EList<Annotation> _annotations = typeDef.getAnnotations();
          for (final Annotation annotation : _annotations) {
            annotationNamesList.add(annotation.getName());
          }
          return annotationNamesList;
        }
      }
    }
    return null;
  }
  
  public Serializable getSchemaAnnotationValue(final AvroIDLFile avdl, final String schemaName, final String annotationName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          EList<Annotation> _annotations = typeDef.getAnnotations();
          for (final Annotation annotation : _annotations) {
            boolean _equals_1 = annotation.getName().equals(annotationName);
            if (_equals_1) {
              return this.getDefValue(annotation.getValues().getValue().get(0));
            }
          }
        }
      }
    }
    return null;
  }
  
  public ArrayList<String> getFieldAnnotationNames(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                final ArrayList<String> annotaitonList = new ArrayList<String>();
                EList<Annotation> _annotations = field.getAnnotations();
                for (final Annotation annotation : _annotations) {
                  annotaitonList.add(annotation.getName());
                }
                return annotaitonList;
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  final ArrayList<String> annotaitonList_1 = new ArrayList<String>();
                  EList<Annotation> _annotations_1 = field_1.getAnnotations();
                  for (final Annotation annotation_1 : _annotations_1) {
                    annotaitonList_1.add(annotation_1.getName());
                  }
                  return annotaitonList_1;
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public ArrayList<String> getFieldNameAnnotationNames(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                final ArrayList<String> annotaitonList = new ArrayList<String>();
                EList<Annotation> _nameAnnotations = field.getNameAnnotations();
                for (final Annotation annotation : _nameAnnotations) {
                  annotaitonList.add(annotation.getName());
                }
                return annotaitonList;
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  final ArrayList<String> annotaitonList_1 = new ArrayList<String>();
                  EList<Annotation> _nameAnnotations_1 = field_1.getNameAnnotations();
                  for (final Annotation annotation_1 : _nameAnnotations_1) {
                    annotaitonList_1.add(annotation_1.getName());
                  }
                  return annotaitonList_1;
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public EList<Annotation> getFieldAnnotations(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return field.getAnnotations();
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return field_1.getAnnotations();
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public EList<Annotation> getFieldNameAnnotations(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return field.getNameAnnotations();
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return field_1.getNameAnnotations();
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Serializable getFieldAnnotationValue(final AvroIDLFile avdl, final String schemaName, final String fieldName, final String annotationName) {
    final EList<Annotation> annotationsList = this.getFieldAnnotations(avdl, schemaName, fieldName);
    for (final Annotation annotation : annotationsList) {
      boolean _equals = annotation.getName().equals(annotationName);
      if (_equals) {
        return this.getDefValue(annotation.getValues().getValue().get(0));
      }
    }
    return Boolean.valueOf(false);
  }
  
  public Serializable getFieldNameAnnotationValue(final AvroIDLFile avdl, final String schemaName, final String fieldName, final String annotationName) {
    final EList<Annotation> annotationsList = this.getFieldNameAnnotations(avdl, schemaName, fieldName);
    for (final Annotation annotation : annotationsList) {
      boolean _equals = annotation.getName().equals(annotationName);
      if (_equals) {
        return this.getDefValue(annotation.getValues().getValue().get(0));
      }
    }
    return Boolean.valueOf(false);
  }
  
  public String getType(final FieldType fieldType) {
    if ((fieldType instanceof PrimativeTypeLink)) {
      return ((PrimativeTypeLink)fieldType).getTarget();
    } else {
      if ((fieldType instanceof CustomTypeLink)) {
        Type _target = ((CustomTypeLink)fieldType).getTarget();
        if ((_target instanceof RecordType)) {
          Type _target_1 = ((CustomTypeLink)fieldType).getTarget();
          return ((RecordType) _target_1).getName();
        } else {
          Type _target_2 = ((CustomTypeLink)fieldType).getTarget();
          if ((_target_2 instanceof EnumType)) {
            Type _target_3 = ((CustomTypeLink)fieldType).getTarget();
            return ((EnumType) _target_3).getName();
          } else {
            Type _target_4 = ((CustomTypeLink)fieldType).getTarget();
            if ((_target_4 instanceof ErrorType)) {
              Type _target_5 = ((CustomTypeLink)fieldType).getTarget();
              return ((ErrorType) _target_5).getName();
            }
          }
        }
      }
    }
    return null;
  }
  
  public Serializable getDefValue(final Value value) {
    if ((value instanceof IntValue)) {
      return Integer.valueOf(((IntValue)value).getVal());
    } else {
      if ((value instanceof StringValue)) {
        return ((StringValue)value).getVal();
      } else {
        if ((value instanceof BooleanValue)) {
          return Boolean.valueOf(((BooleanValue)value).isVal());
        } else {
          if ((value instanceof FloatValue)) {
            return Float.valueOf(((FloatValue)value).getVal());
          } else {
            if ((value instanceof Array)) {
              final EList<Value> values = ((Array)value).getValues().getValue();
              final ArrayList<Object> valList = new ArrayList<Object>();
              for (final Value arrVal : values) {
                if ((arrVal instanceof Value)) {
                  valList.add(this.getDefValue(arrVal));
                }
              }
              return valList;
            }
          }
        }
      }
    }
    return null;
  }
}
