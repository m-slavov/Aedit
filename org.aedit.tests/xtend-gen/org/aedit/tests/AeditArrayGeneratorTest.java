/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import avroclipse.avroIDL.AnnotatedTypeLink;
import avroclipse.avroIDL.Array;
import avroclipse.avroIDL.ArrayFieldType;
import avroclipse.avroIDL.AvroIDLFile;
import avroclipse.avroIDL.BooleanValue;
import avroclipse.avroIDL.CustomTypeLink;
import avroclipse.avroIDL.EnumType;
import avroclipse.avroIDL.ErrorType;
import avroclipse.avroIDL.Field;
import avroclipse.avroIDL.FieldType;
import avroclipse.avroIDL.FloatValue;
import avroclipse.avroIDL.IntValue;
import avroclipse.avroIDL.PrimativeTypeLink;
import avroclipse.avroIDL.RecordType;
import avroclipse.avroIDL.StringValue;
import avroclipse.avroIDL.Type;
import avroclipse.avroIDL.TypeDef;
import avroclipse.avroIDL.TypeLink;
import avroclipse.avroIDL.Value;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.inject.Provider;
import org.aedit.generator.AeditGenerator;
import org.aedit.tests.AvroclipseProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditArrayGeneratorTest {
  @Inject
  private AeditGenerator generator;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testGetElements() {
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Radar{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("enum Measures{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("Foo");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("error Err{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int Foo;\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains("NSRadar.Radar"));
    Assert.assertTrue(elements.contains("NSRadar.Radar.num"));
    Assert.assertTrue(elements.contains("NSRadar.Measures"));
    Assert.assertTrue(elements.contains("NSRadar.Measures.Foo"));
    Assert.assertTrue(elements.contains("NSRadar.Err"));
    Assert.assertTrue(elements.contains("NSRadar.Err.Foo"));
  }
  
  @Test
  public void testAddArray__WithoutValue() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<string> ");
          _builder.append(stringField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<float> ");
          _builder.append(floatField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<boolean> ");
          _builder.append(booleanField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<long> ");
          _builder.append(longField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<double> ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" ;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + booleanField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + floatField)));
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, stringField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, floatField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, booleanField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, longField)).intValue());
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, doubleField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, longField, "long")).booleanValue());
  }
  
  @Test
  public void testAddArray__WithValues() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final String stringField = "strVal";
    final String floatField = "floatVal";
    final String booleanField = "boolVal";
    final String longField = "longVal";
    final String doubleField = "doubleVal";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<string> ");
          _builder.append(stringField, "\t\t");
          _builder.append(" = [Hello, World];");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<float> ");
          _builder.append(floatField, "\t\t");
          _builder.append(" = [1,2];");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<boolean> ");
          _builder.append(booleanField, "\t\t");
          _builder.append(" = [true,false];");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<long> ");
          _builder.append(longField, "\t\t");
          _builder.append(" = [1,2];");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add.at(0) array<double> ");
          _builder.append(doubleField, "\t\t");
          _builder.append(" = [1.1, 2.2];");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("int num;");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    final List<String> elements = this.getElements(this.generator.protocols);
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + stringField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + booleanField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + longField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + doubleField)));
    Assert.assertTrue(elements.contains(((((protocolName + ".") + recordName) + ".") + floatField)));
    Assert.assertEquals(4, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, stringField)).intValue());
    Assert.assertEquals(3, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, floatField)).intValue());
    Assert.assertEquals(2, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, booleanField)).intValue());
    Assert.assertEquals(1, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, longField)).intValue());
    Assert.assertEquals(0, (this.getFieldPosition(this.generator.protocols.get(protocolName), recordName, doubleField)).intValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, stringField, "string")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, floatField, "float")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, doubleField, "double")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, booleanField, "boolean")).booleanValue());
    Assert.assertTrue((this.getFieldType(this.generator.protocols.get(protocolName), recordName, longField, "long")).booleanValue());
    final ArrayList<String> strVal = CollectionLiterals.<String>newArrayList("Hello", "World");
    final ArrayList<Integer> floatVal = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(1), Integer.valueOf(2));
    final ArrayList<Boolean> boolVal = CollectionLiterals.<Boolean>newArrayList(Boolean.valueOf(true), Boolean.valueOf(false));
    final ArrayList<Integer> longVal = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(1), Integer.valueOf(2));
    final ArrayList<Float> doubleVal = CollectionLiterals.<Float>newArrayList(Float.valueOf(1.1f), Float.valueOf(2.2f));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, stringField), Object.class)), ((Object[])Conversions.unwrapArray(strVal, Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, floatField), Object.class)), ((Object[])Conversions.unwrapArray(floatVal, Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, booleanField), Object.class)), ((Object[])Conversions.unwrapArray(boolVal, Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, longField), Object.class)), ((Object[])Conversions.unwrapArray(longVal, Object.class)));
    Assert.assertArrayEquals(((Object[])Conversions.unwrapArray(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, doubleField), Object.class)), ((Object[])Conversions.unwrapArray(doubleVal, Object.class)));
  }
  
  @Test
  public void testRemoveArrayValue__Int() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove_value num => 1;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<int> num = [1,2];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Integer.valueOf(1));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Integer.valueOf(2)));
  }
  
  @Test
  public void testRemoveArrayValue__String() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove_value num => foo;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<string> num = [\"foo\",\"foo1\"];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains("foo");
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains("foo1"));
  }
  
  @Test
  public void testRemoveArrayValue__Double() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove_value num => 1.1;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<double> num = [1.1 , 2.2];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(1.1f));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(2.2f)));
  }
  
  @Test
  public void testRemoveArrayValueAtIndex() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("remove_value.at(0) num;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<double> num = [1.1 , 2.2];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    boolean _contains = this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(1.1f));
    boolean _not = (!_contains);
    Assert.assertTrue(_not);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(2.2f)));
  }
  
  @Test
  public void testAddArrayValue__Int() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add_value.at(0) num => 5;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<int> num = [1 , 2];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Integer.valueOf(5)));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Integer.valueOf(1)));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Integer.valueOf(2)));
  }
  
  @Test
  public void testAddArrayValue__Double() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add_value.at(0) num => 5.5;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<double> num = [1.1 , 2.2];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(5.5f)));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(1.1f)));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains(Float.valueOf(2.2f)));
  }
  
  @Test
  public void testAddArrayValue__String() {
    final String protocolName = "NSRadar";
    final String recordName = "Record";
    final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
    ResourceSet _get = this.rsp.get();
    final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
      Resource _createResource = it.createResource(URI.createFileURI("/Main.aedit"));
      final Procedure1<Resource> _function_1 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("feature FeatureOne {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("RuleSet1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("use FeatureOne;");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      Resource _createResource_1 = it.createResource(URI.createFileURI("/Other.aedit"));
      final Procedure1<Resource> _function_2 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("rule Rule1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("change record ");
          _builder.append(protocolName, "\t");
          _builder.append(".");
          _builder.append(recordName, "\t");
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("add_value.at(0) num => Foo;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("};");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("ruleset RuleSet1 {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("Rule1");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_1, _function_2);
      Resource _createResource_2 = it.createResource(URI.createFileURI("/Other.avdl"));
      final Procedure1<Resource> _function_3 = (Resource it_1) -> {
        try {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("@namespace(\'NSRadar\')");
          _builder.newLine();
          _builder.append("protocol NSRadar{");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("record Record{");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("array<double> num = [\"Hello\" , \"World\"];");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("string name;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          StringInputStream _stringInputStream = new StringInputStream(_builder.toString(), "UTF-8");
          it_1.load(_stringInputStream, null);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      ObjectExtensions.<Resource>operator_doubleArrow(_createResource_2, _function_3);
    };
    final ResourceSet resourceSet = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
    final GeneratorContext context = new GeneratorContext();
    context.setCancelIndicator(CancelIndicator.NullImpl);
    this.generator.doGenerate(resourceSet.getResources().get(0), fsa, context);
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains("Foo"));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains("Hello"));
    Assert.assertTrue(this.getArrayValues(this.generator.protocols.get(protocolName), recordName, "num").contains("World"));
  }
  
  public List<String> getElements(final Map<String, AvroIDLFile> protocols) {
    final List<String> schemasAndFields = new ArrayList<String>();
    final BiConsumer<String, AvroIDLFile> _function = (String p1, AvroIDLFile p2) -> {
      Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(p2.getElements(), TypeDef.class);
      for (final TypeDef typeDef : _filter) {
        {
          Type currentSchema = typeDef.getType();
          if ((currentSchema instanceof EnumType)) {
            String _name = p2.getName();
            String _plus = (_name + ".");
            String _name_1 = ((EnumType)currentSchema).getName();
            String _plus_1 = (_plus + _name_1);
            schemasAndFields.add(_plus_1);
            EList<String> _literals = ((EnumType)currentSchema).getLiterals();
            for (final String literal : _literals) {
              String _name_2 = p2.getName();
              String _plus_2 = (_name_2 + ".");
              String _name_3 = ((EnumType)currentSchema).getName();
              String _plus_3 = (_plus_2 + _name_3);
              String _plus_4 = (_plus_3 + ".");
              String _plus_5 = (_plus_4 + literal);
              schemasAndFields.add(_plus_5);
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              String _name_4 = p2.getName();
              String _plus_6 = (_name_4 + ".");
              String _name_5 = ((RecordType)currentSchema).getName();
              String _plus_7 = (_plus_6 + _name_5);
              schemasAndFields.add(_plus_7);
              EList<Field> _fields = ((RecordType)currentSchema).getFields();
              for (final Field field : _fields) {
                String _name_6 = p2.getName();
                String _plus_8 = (_name_6 + ".");
                String _name_7 = ((RecordType)currentSchema).getName();
                String _plus_9 = (_plus_8 + _name_7);
                String _plus_10 = (_plus_9 + ".");
                String _name_8 = field.getName();
                String _plus_11 = (_plus_10 + _name_8);
                schemasAndFields.add(_plus_11);
              }
            } else {
              if ((currentSchema instanceof ErrorType)) {
                String _name_9 = p2.getName();
                String _plus_12 = (_name_9 + ".");
                String _name_10 = ((ErrorType)currentSchema).getName();
                String _plus_13 = (_plus_12 + _name_10);
                schemasAndFields.add(_plus_13);
                EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
                for (final Field field_1 : _fields_1) {
                  String _name_11 = p2.getName();
                  String _plus_14 = (_name_11 + ".");
                  String _name_12 = ((ErrorType)currentSchema).getName();
                  String _plus_15 = (_plus_14 + _name_12);
                  String _plus_16 = (_plus_15 + ".");
                  String _name_13 = field_1.getName();
                  String _plus_17 = (_plus_16 + _name_13);
                  schemasAndFields.add(_plus_17);
                }
              }
            }
          }
        }
      }
    };
    protocols.forEach(_function);
    return schemasAndFields;
  }
  
  public Integer getSchemaPosition(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return Integer.valueOf(avdl.getElements().indexOf(typeDef));
        }
      }
    }
    return null;
  }
  
  public Type getSchemaType(final AvroIDLFile avdl, final String schemaName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          return currentSchema;
        }
      }
    }
    return null;
  }
  
  public Integer getFieldPosition(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof ErrorType)) {
            EList<Field> _fields = ((ErrorType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return Integer.valueOf(((ErrorType) currentSchema).getFields().indexOf(field));
              }
            }
          } else {
            if ((currentSchema instanceof RecordType)) {
              EList<Field> _fields_1 = ((RecordType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return Integer.valueOf(((RecordType) currentSchema).getFields().indexOf(field_1));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Integer getConstantValuePosition(final AvroIDLFile avdl, final String schemaName, final String constantValName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof EnumType)) {
            return Integer.valueOf(((EnumType)currentSchema).getLiterals().indexOf(constantValName));
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldType(final AvroIDLFile avdl, final String schemaName, final String fieldName, final String expectedType) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof RecordType)) {
            EList<Field> _fields = ((RecordType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                final FieldType fieldType = field.getType();
                if ((fieldType instanceof ArrayFieldType)) {
                  return Boolean.valueOf(this.getArrayType(((ArrayFieldType)fieldType).getType()).equals(expectedType));
                }
                return Boolean.valueOf(this.getType(field.getType()).equals(expectedType));
              }
            }
          } else {
            if ((currentSchema instanceof ErrorType)) {
              EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  final FieldType fieldType_1 = field_1.getType();
                  if ((fieldType_1 instanceof ArrayFieldType)) {
                    return Boolean.valueOf(this.getArrayType(((ArrayFieldType)fieldType_1).getType()).equals(expectedType));
                  }
                  return Boolean.valueOf(this.getType(field_1.getType()).equals(expectedType));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public String getArrayType(final AnnotatedTypeLink annotatedTypeLink) {
    TypeLink _type = annotatedTypeLink.getType();
    if ((_type instanceof ArrayFieldType)) {
      TypeLink _type_1 = annotatedTypeLink.getType();
      this.getArrayType(((ArrayFieldType) _type_1).getType());
    }
    return this.getType(annotatedTypeLink.getType());
  }
  
  public String getType(final FieldType fieldType) {
    if ((fieldType instanceof PrimativeTypeLink)) {
      return ((PrimativeTypeLink)fieldType).getTarget();
    } else {
      if ((fieldType instanceof CustomTypeLink)) {
        Type _target = ((CustomTypeLink)fieldType).getTarget();
        if ((_target instanceof RecordType)) {
          Type _target_1 = ((CustomTypeLink)fieldType).getTarget();
          return ((RecordType) _target_1).getName();
        } else {
          Type _target_2 = ((CustomTypeLink)fieldType).getTarget();
          if ((_target_2 instanceof EnumType)) {
            Type _target_3 = ((CustomTypeLink)fieldType).getTarget();
            return ((EnumType) _target_3).getName();
          } else {
            Type _target_4 = ((CustomTypeLink)fieldType).getTarget();
            if ((_target_4 instanceof ErrorType)) {
              Type _target_5 = ((CustomTypeLink)fieldType).getTarget();
              return ((ErrorType) _target_5).getName();
            }
          }
        }
      }
    }
    return null;
  }
  
  public Boolean getFieldValue(final AvroIDLFile avdl, final String schemaName, final String fieldName, final Object expectedValue) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof RecordType)) {
            EList<Field> _fields = ((RecordType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                return Boolean.valueOf(this.getDefValue(field.getDefault()).equals(expectedValue));
              }
            }
          } else {
            if ((currentSchema instanceof ErrorType)) {
              EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  return Boolean.valueOf(this.getDefValue(field_1.getDefault()).equals(expectedValue));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public ArrayList<Object> getArrayValues(final AvroIDLFile avdl, final String schemaName, final String fieldName) {
    Iterable<TypeDef> _filter = Iterables.<TypeDef>filter(avdl.getElements(), TypeDef.class);
    for (final TypeDef typeDef : _filter) {
      {
        Type currentSchema = typeDef.getType();
        boolean _equals = currentSchema.getName().equals(schemaName);
        if (_equals) {
          if ((currentSchema instanceof RecordType)) {
            EList<Field> _fields = ((RecordType)currentSchema).getFields();
            for (final Field field : _fields) {
              boolean _equals_1 = field.getName().equals(fieldName);
              if (_equals_1) {
                Serializable _defValue = this.getDefValue(field.getDefault());
                return ((ArrayList<Object>) _defValue);
              }
            }
          } else {
            if ((currentSchema instanceof ErrorType)) {
              EList<Field> _fields_1 = ((ErrorType)currentSchema).getFields();
              for (final Field field_1 : _fields_1) {
                boolean _equals_2 = field_1.getName().equals(fieldName);
                if (_equals_2) {
                  Serializable _defValue_1 = this.getDefValue(field_1.getDefault());
                  return ((ArrayList<Object>) _defValue_1);
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Serializable getDefValue(final Value value) {
    if ((value instanceof IntValue)) {
      return Integer.valueOf(((IntValue)value).getVal());
    } else {
      if ((value instanceof StringValue)) {
        return ((StringValue)value).getVal();
      } else {
        if ((value instanceof BooleanValue)) {
          return Boolean.valueOf(((BooleanValue)value).isVal());
        } else {
          if ((value instanceof FloatValue)) {
            return Float.valueOf(((FloatValue)value).getVal());
          } else {
            if ((value instanceof Array)) {
              final EList<Value> values = ((Array)value).getValues().getValue();
              final ArrayList<Object> valList = new ArrayList<Object>();
              for (final Value arrVal : values) {
                if ((arrVal instanceof Value)) {
                  valList.add(this.getDefValue(arrVal));
                }
              }
              return valList;
            }
          }
        }
      }
    }
    return null;
  }
}
