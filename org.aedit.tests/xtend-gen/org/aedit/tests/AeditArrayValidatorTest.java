/**
 * generated by Xtext 2.12.0
 */
package org.aedit.tests;

import com.google.inject.Inject;
import javax.inject.Provider;
import org.aedit.aedit.AeditPackage;
import org.aedit.aedit.Model;
import org.aedit.tests.AvroclipseProvider;
import org.aedit.validation.ErrorCodes;
import org.aedit.validation.ErrorMessages;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvroclipseProvider.class)
@SuppressWarnings("all")
public class AeditArrayValidatorTest {
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void testAddArrayValue__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(0) myArray1 => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray1 = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddValueToArray(), ErrorCodes.ADD_ARRAY_VALUE, 
        ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddArrayValue__NoErrors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(0) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Timing {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray1 = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddArrayValue__DeletedArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove myArray;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(0) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int foo;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddValueToArray(), ErrorCodes.ADD_ARRAY_VALUE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddArrayValue__IndexOutOfRange() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(3) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int foo;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddValueToArray(), ErrorCodes.ADD_ARRAY_VALUE, ErrorMessages.INDEX_OUT_OF_RANGE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Check if the size of an array increases dynamically after a value is added.
   */
  @Test
  public void testAddArrayValue__DynamicIndex() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(2) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(3) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int foo;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAddArrayValue__IndexOutOfRangeAfterAddition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(2) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("add_value.at(4) myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("int foo;");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getAddValueToArray(), ErrorCodes.ADD_ARRAY_VALUE, ErrorMessages.INDEX_OUT_OF_RANGE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(0) myArray1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Foo{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray1 = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValueAtIndex(), ErrorCodes.REMOVE_ARRAY_VALUE_AT_INDEX, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__NoErrors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Foo{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray1 = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__DeletedArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove myArray;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValueAtIndex(), ErrorCodes.REMOVE_ARRAY_VALUE_AT_INDEX, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__EmptyArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValueAtIndex(), ErrorCodes.REMOVE_ARRAY_VALUE_AT_INDEX, ErrorMessages.EMPTY_ARRAY);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__IndexOutOfRange() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(4) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1,2]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValueAtIndex(), ErrorCodes.REMOVE_ARRAY_VALUE_AT_INDEX, ErrorMessages.INDEX_OUT_OF_RANGE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__DynamicIndexError() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1,2]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValueAtIndex(), ErrorCodes.REMOVE_ARRAY_VALUE_AT_INDEX, ErrorMessages.INDEX_OUT_OF_RANGE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValueAtIndex__DynamicIndexNoError() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(1) myArray;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value.at(0) myArray;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1,2]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValue__IncorrectField() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value myArray1 => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Foo{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray1 = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValue(), ErrorCodes.REMOVE_ARRAY_VALUE, ErrorMessages.FIELD_NOT_IN_SCHEMA);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValue__NoErrors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValue__DeletedArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove myArray;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray = [1 , 0  ]; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValue(), ErrorCodes.REMOVE_ARRAY_VALUE, ErrorMessages.DELETED_FIELD);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRemoveArrayValue__EmptyArray() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("rule Rule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("change record SRF.Burst_parameters {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remove_value myArray => 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      URI _createFileURI = URI.createFileURI("/Main.aedit");
      ResourceSet _get = this.rsp.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createFileURI("/Other.avdl"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("@namespace(\'SRF\')");
            _builder_1.newLine();
            _builder_1.append("protocol SRF{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("record Burst_parameters{ ");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("array <int> myArray; ");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.newLine();
            _builder_1.append("}");
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      this.assertMethod(this._parseHelper.parse(_builder, _createFileURI, _doubleArrow), AeditPackage.eINSTANCE.getRemoveArrayValue(), ErrorCodes.REMOVE_ARRAY_VALUE, ErrorMessages.EMPTY_ARRAY);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertMethod(final Model m, final EClass model, final String code, final String message) {
    this._validationTestHelper.assertError(m, model, code, message);
  }
}
